<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>pwntools on conflict</title>
    <link>/tags/pwntools/</link>
    <description>Recent content in pwntools on conflict</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sat, 11 Mar 2023 00:00:00 +0000</lastBuildDate><atom:link href="/tags/pwntools/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ðŸ‡¬ðŸ‡§ RushCTF 2023 - pwn/onyo</title>
      <link>/posts/2023/03/rushctf-2023-pwn/onyo/</link>
      <pubDate>Sat, 11 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/2023/03/rushctf-2023-pwn/onyo/</guid>
      <description>Note Writeup for the second pwn challenge from the RushCTF 2023.
Description Hello frend! Can you read flag.txt? onyo.zip
File information checksec chall &amp;amp;&amp;amp; file chall [*] &amp;#39;/home/conflict/ctfs/rushctf2023/pwn/onyo/chall&amp;#39; Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) chall: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=838c3ab2792a09b81c8259f7b86265675b60d80e, for GNU/Linux 3.2.0, not stripped So, we&amp;rsquo;re going to work on a 64 bits non-stripped dynamically linked executable, with NX enabled.</description>
    </item>
    
    <item>
      <title>ðŸ‡¬ðŸ‡§ RushCTF 2023 - pwn/poune</title>
      <link>/posts/2023/03/rushctf-2023-pwn/poune/</link>
      <pubDate>Sat, 11 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/2023/03/rushctf-2023-pwn/poune/</guid>
      <description>Note Writeup for the first pwn challenge from the RushCTF 2023.
Description Hello kind sir!Â Can you read flag.txt? poune.zip
File information checksec chall &amp;amp;&amp;amp; file chall [*] &amp;#39;/home/conflict/ctfs/rushctf2023/pwn/poune/chall&amp;#39; Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) chall: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=6f24ec1597edb178ec5b862b44e5fbcb92df3137, for GNU/Linux 3.2.0, not stripped So, we&amp;rsquo;re going to work on a 64 bits non-stripped dynamically linked executable, with NX enabled.</description>
    </item>
    
    <item>
      <title>ðŸ‡¬ðŸ‡§ LACTF 2023 - pwn/rickroll</title>
      <link>/posts/2023/02/lactf-2023-pwn/rickroll/</link>
      <pubDate>Thu, 23 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/2023/02/lactf-2023-pwn/rickroll/</guid>
      <description>Note Third pwn challenge from the LACTF 2023. It confirmed that I definitely hate format string vulnerabilities.
Description Make your own custom rickroll with my new rickroll program! Dockerfile, rickroll, rickroll.c
File information checksec rickroll &amp;amp;&amp;amp; file rickroll [*] &amp;#39;/home/conflict/ctfs/lactf2023/rickroll/rickroll&amp;#39; Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) rickroll: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=a86d346d66fd7261ce17804cc837d0c5f1a2cfa8, for GNU/Linux 3.</description>
    </item>
    
    <item>
      <title>ðŸ‡¬ðŸ‡§ LACTF 2023 - pwn/bot</title>
      <link>/posts/2023/02/lactf-2023-pwn/bot/</link>
      <pubDate>Fri, 17 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/2023/02/lactf-2023-pwn/bot/</guid>
      <description>Note Second pwn challenge from the LACTF 2023. Basic ret2win with a little twist: bypassing a condition to prevent the program from exiting&amp;hellip;
Description I made a bot to automatically answer all of your questions. Dockerfile, libc-2.31.so, ld-2.31.so, bot.c, bot
File information before doing all of that, we run pwninit to patch the binary with the given libc and ld
checksec bot_patched &amp;amp;&amp;amp; file bot_patched [*] &amp;#39;/home/conflict/ctfs/lactf2023/bot/bot_patched&amp;#39; Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x3ff000) RUNPATH: &amp;#39;.</description>
    </item>
    
  </channel>
</rss>
